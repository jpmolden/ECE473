
lab2_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000034e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080010c  0080010c  000003ee  2**0
                  ALLOC
  3 .stab         00000798  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c9f  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001827  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001838  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e4       	ldi	r30, 0x4E	; 78
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 3b 01 	call	0x276	; 0x276 <main>
  c6:	0c 94 a5 01 	jmp	0x34a	; 0x34a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.  
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
  ce:	48 2f       	mov	r20, r24
	static uint16_t state[8] = {0,0,0,0,0,0,0,0};
	state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	99 b3       	in	r25, 0x19	; 25
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	e4 5f       	subi	r30, 0xF4	; 244
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	20 81       	ld	r18, Z
  e0:	31 81       	ldd	r19, Z+1	; 0x01
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	30 6e       	ori	r19, 0xE0	; 224
  e8:	89 2f       	mov	r24, r25
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <chk_buttons+0x24>
  ee:	95 95       	asr	r25
  f0:	87 95       	ror	r24
  f2:	4a 95       	dec	r20
  f4:	e2 f7       	brpl	.-8      	; 0xee <chk_buttons+0x20>
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	99 27       	eor	r25, r25
  fa:	28 2b       	or	r18, r24
  fc:	39 2b       	or	r19, r25
  fe:	31 83       	std	Z+1, r19	; 0x01
 100:	20 83       	st	Z, r18
	if(state[button] == 0xF000) return 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	21 15       	cp	r18, r1
 106:	30 4f       	sbci	r19, 0xF0	; 240
 108:	09 f0       	breq	.+2      	; 0x10c <chk_buttons+0x3e>
 10a:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

//******************************************************************************
}
 10c:	08 95       	ret

0000010e <segsum>:
//***********************************************************************************
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
	if(sum >= 100)(no_digits = 3);	
	if(sum >= 1000)(no_digits = 4);

  //break up decimal sum into 4 digit-segment	
	//The digits (0-9) are used as the index for the seven segment representation
	segment_data[0] = dec_to_7seg[(sum/1) %10];		
 116:	9c 01       	movw	r18, r24
 118:	ad ec       	ldi	r26, 0xCD	; 205
 11a:	bc ec       	ldi	r27, 0xCC	; 204
 11c:	0e 94 96 01 	call	0x32c	; 0x32c <__umulhisi3>
 120:	ac 01       	movw	r20, r24
 122:	56 95       	lsr	r21
 124:	47 95       	ror	r20
 126:	56 95       	lsr	r21
 128:	47 95       	ror	r20
 12a:	56 95       	lsr	r21
 12c:	47 95       	ror	r20
 12e:	9a 01       	movw	r18, r20
 130:	22 0f       	add	r18, r18
 132:	33 1f       	adc	r19, r19
 134:	ca 01       	movw	r24, r20
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	82 0f       	add	r24, r18
 144:	93 1f       	adc	r25, r19
 146:	fe 01       	movw	r30, r28
 148:	e8 1b       	sub	r30, r24
 14a:	f9 0b       	sbc	r31, r25
 14c:	e0 50       	subi	r30, 0x00	; 0
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	80 81       	ld	r24, Z
 152:	80 93 1c 01 	sts	0x011C, r24
	segment_data[1] = dec_to_7seg[(sum/10) %10];
 156:	9a 01       	movw	r18, r20
 158:	0e 94 96 01 	call	0x32c	; 0x32c <__umulhisi3>
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	9c 01       	movw	r18, r24
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	82 0f       	add	r24, r18
 17c:	93 1f       	adc	r25, r19
 17e:	48 1b       	sub	r20, r24
 180:	59 0b       	sbc	r21, r25
 182:	fa 01       	movw	r30, r20
 184:	e0 50       	subi	r30, 0x00	; 0
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	80 81       	ld	r24, Z
 18a:	80 93 1d 01 	sts	0x011D, r24
	segment_data[2] = SEG_OFF;			
 18e:	1f ef       	ldi	r17, 0xFF	; 255
 190:	10 93 1e 01 	sts	0x011E, r17
	segment_data[3] = dec_to_7seg[(sum/100) %10];			
 194:	9e 01       	movw	r18, r28
 196:	36 95       	lsr	r19
 198:	27 95       	ror	r18
 19a:	36 95       	lsr	r19
 19c:	27 95       	ror	r18
 19e:	ab e7       	ldi	r26, 0x7B	; 123
 1a0:	b4 e1       	ldi	r27, 0x14	; 20
 1a2:	0e 94 96 01 	call	0x32c	; 0x32c <__umulhisi3>
 1a6:	ac 01       	movw	r20, r24
 1a8:	56 95       	lsr	r21
 1aa:	47 95       	ror	r20
 1ac:	9a 01       	movw	r18, r20
 1ae:	ad ec       	ldi	r26, 0xCD	; 205
 1b0:	bc ec       	ldi	r27, 0xCC	; 204
 1b2:	0e 94 96 01 	call	0x32c	; 0x32c <__umulhisi3>
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	96 95       	lsr	r25
 1bc:	87 95       	ror	r24
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	9c 01       	movw	r18, r24
 1c4:	22 0f       	add	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	82 0f       	add	r24, r18
 1d6:	93 1f       	adc	r25, r19
 1d8:	48 1b       	sub	r20, r24
 1da:	59 0b       	sbc	r21, r25
 1dc:	fa 01       	movw	r30, r20
 1de:	e0 50       	subi	r30, 0x00	; 0
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	80 81       	ld	r24, Z
 1e4:	80 93 1f 01 	sts	0x011F, r24
	segment_data[4] = dec_to_7seg[(sum/1000) %10];
 1e8:	9e 01       	movw	r18, r28
 1ea:	36 95       	lsr	r19
 1ec:	27 95       	ror	r18
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	36 95       	lsr	r19
 1f4:	27 95       	ror	r18
 1f6:	a5 ec       	ldi	r26, 0xC5	; 197
 1f8:	b0 e2       	ldi	r27, 0x20	; 32
 1fa:	0e 94 96 01 	call	0x32c	; 0x32c <__umulhisi3>
 1fe:	ac 01       	movw	r20, r24
 200:	52 95       	swap	r21
 202:	42 95       	swap	r20
 204:	4f 70       	andi	r20, 0x0F	; 15
 206:	45 27       	eor	r20, r21
 208:	5f 70       	andi	r21, 0x0F	; 15
 20a:	45 27       	eor	r20, r21
 20c:	9a 01       	movw	r18, r20
 20e:	ad ec       	ldi	r26, 0xCD	; 205
 210:	bc ec       	ldi	r27, 0xCC	; 204
 212:	0e 94 96 01 	call	0x32c	; 0x32c <__umulhisi3>
 216:	96 95       	lsr	r25
 218:	87 95       	ror	r24
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	96 95       	lsr	r25
 220:	87 95       	ror	r24
 222:	9c 01       	movw	r18, r24
 224:	22 0f       	add	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	82 0f       	add	r24, r18
 236:	93 1f       	adc	r25, r19
 238:	48 1b       	sub	r20, r24
 23a:	59 0b       	sbc	r21, r25
 23c:	fa 01       	movw	r30, r20
 23e:	e0 50       	subi	r30, 0x00	; 0
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	80 81       	ld	r24, Z
			
  //blank out leading zero digits
	if(sum < 1000){
 244:	c8 3e       	cpi	r28, 0xE8	; 232
 246:	93 e0       	ldi	r25, 0x03	; 3
 248:	d9 07       	cpc	r29, r25
 24a:	78 f4       	brcc	.+30     	; 0x26a <segsum+0x15c>
		segment_data[4] = SEG_OFF;
 24c:	10 93 20 01 	sts	0x0120, r17
	}
        if(sum < 100){
 250:	c4 36       	cpi	r28, 0x64	; 100
 252:	d1 05       	cpc	r29, r1
 254:	30 f4       	brcc	.+12     	; 0x262 <segsum+0x154>
		 segment_data[3] = SEG_OFF;
 256:	10 93 1f 01 	sts	0x011F, r17
	}
        if(sum < 10){
 25a:	2a 97       	sbiw	r28, 0x0a	; 10
 25c:	10 f4       	brcc	.+4      	; 0x262 <segsum+0x154>
                 segment_data[1] = SEG_OFF;
 25e:	10 93 1d 01 	sts	0x011D, r17
	//for(i=1; i>no_digits; i--){
	//	segment_data[i] = SEG_OFF;
	//}
  //now move data to right place for misplaced colon position
  // Data is placed into the correct posistion
}//segment_sum
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	08 95       	ret
	//The digits (0-9) are used as the index for the seven segment representation
	segment_data[0] = dec_to_7seg[(sum/1) %10];		
	segment_data[1] = dec_to_7seg[(sum/10) %10];
	segment_data[2] = SEG_OFF;			
	segment_data[3] = dec_to_7seg[(sum/100) %10];			
	segment_data[4] = dec_to_7seg[(sum/1000) %10];
 26a:	80 93 20 01 	sts	0x0120, r24
	//for(i=1; i>no_digits; i--){
	//	segment_data[i] = SEG_OFF;
	//}
  //now move data to right place for misplaced colon position
  // Data is placed into the correct posistion
}//segment_sum
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <main>:

//***********************************************************************************
int main()
{
//set port bits 4-7 B as outputs
uint16_t sum = 0;
 276:	c0 e0       	ldi	r28, 0x00	; 0
 278:	d0 e0       	ldi	r29, 0x00	; 0
while(1){
  //insert loop delay for debounce
	//_delay_ms(2);
  //make PORTA an input port with pullups 
	DDRA = DDRA_INPUT;
	PORTA = 0xFF; //Enable Pull Ups on PortA
 27a:	ee 24       	eor	r14, r14
 27c:	ea 94       	dec	r14

  //enable tristate buffer for pushbutton switches
	DDRB = (1<<PB4 | 1<<PB5 | 1<<PB6 | 1<<PB7);	
 27e:	90 ef       	ldi	r25, 0xF0	; 240
 280:	f9 2e       	mov	r15, r25
	PORTB = PORTB | BUTTONS_ON;
	
  //now check each button and increment the count as needed
	int i = 0;
	for(i=0 ; i<8; i++){
		if(chk_buttons(i))(sum = sum + (1<<i));
 282:	01 e0       	ldi	r16, 0x01	; 1
 284:	10 e0       	ldi	r17, 0x00	; 0
uint16_t sum = 0;
while(1){
  //insert loop delay for debounce
	//_delay_ms(2);
  //make PORTA an input port with pullups 
	DDRA = DDRA_INPUT;
 286:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; //Enable Pull Ups on PortA
 288:	eb ba       	out	0x1b, r14	; 27

  //enable tristate buffer for pushbutton switches
	DDRB = (1<<PB4 | 1<<PB5 | 1<<PB6 | 1<<PB7);	
 28a:	f7 ba       	out	0x17, r15	; 23
	PORTB = PORTB | BUTTONS_ON;
 28c:	88 b3       	in	r24, 0x18	; 24
 28e:	e8 ba       	out	0x18, r14	; 24
 290:	ec e0       	ldi	r30, 0x0C	; 12
 292:	f1 e0       	ldi	r31, 0x01	; 1
	
  //now check each button and increment the count as needed
	int i = 0;
	for(i=0 ; i<8; i++){
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <main+0x2e>
 29a:	4f 5f       	subi	r20, 0xFF	; 255
 29c:	5f 4f       	sbci	r21, 0xFF	; 255
 29e:	48 30       	cpi	r20, 0x08	; 8
 2a0:	51 05       	cpc	r21, r1
 2a2:	31 f1       	breq	.+76     	; 0x2f0 <main+0x7a>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
	static uint16_t state[8] = {0,0,0,0,0,0,0,0};
	state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
 2a4:	99 b3       	in	r25, 0x19	; 25
 2a6:	20 81       	ld	r18, Z
 2a8:	31 81       	ldd	r19, Z+1	; 0x01
 2aa:	b9 01       	movw	r22, r18
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	29 2f       	mov	r18, r25
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	04 2e       	mov	r0, r20
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <main+0x46>
 2b8:	35 95       	asr	r19
 2ba:	27 95       	ror	r18
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <main+0x42>
 2c0:	21 70       	andi	r18, 0x01	; 1
 2c2:	33 27       	eor	r19, r19
 2c4:	26 2b       	or	r18, r22
 2c6:	37 2b       	or	r19, r23
 2c8:	30 6e       	ori	r19, 0xE0	; 224
 2ca:	21 93       	st	Z+, r18
 2cc:	31 93       	st	Z+, r19
	if(state[button] == 0xF000) return 1;
 2ce:	21 15       	cp	r18, r1
 2d0:	30 4f       	sbci	r19, 0xF0	; 240
 2d2:	19 f7       	brne	.-58     	; 0x29a <main+0x24>
	PORTB = PORTB | BUTTONS_ON;
	
  //now check each button and increment the count as needed
	int i = 0;
	for(i=0 ; i<8; i++){
		if(chk_buttons(i))(sum = sum + (1<<i));
 2d4:	c8 01       	movw	r24, r16
 2d6:	04 2e       	mov	r0, r20
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <main+0x68>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <main+0x64>
 2e2:	c8 0f       	add	r28, r24
 2e4:	d9 1f       	adc	r29, r25
	DDRB = (1<<PB4 | 1<<PB5 | 1<<PB6 | 1<<PB7);	
	PORTB = PORTB | BUTTONS_ON;
	
  //now check each button and increment the count as needed
	int i = 0;
	for(i=0 ; i<8; i++){
 2e6:	4f 5f       	subi	r20, 0xFF	; 255
 2e8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ea:	48 30       	cpi	r20, 0x08	; 8
 2ec:	51 05       	cpc	r21, r1
 2ee:	d1 f6       	brne	.-76     	; 0x2a4 <main+0x2e>
		if(chk_buttons(i))(sum = sum + (1<<i));
		//_delay_ms(1);
		//sum = 1023;
	}	
  //disable tristate buffer for pushbutton switches
	PORTB |= (0<<PB4) | (0<<PB5) | (0<<PB6) | (1<<PB7);
 2f0:	c7 9a       	sbi	0x18, 7	; 24
	
  //bound the count to 0 - 1023
	if(sum > 1023)(sum = sum - 1023);
 2f2:	c1 15       	cp	r28, r1
 2f4:	a4 e0       	ldi	r26, 0x04	; 4
 2f6:	da 07       	cpc	r29, r26
 2f8:	10 f0       	brcs	.+4      	; 0x2fe <main+0x88>
 2fa:	cf 5f       	subi	r28, 0xFF	; 255
 2fc:	d3 40       	sbci	r29, 0x03	; 3
  //break up the disp_value to 4, BCD digits in the array: call (segsum)
  	segsum(sum);
 2fe:	ce 01       	movw	r24, r28
 300:	0e 94 87 00 	call	0x10e	; 0x10e <segsum>
  //bound a counter (0-4) to keep track of digit to display 
	int counter = 0;
  //make PORTA an output
	DDRA = DDRA_OUTPUT;
 304:	ea ba       	out	0x1a, r14	; 26
 306:	ec e1       	ldi	r30, 0x1C	; 28
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	80 e0       	ldi	r24, 0x00	; 0
  //send 7 segment code to LED segments
	for(;counter<5;counter++){
		PORTA = segment_data[counter];
 30c:	91 91       	ld	r25, Z+
 30e:	9b bb       	out	0x1b, r25	; 27
		PORTB = counter<<4 | 0<<PB7;
 310:	98 2f       	mov	r25, r24
 312:	92 95       	swap	r25
 314:	90 7f       	andi	r25, 0xF0	; 240
 316:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	af e9       	ldi	r26, 0x9F	; 159
 31a:	bf e0       	ldi	r27, 0x0F	; 15
 31c:	11 97       	sbiw	r26, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <main+0xa6>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0xac>
 322:	00 00       	nop
 324:	8f 5f       	subi	r24, 0xFF	; 255
  //bound a counter (0-4) to keep track of digit to display 
	int counter = 0;
  //make PORTA an output
	DDRA = DDRA_OUTPUT;
  //send 7 segment code to LED segments
	for(;counter<5;counter++){
 326:	85 30       	cpi	r24, 0x05	; 5
 328:	89 f7       	brne	.-30     	; 0x30c <main+0x96>
 32a:	ad cf       	rjmp	.-166    	; 0x286 <main+0x10>

0000032c <__umulhisi3>:
 32c:	a2 9f       	mul	r26, r18
 32e:	b0 01       	movw	r22, r0
 330:	b3 9f       	mul	r27, r19
 332:	c0 01       	movw	r24, r0
 334:	a3 9f       	mul	r26, r19
 336:	70 0d       	add	r23, r0
 338:	81 1d       	adc	r24, r1
 33a:	11 24       	eor	r1, r1
 33c:	91 1d       	adc	r25, r1
 33e:	b2 9f       	mul	r27, r18
 340:	70 0d       	add	r23, r0
 342:	81 1d       	adc	r24, r1
 344:	11 24       	eor	r1, r1
 346:	91 1d       	adc	r25, r1
 348:	08 95       	ret

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
