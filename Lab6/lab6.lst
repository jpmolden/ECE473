
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000154  00800100  00001fc4  00002058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000141  00800254  00800254  000021ac  2**0
                  ALLOC
  3 .stab         000050a0  00000000  00000000  000021ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cc8  00000000  00000000  0000724c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008f14  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008f28  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__vector_8>
      24:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__vector_9>
      28:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__vector_10>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_18>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	d8 0a       	sbc	r13, r24
      8e:	af 0a       	sbc	r10, r31
      90:	af 0a       	sbc	r10, r31
      92:	af 0a       	sbc	r10, r31
      94:	af 0a       	sbc	r10, r31
      96:	af 0a       	sbc	r10, r31
      98:	af 0a       	sbc	r10, r31
      9a:	af 0a       	sbc	r10, r31
      9c:	d8 0a       	sbc	r13, r24
      9e:	af 0a       	sbc	r10, r31
      a0:	af 0a       	sbc	r10, r31
      a2:	af 0a       	sbc	r10, r31
      a4:	af 0a       	sbc	r10, r31
      a6:	af 0a       	sbc	r10, r31
      a8:	af 0a       	sbc	r10, r31
      aa:	af 0a       	sbc	r10, r31
      ac:	e2 0a       	sbc	r14, r18
      ae:	af 0a       	sbc	r10, r31
      b0:	af 0a       	sbc	r10, r31
      b2:	af 0a       	sbc	r10, r31
      b4:	af 0a       	sbc	r10, r31
      b6:	af 0a       	sbc	r10, r31
      b8:	af 0a       	sbc	r10, r31
      ba:	af 0a       	sbc	r10, r31
      bc:	af 0a       	sbc	r10, r31
      be:	af 0a       	sbc	r10, r31
      c0:	af 0a       	sbc	r10, r31
      c2:	af 0a       	sbc	r10, r31
      c4:	af 0a       	sbc	r10, r31
      c6:	af 0a       	sbc	r10, r31
      c8:	af 0a       	sbc	r10, r31
      ca:	af 0a       	sbc	r10, r31
      cc:	e2 0a       	sbc	r14, r18
      ce:	af 0a       	sbc	r10, r31
      d0:	af 0a       	sbc	r10, r31
      d2:	af 0a       	sbc	r10, r31
      d4:	af 0a       	sbc	r10, r31
      d6:	af 0a       	sbc	r10, r31
      d8:	af 0a       	sbc	r10, r31
      da:	af 0a       	sbc	r10, r31
      dc:	af 0a       	sbc	r10, r31
      de:	af 0a       	sbc	r10, r31
      e0:	af 0a       	sbc	r10, r31
      e2:	af 0a       	sbc	r10, r31
      e4:	af 0a       	sbc	r10, r31
      e6:	af 0a       	sbc	r10, r31
      e8:	af 0a       	sbc	r10, r31
      ea:	af 0a       	sbc	r10, r31
      ec:	f9 0a       	sbc	r15, r25
      ee:	af 0a       	sbc	r10, r31
      f0:	af 0a       	sbc	r10, r31
      f2:	af 0a       	sbc	r10, r31
      f4:	af 0a       	sbc	r10, r31
      f6:	af 0a       	sbc	r10, r31
      f8:	af 0a       	sbc	r10, r31
      fa:	af 0a       	sbc	r10, r31
      fc:	fd 0a       	sbc	r15, r29
      fe:	af 0a       	sbc	r10, r31
     100:	af 0a       	sbc	r10, r31
     102:	af 0a       	sbc	r10, r31
     104:	af 0a       	sbc	r10, r31
     106:	af 0a       	sbc	r10, r31
     108:	af 0a       	sbc	r10, r31
     10a:	af 0a       	sbc	r10, r31
     10c:	af 0a       	sbc	r10, r31
     10e:	af 0a       	sbc	r10, r31
     110:	af 0a       	sbc	r10, r31
     112:	af 0a       	sbc	r10, r31
     114:	af 0a       	sbc	r10, r31
     116:	af 0a       	sbc	r10, r31
     118:	af 0a       	sbc	r10, r31
     11a:	af 0a       	sbc	r10, r31
     11c:	0b 0b       	sbc	r16, r27
     11e:	af 0a       	sbc	r10, r31
     120:	af 0a       	sbc	r10, r31
     122:	af 0a       	sbc	r10, r31
     124:	af 0a       	sbc	r10, r31
     126:	af 0a       	sbc	r10, r31
     128:	af 0a       	sbc	r10, r31
     12a:	af 0a       	sbc	r10, r31
     12c:	c9 0a       	sbc	r12, r25

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e4 ec       	ldi	r30, 0xC4	; 196
     142:	ff e1       	ldi	r31, 0x1F	; 31
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a4 35       	cpi	r26, 0x54	; 84
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e0       	ldi	r18, 0x03	; 3
     156:	a4 e5       	ldi	r26, 0x54	; 84
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a5 39       	cpi	r26, 0x95	; 149
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <main>
     168:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <spi_init>:

//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(){
  DDRB   = 0xF7; //output mode for SS, MOSI, SCLK & Pins 4-7 (7Seg & Bar Graph)
     170:	87 ef       	ldi	r24, 0xF7	; 247
     172:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); // Enable SPI, master mode, clk low on idle, leading edge sample
     174:	80 e5       	ldi	r24, 0x50	; 80
     176:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (0<<SPI2X); //No double speed operation
     178:	1e b8       	out	0x0e, r1	; 14
     17a:	08 95       	ret

0000017c <init_tcnt0>:
// Triggers a 1 sec TOV Interrupt.
//
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
     17c:	80 b7       	in	r24, 0x30	; 48
     17e:	88 60       	ori	r24, 0x08	; 8
     180:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE0);  //TimerOverflow Interrupt Enable
     182:	87 b7       	in	r24, 0x37	; 55
     184:	81 60       	ori	r24, 0x01	; 1
     186:	87 bf       	out	0x37, r24	; 55
  TCCR0 =  (1<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode, 128 prescale, OC0 Disconnected
     188:	85 e0       	ldi	r24, 0x05	; 5
     18a:	83 bf       	out	0x33, r24	; 51
     18c:	08 95       	ret

0000018e <init_tcnt1>:
//
// setup TCNT1 in pwm mode
// set OC1A (PB5) as pwm output
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);
     18e:	8f b5       	in	r24, 0x2f	; 47
     190:	82 60       	ori	r24, 0x02	; 2
     192:	8f bd       	out	0x2f, r24	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10);
     194:	8e b5       	in	r24, 0x2e	; 46
     196:	89 61       	ori	r24, 0x19	; 25
     198:	8e bd       	out	0x2e, r24	; 46
	//no forced compare
	TCCR1C = 0x00;
     19a:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 ec       	ldi	r25, 0xC0	; 192
     1a2:	9b bd       	out	0x2b, r25	; 43
     1a4:	8a bd       	out	0x2a, r24	; 42
	ICR1  = 0xF000; //clear at 0xF000
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 ef       	ldi	r25, 0xF0	; 240
     1aa:	97 bd       	out	0x27, r25	; 39
     1ac:	86 bd       	out	0x26, r24	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
     1ae:	87 b7       	in	r24, 0x37	; 55
     1b0:	80 61       	ori	r24, 0x10	; 16
     1b2:	87 bf       	out	0x37, r24	; 55
     1b4:	08 95       	ret

000001b6 <init_tcnt2>:
//**********************************************************************
void init_tcnt2(){
// 7-Seg Brigtness PWM

  //enable interrupts for Timer/Counter2 overflow
  TIMSK |= (1<<TOIE2) | (0<<OCIE2);  //TimerOverflow Interrupt Enable
     1b6:	87 b7       	in	r24, 0x37	; 55
     1b8:	80 64       	ori	r24, 0x40	; 64
     1ba:	87 bf       	out	0x37, r24	; 55
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (1<<CS21) | (1<<CS20);
     1bc:	8b e7       	ldi	r24, 0x7B	; 123
     1be:	85 bd       	out	0x25, r24	; 37
	//Fast-PWM mode, Inverting PWM Mode, 64 prescale, OC2(PB7)(PWM) Connected
	//0-256 takes 1ms (16k CLKIO cycles)
  OCR2 =  0xF0;                   //compare at 128(50%)
     1c0:	80 ef       	ldi	r24, 0xF0	; 240
     1c2:	83 bd       	out	0x23, r24	; 35
     1c4:	08 95       	ret

000001c6 <init_tcnt3>:
//                            timer/counter3_init
//**********************************************************************
void init_tcnt3(){
// Volume PWM
// setup TCNT3 in pwm mode
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0) | (0<<WGM31) | (1<<WGM30);
     1c6:	eb e8       	ldi	r30, 0x8B	; 139
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	81 68       	ori	r24, 0x81	; 129
     1ce:	80 83       	st	Z, r24
	// Fast PWM, 8-Bit mode top 0x00FF
	// Clear OC3A on compare match, Fast PWM (non-inverting)
	//use ICR1 as source for TOP, use clk/1
	TCCR3B |= (0<<WGM33) | (1<< WGM32) | (1<<CS30);
     1d0:	ea e8       	ldi	r30, 0x8A	; 138
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	89 60       	ori	r24, 0x09	; 9
     1d8:	80 83       	st	Z, r24
	// No prescaling
	//no forced compare
	TCCR3C = 0x00;
     1da:	10 92 8c 00 	sts	0x008C, r1
	//20% duty cycle, LED is a bit dimmer
	OCR3A = 0x00CD; // Initally at 50% Duty Cycle
     1de:	8d ec       	ldi	r24, 0xCD	; 205
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	90 93 87 00 	sts	0x0087, r25
     1e6:	80 93 86 00 	sts	0x0086, r24
     1ea:	08 95       	ret

000001ec <init_DDRs>:
//                            timer/counter0_init
//**********************************************************************
void init_DDRs(){
// Add HERE
	// Set the DDR for Ports
	DDRA = DDRA_OUTPUT; // 7-Seg Data out
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	8a bb       	out	0x1a, r24	; 26
	DDRE = (1<<PE3) | (1<<PE5) | (1<<PE6) | (1<<PE7);
     1f0:	88 ee       	ldi	r24, 0xE8	; 232
     1f2:	82 b9       	out	0x02, r24	; 2
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
     1f4:	84 e0       	ldi	r24, 0x04	; 4
     1f6:	81 bb       	out	0x11, r24	; 17
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	84 bb       	out	0x14, r24	; 20
	incdec_mode = 0x01;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 59 02 	sts	0x0259, r24
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
     202:	85 e5       	ldi	r24, 0x55	; 85
     204:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
     206:	77 9b       	sbis	0x0e, 7	; 14
     208:	fe cf       	rjmp	.-4      	; 0x206 <init_DDRs+0x1a>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
     20a:	8f b1       	in	r24, 0x0f	; 15
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
	incdec_mode = 0x01;
	// Read the starting encoder positions
	old_encoder = spi_rw8(0x55);
     20c:	80 93 56 02 	sts	0x0256, r24
     210:	08 95       	ret

00000212 <init_ADC>:
//                            init_adc
//**********************************************************************
void init_ADC(){
// ADC used to read brightness levels using a photoresistor
	//Initalize ADC and its ports
	DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input
     212:	e1 e6       	ldi	r30, 0x61	; 97
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	8f 77       	andi	r24, 0x7F	; 127
     21a:	80 83       	st	Z, r24
	PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
     21c:	e2 e6       	ldi	r30, 0x62	; 98
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	8f 77       	andi	r24, 0x7F	; 127
     224:	80 83       	st	Z, r24

	ADMUX = (1<<ADLAR) | (1<<REFS0) | (1<<MUX0) | (1<<MUX1) | (1<<MUX2);
     226:	87 e6       	ldi	r24, 0x67	; 103
     228:	87 b9       	out	0x07, r24	; 7
	//ADMUX = (1<<MUX0) | (1<<MUX1) | (1<<MUX2)
	//single-ended, input PORTF bit 7, right adjusted, 10 bits

	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     22a:	87 e8       	ldi	r24, 0x87	; 135
     22c:	86 b9       	out	0x06, r24	; 6
     22e:	08 95       	ret

00000230 <disable_tcnt1>:
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
     230:	88 e1       	ldi	r24, 0x18	; 24
     232:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
     234:	87 b7       	in	r24, 0x37	; 55
     236:	8f 7e       	andi	r24, 0xEF	; 239
     238:	87 bf       	out	0x37, r24	; 55
     23a:	08 95       	ret

0000023c <disable_timer2>:
// Add HERE
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  //enable interrupts for output compare match 0
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (0<<CS21) | (0<<CS20);
     23c:	88 e7       	ldi	r24, 0x78	; 120
     23e:	85 bd       	out	0x25, r24	; 37
     240:	08 95       	ret

00000242 <spi_rw8>:
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
     242:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
     244:	77 9b       	sbis	0x0e, 7	; 14
     246:	fe cf       	rjmp	.-4      	; 0x244 <spi_rw8+0x2>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
     248:	8f b1       	in	r24, 0x0f	; 15
	return(data);
}
     24a:	08 95       	ret

0000024c <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
     24c:	48 2f       	mov	r20, r24
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     24e:	e8 2f       	mov	r30, r24
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	99 b3       	in	r25, 0x19	; 25
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	e5 5a       	subi	r30, 0xA5	; 165
     25a:	fd 4f       	sbci	r31, 0xFD	; 253
     25c:	20 81       	ld	r18, Z
     25e:	31 81       	ldd	r19, Z+1	; 0x01
     260:	22 0f       	add	r18, r18
     262:	33 1f       	adc	r19, r19
     264:	30 6e       	ori	r19, 0xE0	; 224
     266:	89 2f       	mov	r24, r25
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <chk_buttons+0x24>
     26c:	95 95       	asr	r25
     26e:	87 95       	ror	r24
     270:	4a 95       	dec	r20
     272:	e2 f7       	brpl	.-8      	; 0x26c <chk_buttons+0x20>
     274:	81 70       	andi	r24, 0x01	; 1
     276:	99 27       	eor	r25, r25
     278:	28 2b       	or	r18, r24
     27a:	39 2b       	or	r19, r25
     27c:	31 83       	std	Z+1, r19	; 0x01
     27e:	20 83       	st	Z, r18
        if(state[button] == 0xF000) return 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	21 15       	cp	r18, r1
     284:	30 4f       	sbci	r19, 0xF0	; 240
     286:	09 f0       	breq	.+2      	; 0x28a <chk_buttons+0x3e>
     288:	80 e0       	ldi	r24, 0x00	; 0
        return 0;

//******************************************************************************
}
     28a:	08 95       	ret

0000028c <volume_up>:


//***********************************************************************
//                            volume_up
//**********************************************************************
void volume_up(){
     28c:	08 95       	ret

0000028e <volume_down>:


//***********************************************************************
//                            volume_down
//**********************************************************************
void volume_down(){
     28e:	08 95       	ret

00000290 <segsum>:
        //if(sum >= 1)(no_digits = 1);
        //if(sum >= 10)(no_digits = 2);
        //if(sum >= 100)(no_digits = 3);
        //if(sum >= 1000)(no_digits = 4);

	switch(xmode){
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	09 f4       	brne	.+2      	; 0x296 <segsum+0x6>
     294:	4e c0       	rjmp	.+156    	; 0x332 <segsum+0xa2>
     296:	08 f4       	brcc	.+2      	; 0x29a <segsum+0xa>
     298:	ac c0       	rjmp	.+344    	; 0x3f2 <segsum+0x162>
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	19 f0       	breq	.+6      	; 0x2a4 <segsum+0x14>
     29e:	83 30       	cpi	r24, 0x03	; 3
     2a0:	c1 f1       	breq	.+112    	; 0x312 <segsum+0x82>
     2a2:	08 95       	ret
			// Alarm armed bit into same position as L3 on 7Seg
			segment_data[3] = dec_to_7seg[((alarm_hours)/1) %10];
			segment_data[4] = dec_to_7seg[((alarm_hours)/10) %10];
			break;
		case Clock_set_mode:
			if((seconds % 2) == 1){
     2a4:	80 91 0e 01 	lds	r24, 0x010E
     2a8:	80 ff       	sbrs	r24, 0
     2aa:	37 c0       	rjmp	.+110    	; 0x31a <segsum+0x8a>
				segment_data[0] = dec_to_7seg[(mins/1) %10];
     2ac:	e0 91 0f 01 	lds	r30, 0x010F
     2b0:	8d ec       	ldi	r24, 0xCD	; 205
     2b2:	e8 9f       	mul	r30, r24
     2b4:	91 2d       	mov	r25, r1
     2b6:	11 24       	eor	r1, r1
     2b8:	96 95       	lsr	r25
     2ba:	96 95       	lsr	r25
     2bc:	96 95       	lsr	r25
     2be:	2a e0       	ldi	r18, 0x0A	; 10
     2c0:	92 9f       	mul	r25, r18
     2c2:	e0 19       	sub	r30, r0
     2c4:	11 24       	eor	r1, r1
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	e5 5b       	subi	r30, 0xB5	; 181
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	90 81       	ld	r25, Z
     2ce:	90 93 a6 02 	sts	0x02A6, r25
				segment_data[1] = dec_to_7seg[(mins/10) %10];
     2d2:	e0 91 0f 01 	lds	r30, 0x010F
     2d6:	e8 9f       	mul	r30, r24
     2d8:	e1 2d       	mov	r30, r1
     2da:	11 24       	eor	r1, r1
     2dc:	e6 95       	lsr	r30
     2de:	e6 95       	lsr	r30
     2e0:	e6 95       	lsr	r30
     2e2:	e8 9f       	mul	r30, r24
     2e4:	91 2d       	mov	r25, r1
     2e6:	11 24       	eor	r1, r1
     2e8:	96 95       	lsr	r25
     2ea:	96 95       	lsr	r25
     2ec:	96 95       	lsr	r25
     2ee:	2a e0       	ldi	r18, 0x0A	; 10
     2f0:	92 9f       	mul	r25, r18
     2f2:	e0 19       	sub	r30, r0
     2f4:	11 24       	eor	r1, r1
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	e5 5b       	subi	r30, 0xB5	; 181
     2fa:	fe 4f       	sbci	r31, 0xFE	; 254
     2fc:	90 81       	ld	r25, Z
     2fe:	90 93 a7 02 	sts	0x02A7, r25
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
     302:	90 91 11 01 	lds	r25, 0x0111
     306:	99 0f       	add	r25, r25
     308:	99 0f       	add	r25, r25
     30a:	90 95       	com	r25
     30c:	20 91 56 01 	lds	r18, 0x0156
     310:	a9 c0       	rjmp	.+338    	; 0x464 <segsum+0x1d4>
				segment_data[3] = SEG_OFF;
				segment_data[4] = SEG_OFF;
			break;
			}
		case Alarm_set_mode:
			if((seconds % 2) == 1){
     312:	80 91 0e 01 	lds	r24, 0x010E
     316:	80 fd       	sbrc	r24, 0
     318:	0c c0       	rjmp	.+24     	; 0x332 <segsum+0xa2>
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((hours)/1) %10];
				segment_data[4] = dec_to_7seg[((hours)/10) %10];
				break;
			}else{
				segment_data[0] = SEG_OFF;
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	80 93 a6 02 	sts	0x02A6, r24
				segment_data[1] = SEG_OFF;
     320:	80 93 a7 02 	sts	0x02A7, r24
				segment_data[2] = SEG_OFF;
     324:	80 93 a8 02 	sts	0x02A8, r24
				segment_data[3] = SEG_OFF;
     328:	80 93 a9 02 	sts	0x02A9, r24
				segment_data[4] = SEG_OFF;
     32c:	80 93 aa 02 	sts	0x02AA, r24
			break;
     330:	08 95       	ret
			}
		case Alarm_set_mode:
			if((seconds % 2) == 1){
				segment_data[0] = dec_to_7seg[(alarm_mins/1) %10];
     332:	e0 91 0c 01 	lds	r30, 0x010C
     336:	8d ec       	ldi	r24, 0xCD	; 205
     338:	e8 9f       	mul	r30, r24
     33a:	91 2d       	mov	r25, r1
     33c:	11 24       	eor	r1, r1
     33e:	96 95       	lsr	r25
     340:	96 95       	lsr	r25
     342:	96 95       	lsr	r25
     344:	2a e0       	ldi	r18, 0x0A	; 10
     346:	92 9f       	mul	r25, r18
     348:	e0 19       	sub	r30, r0
     34a:	11 24       	eor	r1, r1
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	e5 5b       	subi	r30, 0xB5	; 181
     350:	fe 4f       	sbci	r31, 0xFE	; 254
     352:	90 81       	ld	r25, Z
     354:	90 93 a6 02 	sts	0x02A6, r25
				segment_data[1] = dec_to_7seg[(alarm_mins/10) %10];
     358:	e0 91 0c 01 	lds	r30, 0x010C
     35c:	e8 9f       	mul	r30, r24
     35e:	e1 2d       	mov	r30, r1
     360:	11 24       	eor	r1, r1
     362:	e6 95       	lsr	r30
     364:	e6 95       	lsr	r30
     366:	e6 95       	lsr	r30
     368:	e8 9f       	mul	r30, r24
     36a:	91 2d       	mov	r25, r1
     36c:	11 24       	eor	r1, r1
     36e:	96 95       	lsr	r25
     370:	96 95       	lsr	r25
     372:	96 95       	lsr	r25
     374:	2a e0       	ldi	r18, 0x0A	; 10
     376:	92 9f       	mul	r25, r18
     378:	e0 19       	sub	r30, r0
     37a:	11 24       	eor	r1, r1
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	e5 5b       	subi	r30, 0xB5	; 181
     380:	fe 4f       	sbci	r31, 0xFE	; 254
     382:	90 81       	ld	r25, Z
     384:	90 93 a7 02 	sts	0x02A7, r25
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
     388:	90 91 11 01 	lds	r25, 0x0111
     38c:	99 0f       	add	r25, r25
     38e:	99 0f       	add	r25, r25
     390:	90 95       	com	r25
     392:	20 91 56 01 	lds	r18, 0x0156
     396:	92 23       	and	r25, r18
     398:	90 93 a8 02 	sts	0x02A8, r25
				//in dec_to_7seg index 11 = OFF, index 12 = Colon
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((alarm_hours)/1) %10];
     39c:	e0 91 0d 01 	lds	r30, 0x010D
     3a0:	e8 9f       	mul	r30, r24
     3a2:	91 2d       	mov	r25, r1
     3a4:	11 24       	eor	r1, r1
     3a6:	96 95       	lsr	r25
     3a8:	96 95       	lsr	r25
     3aa:	96 95       	lsr	r25
     3ac:	2a e0       	ldi	r18, 0x0A	; 10
     3ae:	92 9f       	mul	r25, r18
     3b0:	e0 19       	sub	r30, r0
     3b2:	11 24       	eor	r1, r1
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	e5 5b       	subi	r30, 0xB5	; 181
     3b8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ba:	90 81       	ld	r25, Z
     3bc:	90 93 a9 02 	sts	0x02A9, r25
				segment_data[4] = dec_to_7seg[((alarm_hours)/10) %10];
     3c0:	e0 91 0d 01 	lds	r30, 0x010D
     3c4:	e8 9f       	mul	r30, r24
     3c6:	e1 2d       	mov	r30, r1
     3c8:	11 24       	eor	r1, r1
     3ca:	e6 95       	lsr	r30
     3cc:	e6 95       	lsr	r30
     3ce:	e6 95       	lsr	r30
     3d0:	e8 9f       	mul	r30, r24
     3d2:	81 2d       	mov	r24, r1
     3d4:	11 24       	eor	r1, r1
     3d6:	86 95       	lsr	r24
     3d8:	86 95       	lsr	r24
     3da:	86 95       	lsr	r24
     3dc:	9a e0       	ldi	r25, 0x0A	; 10
     3de:	89 9f       	mul	r24, r25
     3e0:	e0 19       	sub	r30, r0
     3e2:	11 24       	eor	r1, r1
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	e5 5b       	subi	r30, 0xB5	; 181
     3e8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ea:	80 81       	ld	r24, Z
     3ec:	80 93 aa 02 	sts	0x02AA, r24
     3f0:	08 95       	ret

	switch(xmode){
		case Clock_mode:
		  	//break up decimal sum into 4 digit-segment
			//The digits (0-9) are used as the index for the seven segment representation
			segment_data[0] = dec_to_7seg[(mins/1) %10];
     3f2:	e0 91 0f 01 	lds	r30, 0x010F
     3f6:	8d ec       	ldi	r24, 0xCD	; 205
     3f8:	e8 9f       	mul	r30, r24
     3fa:	91 2d       	mov	r25, r1
     3fc:	11 24       	eor	r1, r1
     3fe:	96 95       	lsr	r25
     400:	96 95       	lsr	r25
     402:	96 95       	lsr	r25
     404:	2a e0       	ldi	r18, 0x0A	; 10
     406:	92 9f       	mul	r25, r18
     408:	e0 19       	sub	r30, r0
     40a:	11 24       	eor	r1, r1
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	e5 5b       	subi	r30, 0xB5	; 181
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	90 81       	ld	r25, Z
     414:	90 93 a6 02 	sts	0x02A6, r25
			segment_data[1] = dec_to_7seg[(mins/10) %10];
     418:	e0 91 0f 01 	lds	r30, 0x010F
     41c:	e8 9f       	mul	r30, r24
     41e:	e1 2d       	mov	r30, r1
     420:	11 24       	eor	r1, r1
     422:	e6 95       	lsr	r30
     424:	e6 95       	lsr	r30
     426:	e6 95       	lsr	r30
     428:	e8 9f       	mul	r30, r24
     42a:	91 2d       	mov	r25, r1
     42c:	11 24       	eor	r1, r1
     42e:	96 95       	lsr	r25
     430:	96 95       	lsr	r25
     432:	96 95       	lsr	r25
     434:	2a e0       	ldi	r18, 0x0A	; 10
     436:	92 9f       	mul	r25, r18
     438:	e0 19       	sub	r30, r0
     43a:	11 24       	eor	r1, r1
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	e5 5b       	subi	r30, 0xB5	; 181
     440:	fe 4f       	sbci	r31, 0xFE	; 254
     442:	90 81       	ld	r25, Z
     444:	90 93 a7 02 	sts	0x02A7, r25
			if((xmode == Clock_mode)){
				segment_data[2] = dec_to_7seg[10 + (seconds % 2)] & (~(alarm_armed<<2));
     448:	40 91 0e 01 	lds	r20, 0x010E
     44c:	90 91 11 01 	lds	r25, 0x0111
     450:	24 2f       	mov	r18, r20
     452:	21 70       	andi	r18, 0x01	; 1
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	f9 01       	movw	r30, r18
     458:	e5 5b       	subi	r30, 0xB5	; 181
     45a:	fe 4f       	sbci	r31, 0xFE	; 254
     45c:	99 0f       	add	r25, r25
     45e:	99 0f       	add	r25, r25
     460:	90 95       	com	r25
     462:	22 85       	ldd	r18, Z+10	; 0x0a
			break;
		case Clock_set_mode:
			if((seconds % 2) == 1){
				segment_data[0] = dec_to_7seg[(mins/1) %10];
				segment_data[1] = dec_to_7seg[(mins/10) %10];
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
     464:	92 23       	and	r25, r18
     466:	90 93 a8 02 	sts	0x02A8, r25
				//in dec_to_7seg index 11 = OFF, index 12 = Colon
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((hours)/1) %10];
     46a:	e0 91 10 01 	lds	r30, 0x0110
     46e:	e8 9f       	mul	r30, r24
     470:	91 2d       	mov	r25, r1
     472:	11 24       	eor	r1, r1
     474:	96 95       	lsr	r25
     476:	96 95       	lsr	r25
     478:	96 95       	lsr	r25
     47a:	2a e0       	ldi	r18, 0x0A	; 10
     47c:	92 9f       	mul	r25, r18
     47e:	e0 19       	sub	r30, r0
     480:	11 24       	eor	r1, r1
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	e5 5b       	subi	r30, 0xB5	; 181
     486:	fe 4f       	sbci	r31, 0xFE	; 254
     488:	90 81       	ld	r25, Z
     48a:	90 93 a9 02 	sts	0x02A9, r25
				segment_data[4] = dec_to_7seg[((hours)/10) %10];
     48e:	e0 91 10 01 	lds	r30, 0x0110
     492:	98 cf       	rjmp	.-208    	; 0x3c4 <segsum+0x134>

00000494 <encoders>:


//***********************************************************************
//                            encoder
//**********************************************************************
void encoders(){
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
	// The direction is determined by a state machine look up table 0=no change
	// 1=CCW, 2=CW
	//The old encoder value is place in posistion in b2 b3, 0x03 masks out other 1's

	uint8_t direction = 0;
	switch(clockmode){
     498:	80 91 58 02 	lds	r24, 0x0258
     49c:	82 30       	cpi	r24, 0x02	; 2
     49e:	09 f4       	brne	.+2      	; 0x4a2 <encoders+0xe>
     4a0:	66 c0       	rjmp	.+204    	; 0x56e <encoders+0xda>
     4a2:	83 30       	cpi	r24, 0x03	; 3
     4a4:	49 f1       	breq	.+82     	; 0x4f8 <encoders+0x64>
     4a6:	88 23       	and	r24, r24
     4a8:	39 f0       	breq	.+14     	; 0x4b8 <encoders+0x24>
			break;
		default:
			break;
	}
	//Replace the old encoder value
	old_encoder = encoder;
     4aa:	80 91 57 02 	lds	r24, 0x0257
     4ae:	80 93 56 02 	sts	0x0256, r24
}// End encoders
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret
	uint8_t direction = 0;
	switch(clockmode){
		case Clock_mode:
					// Do Nothing
					//Check encoder 1
					direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
     4b8:	e0 91 56 02 	lds	r30, 0x0256
     4bc:	80 91 57 02 	lds	r24, 0x0257
     4c0:	e3 70       	andi	r30, 0x03	; 3
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	ee 0f       	add	r30, r30
     4c6:	ff 1f       	adc	r31, r31
     4c8:	ee 0f       	add	r30, r30
     4ca:	ff 1f       	adc	r31, r31
     4cc:	83 70       	andi	r24, 0x03	; 3
     4ce:	e8 2b       	or	r30, r24
     4d0:	ee 5c       	subi	r30, 0xCE	; 206
     4d2:	fe 4f       	sbci	r31, 0xFE	; 254
					switch(direction){
     4d4:	80 81       	ld	r24, Z
     4d6:	81 30       	cpi	r24, 0x01	; 1
     4d8:	09 f4       	brne	.+2      	; 0x4dc <encoders+0x48>
     4da:	9c c0       	rjmp	.+312    	; 0x614 <encoders+0x180>
     4dc:	82 30       	cpi	r24, 0x02	; 2
     4de:	09 f0       	breq	.+2      	; 0x4e2 <encoders+0x4e>
     4e0:	63 c0       	rjmp	.+198    	; 0x5a8 <encoders+0x114>
								lcd_string_array[7] = digits[(current_fm_freq/1000) %10];
								lcd_string_array[6] = digits[(current_fm_freq/10000) %10];
							}
							break;
						case 2:
							if(current_fm_freq < 10790){
     4e2:	80 91 a0 02 	lds	r24, 0x02A0
     4e6:	90 91 a1 02 	lds	r25, 0x02A1
     4ea:	86 32       	cpi	r24, 0x26	; 38
     4ec:	2a e2       	ldi	r18, 0x2A	; 42
     4ee:	92 07       	cpc	r25, r18
     4f0:	08 f0       	brcs	.+2      	; 0x4f4 <encoders+0x60>
     4f2:	15 c2       	rjmp	.+1066   	; 0x91e <encoders+0x48a>
								current_fm_freq = current_fm_freq + 20;
     4f4:	44 96       	adiw	r24, 0x14	; 20
     4f6:	98 c0       	rjmp	.+304    	; 0x628 <encoders+0x194>
					break;
			}
			break;
		case Alarm_set_mode:
			//Check encoder 1
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
     4f8:	e0 91 56 02 	lds	r30, 0x0256
     4fc:	80 91 57 02 	lds	r24, 0x0257
     500:	e3 70       	andi	r30, 0x03	; 3
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	ee 0f       	add	r30, r30
     506:	ff 1f       	adc	r31, r31
     508:	ee 0f       	add	r30, r30
     50a:	ff 1f       	adc	r31, r31
     50c:	83 70       	andi	r24, 0x03	; 3
     50e:	e8 2b       	or	r30, r24
     510:	ee 5c       	subi	r30, 0xCE	; 206
     512:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     514:	80 81       	ld	r24, Z
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	09 f4       	brne	.+2      	; 0x51c <encoders+0x88>
     51a:	71 c0       	rjmp	.+226    	; 0x5fe <encoders+0x16a>
     51c:	82 30       	cpi	r24, 0x02	; 2
     51e:	51 f4       	brne	.+20     	; 0x534 <encoders+0xa0>
					}else{
						alarm_mins = 59;
					}
					break;
				case 2:
					if(alarm_mins < 59){
     520:	80 91 0c 01 	lds	r24, 0x010C
     524:	8b 33       	cpi	r24, 0x3B	; 59
     526:	08 f0       	brcs	.+2      	; 0x52a <encoders+0x96>
     528:	fd c1       	rjmp	.+1018   	; 0x924 <encoders+0x490>
						alarm_mins = alarm_mins + 1;
     52a:	80 91 0c 01 	lds	r24, 0x010C
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	80 93 0c 01 	sts	0x010C, r24
				default:
					break;
			}

			//Check encoder 2
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
     534:	80 91 56 02 	lds	r24, 0x0256
     538:	e0 91 57 02 	lds	r30, 0x0257
     53c:	ec 70       	andi	r30, 0x0C	; 12
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	f5 95       	asr	r31
     542:	e7 95       	ror	r30
     544:	f5 95       	asr	r31
     546:	e7 95       	ror	r30
     548:	8c 70       	andi	r24, 0x0C	; 12
     54a:	e8 2b       	or	r30, r24
     54c:	ee 5c       	subi	r30, 0xCE	; 206
     54e:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     550:	80 81       	ld	r24, Z
     552:	81 30       	cpi	r24, 0x01	; 1
     554:	09 f4       	brne	.+2      	; 0x558 <encoders+0xc4>
     556:	07 c1       	rjmp	.+526    	; 0x766 <encoders+0x2d2>
     558:	82 30       	cpi	r24, 0x02	; 2
     55a:	09 f0       	breq	.+2      	; 0x55e <encoders+0xca>
     55c:	a6 cf       	rjmp	.-180    	; 0x4aa <encoders+0x16>
					}else{
						alarm_hours = 23;
					}
					break;
				case 2:
					if(alarm_hours < 23){
     55e:	80 91 0d 01 	lds	r24, 0x010D
     562:	87 31       	cpi	r24, 0x17	; 23
     564:	08 f4       	brcc	.+2      	; 0x568 <encoders+0xd4>
     566:	e4 c1       	rjmp	.+968    	; 0x930 <encoders+0x49c>
						alarm_hours = alarm_hours + 1;
					}else{
						alarm_hours = 0;
     568:	10 92 0d 01 	sts	0x010D, r1
     56c:	9e cf       	rjmp	.-196    	; 0x4aa <encoders+0x16>
		case Alarm_mode:
			// Do Nothing
			break;
		case Clock_set_mode:
			//Check encoder 1
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
     56e:	e0 91 56 02 	lds	r30, 0x0256
     572:	80 91 57 02 	lds	r24, 0x0257
     576:	e3 70       	andi	r30, 0x03	; 3
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	ee 0f       	add	r30, r30
     57c:	ff 1f       	adc	r31, r31
     57e:	ee 0f       	add	r30, r30
     580:	ff 1f       	adc	r31, r31
     582:	83 70       	andi	r24, 0x03	; 3
     584:	e8 2b       	or	r30, r24
     586:	ee 5c       	subi	r30, 0xCE	; 206
     588:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     58a:	80 81       	ld	r24, Z
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	61 f1       	breq	.+88     	; 0x5e8 <encoders+0x154>
     590:	82 30       	cpi	r24, 0x02	; 2
     592:	51 f4       	brne	.+20     	; 0x5a8 <encoders+0x114>
					}else{
						mins = 59;
					}
					break;
				case 2:
					if(mins < 59){
     594:	80 91 0f 01 	lds	r24, 0x010F
     598:	8b 33       	cpi	r24, 0x3B	; 59
     59a:	08 f0       	brcs	.+2      	; 0x59e <encoders+0x10a>
     59c:	c6 c1       	rjmp	.+908    	; 0x92a <encoders+0x496>
						mins = mins + 1;
     59e:	80 91 0f 01 	lds	r24, 0x010F
     5a2:	8f 5f       	subi	r24, 0xFF	; 255
     5a4:	80 93 0f 01 	sts	0x010F, r24
					break;
			}


			//Check encoder 2
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
     5a8:	80 91 56 02 	lds	r24, 0x0256
     5ac:	e0 91 57 02 	lds	r30, 0x0257
     5b0:	ec 70       	andi	r30, 0x0C	; 12
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	f5 95       	asr	r31
     5b6:	e7 95       	ror	r30
     5b8:	f5 95       	asr	r31
     5ba:	e7 95       	ror	r30
     5bc:	8c 70       	andi	r24, 0x0C	; 12
     5be:	e8 2b       	or	r30, r24
     5c0:	ee 5c       	subi	r30, 0xCE	; 206
     5c2:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     5c4:	80 81       	ld	r24, Z
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	09 f4       	brne	.+2      	; 0x5cc <encoders+0x138>
     5ca:	bc c0       	rjmp	.+376    	; 0x744 <encoders+0x2b0>
     5cc:	82 30       	cpi	r24, 0x02	; 2
     5ce:	09 f0       	breq	.+2      	; 0x5d2 <encoders+0x13e>
     5d0:	6c cf       	rjmp	.-296    	; 0x4aa <encoders+0x16>
					}else{
						hours = 23;
					}
					break;
				case 2:
					if(hours < 23){
     5d2:	80 91 10 01 	lds	r24, 0x0110
     5d6:	87 31       	cpi	r24, 0x17	; 23
     5d8:	08 f0       	brcs	.+2      	; 0x5dc <encoders+0x148>
     5da:	be c0       	rjmp	.+380    	; 0x758 <encoders+0x2c4>
						hours = hours + 1;
     5dc:	80 91 10 01 	lds	r24, 0x0110
     5e0:	8f 5f       	subi	r24, 0xFF	; 255
     5e2:	80 93 10 01 	sts	0x0110, r24
     5e6:	61 cf       	rjmp	.-318    	; 0x4aa <encoders+0x16>
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(mins > 0){
     5e8:	80 91 0f 01 	lds	r24, 0x010F
     5ec:	88 23       	and	r24, r24
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <encoders+0x15e>
     5f0:	92 c1       	rjmp	.+804    	; 0x916 <encoders+0x482>
						mins = mins - 1;
     5f2:	80 91 0f 01 	lds	r24, 0x010F
     5f6:	81 50       	subi	r24, 0x01	; 1
     5f8:	80 93 0f 01 	sts	0x010F, r24
     5fc:	d5 cf       	rjmp	.-86     	; 0x5a8 <encoders+0x114>
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(alarm_mins > 0){
     5fe:	80 91 0c 01 	lds	r24, 0x010C
     602:	88 23       	and	r24, r24
     604:	09 f4       	brne	.+2      	; 0x608 <encoders+0x174>
     606:	83 c1       	rjmp	.+774    	; 0x90e <encoders+0x47a>
						alarm_mins = alarm_mins - 1;
     608:	80 91 0c 01 	lds	r24, 0x010C
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	80 93 0c 01 	sts	0x010C, r24
     612:	90 cf       	rjmp	.-224    	; 0x534 <encoders+0xa0>
					direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
					switch(direction){
						case 0:
							break;
						case 1:
							if(mins > 0){
     614:	80 91 0f 01 	lds	r24, 0x010F
     618:	88 23       	and	r24, r24
     61a:	09 f4       	brne	.+2      	; 0x61e <encoders+0x18a>
     61c:	b2 c0       	rjmp	.+356    	; 0x782 <encoders+0x2ee>
								current_fm_freq = current_fm_freq - 20;
     61e:	80 91 a0 02 	lds	r24, 0x02A0
     622:	90 91 a1 02 	lds	r25, 0x02A1
     626:	44 97       	sbiw	r24, 0x14	; 20
								lcd_string_array[9] = '.';
								lcd_string_array[8] = digits[(current_fm_freq/100) %10];
								lcd_string_array[7] = digits[(current_fm_freq/1000) %10];
								lcd_string_array[6] = digits[(current_fm_freq/10000) %10];
							}else{
								current_fm_freq = 8890;
     628:	90 93 a1 02 	sts	0x02A1, r25
     62c:	80 93 a0 02 	sts	0x02A0, r24
								fm_tune_freq();
     630:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <fm_tune_freq>
								lcd_string_array[10] = digits[(current_fm_freq/10) %10];
     634:	40 91 a0 02 	lds	r20, 0x02A0
     638:	50 91 a1 02 	lds	r21, 0x02A1
     63c:	9a 01       	movw	r18, r20
     63e:	ad ec       	ldi	r26, 0xCD	; 205
     640:	bc ec       	ldi	r27, 0xCC	; 204
     642:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     646:	fc 01       	movw	r30, r24
     648:	f6 95       	lsr	r31
     64a:	e7 95       	ror	r30
     64c:	f6 95       	lsr	r31
     64e:	e7 95       	ror	r30
     650:	f6 95       	lsr	r31
     652:	e7 95       	ror	r30
     654:	9f 01       	movw	r18, r30
     656:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     65a:	96 95       	lsr	r25
     65c:	87 95       	ror	r24
     65e:	96 95       	lsr	r25
     660:	87 95       	ror	r24
     662:	96 95       	lsr	r25
     664:	87 95       	ror	r24
     666:	9c 01       	movw	r18, r24
     668:	22 0f       	add	r18, r18
     66a:	33 1f       	adc	r19, r19
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	82 0f       	add	r24, r18
     67a:	93 1f       	adc	r25, r19
     67c:	e8 1b       	sub	r30, r24
     67e:	f9 0b       	sbc	r31, r25
     680:	e0 50       	subi	r30, 0x00	; 0
     682:	ff 4f       	sbci	r31, 0xFF	; 255
     684:	80 81       	ld	r24, Z
     686:	80 93 1c 01 	sts	0x011C, r24
								lcd_string_array[9] = '.';
     68a:	8e e2       	ldi	r24, 0x2E	; 46
     68c:	80 93 1b 01 	sts	0x011B, r24
								lcd_string_array[8] = digits[(current_fm_freq/100) %10];
     690:	9a 01       	movw	r18, r20
     692:	36 95       	lsr	r19
     694:	27 95       	ror	r18
     696:	36 95       	lsr	r19
     698:	27 95       	ror	r18
     69a:	ab e7       	ldi	r26, 0x7B	; 123
     69c:	b4 e1       	ldi	r27, 0x14	; 20
     69e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     6a2:	fc 01       	movw	r30, r24
     6a4:	f6 95       	lsr	r31
     6a6:	e7 95       	ror	r30
     6a8:	9f 01       	movw	r18, r30
     6aa:	ad ec       	ldi	r26, 0xCD	; 205
     6ac:	bc ec       	ldi	r27, 0xCC	; 204
     6ae:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     6b2:	96 95       	lsr	r25
     6b4:	87 95       	ror	r24
     6b6:	96 95       	lsr	r25
     6b8:	87 95       	ror	r24
     6ba:	96 95       	lsr	r25
     6bc:	87 95       	ror	r24
     6be:	9c 01       	movw	r18, r24
     6c0:	22 0f       	add	r18, r18
     6c2:	33 1f       	adc	r19, r19
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	88 0f       	add	r24, r24
     6ca:	99 1f       	adc	r25, r25
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	82 0f       	add	r24, r18
     6d2:	93 1f       	adc	r25, r19
     6d4:	e8 1b       	sub	r30, r24
     6d6:	f9 0b       	sbc	r31, r25
     6d8:	e0 50       	subi	r30, 0x00	; 0
     6da:	ff 4f       	sbci	r31, 0xFF	; 255
     6dc:	80 81       	ld	r24, Z
     6de:	80 93 1a 01 	sts	0x011A, r24
								lcd_string_array[7] = digits[(current_fm_freq/1000) %10];
     6e2:	9a 01       	movw	r18, r20
     6e4:	36 95       	lsr	r19
     6e6:	27 95       	ror	r18
     6e8:	36 95       	lsr	r19
     6ea:	27 95       	ror	r18
     6ec:	36 95       	lsr	r19
     6ee:	27 95       	ror	r18
     6f0:	a5 ec       	ldi	r26, 0xC5	; 197
     6f2:	b0 e2       	ldi	r27, 0x20	; 32
     6f4:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     6f8:	fc 01       	movw	r30, r24
     6fa:	f2 95       	swap	r31
     6fc:	e2 95       	swap	r30
     6fe:	ef 70       	andi	r30, 0x0F	; 15
     700:	ef 27       	eor	r30, r31
     702:	ff 70       	andi	r31, 0x0F	; 15
     704:	ef 27       	eor	r30, r31
     706:	9f 01       	movw	r18, r30
     708:	ad ec       	ldi	r26, 0xCD	; 205
     70a:	bc ec       	ldi	r27, 0xCC	; 204
     70c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     710:	96 95       	lsr	r25
     712:	87 95       	ror	r24
     714:	96 95       	lsr	r25
     716:	87 95       	ror	r24
     718:	96 95       	lsr	r25
     71a:	87 95       	ror	r24
     71c:	9c 01       	movw	r18, r24
     71e:	22 0f       	add	r18, r18
     720:	33 1f       	adc	r19, r19
     722:	88 0f       	add	r24, r24
     724:	99 1f       	adc	r25, r25
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	88 0f       	add	r24, r24
     72c:	99 1f       	adc	r25, r25
     72e:	82 0f       	add	r24, r18
     730:	93 1f       	adc	r25, r19
     732:	e8 1b       	sub	r30, r24
     734:	f9 0b       	sbc	r31, r25
     736:	e0 50       	subi	r30, 0x00	; 0
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	80 81       	ld	r24, Z
     73c:	80 93 19 01 	sts	0x0119, r24
								lcd_string_array[6] = digits[(current_fm_freq/10000) %10];
     740:	9a 01       	movw	r18, r20
     742:	b5 c0       	rjmp	.+362    	; 0x8ae <encoders+0x41a>
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(hours > 0){
     744:	80 91 10 01 	lds	r24, 0x0110
     748:	88 23       	and	r24, r24
     74a:	49 f0       	breq	.+18     	; 0x75e <encoders+0x2ca>
						hours = hours - 1;
     74c:	80 91 10 01 	lds	r24, 0x0110
     750:	81 50       	subi	r24, 0x01	; 1
     752:	80 93 10 01 	sts	0x0110, r24
     756:	a9 ce       	rjmp	.-686    	; 0x4aa <encoders+0x16>
					break;
				case 2:
					if(hours < 23){
						hours = hours + 1;
					}else{
						hours = 0;
     758:	10 92 10 01 	sts	0x0110, r1
     75c:	a6 ce       	rjmp	.-692    	; 0x4aa <encoders+0x16>
					break;
				case 1:
					if(hours > 0){
						hours = hours - 1;
					}else{
						hours = 23;
     75e:	87 e1       	ldi	r24, 0x17	; 23
     760:	80 93 10 01 	sts	0x0110, r24
     764:	a2 ce       	rjmp	.-700    	; 0x4aa <encoders+0x16>
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(alarm_hours > 0){
     766:	80 91 0d 01 	lds	r24, 0x010D
     76a:	88 23       	and	r24, r24
     76c:	31 f0       	breq	.+12     	; 0x77a <encoders+0x2e6>
						alarm_hours = alarm_hours - 1;
     76e:	80 91 0d 01 	lds	r24, 0x010D
     772:	81 50       	subi	r24, 0x01	; 1
     774:	80 93 0d 01 	sts	0x010D, r24
     778:	98 ce       	rjmp	.-720    	; 0x4aa <encoders+0x16>
					}else{
						alarm_hours = 23;
     77a:	87 e1       	ldi	r24, 0x17	; 23
     77c:	80 93 0d 01 	sts	0x010D, r24
     780:	94 ce       	rjmp	.-728    	; 0x4aa <encoders+0x16>
								lcd_string_array[9] = '.';
								lcd_string_array[8] = digits[(current_fm_freq/100) %10];
								lcd_string_array[7] = digits[(current_fm_freq/1000) %10];
								lcd_string_array[6] = digits[(current_fm_freq/10000) %10];
							}else{
								current_fm_freq = 10790;
     782:	86 e2       	ldi	r24, 0x26	; 38
     784:	9a e2       	ldi	r25, 0x2A	; 42
     786:	90 93 a1 02 	sts	0x02A1, r25
     78a:	80 93 a0 02 	sts	0x02A0, r24
								fm_tune_freq();
     78e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <fm_tune_freq>
								LCD_current_fm_freq = current_fm_freq/10;
     792:	c0 91 a0 02 	lds	r28, 0x02A0
     796:	d0 91 a1 02 	lds	r29, 0x02A1
     79a:	9e 01       	movw	r18, r28
     79c:	ad ec       	ldi	r26, 0xCD	; 205
     79e:	bc ec       	ldi	r27, 0xCC	; 204
     7a0:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     7a4:	ac 01       	movw	r20, r24
     7a6:	56 95       	lsr	r21
     7a8:	47 95       	ror	r20
     7aa:	56 95       	lsr	r21
     7ac:	47 95       	ror	r20
     7ae:	56 95       	lsr	r21
     7b0:	47 95       	ror	r20
     7b2:	50 93 9c 02 	sts	0x029C, r21
     7b6:	40 93 9b 02 	sts	0x029B, r20
								lcd_string_array[10] = digits[(current_fm_freq/10) %10];
     7ba:	9a 01       	movw	r18, r20
     7bc:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     7c0:	96 95       	lsr	r25
     7c2:	87 95       	ror	r24
     7c4:	96 95       	lsr	r25
     7c6:	87 95       	ror	r24
     7c8:	96 95       	lsr	r25
     7ca:	87 95       	ror	r24
     7cc:	9c 01       	movw	r18, r24
     7ce:	22 0f       	add	r18, r18
     7d0:	33 1f       	adc	r19, r19
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	82 0f       	add	r24, r18
     7e0:	93 1f       	adc	r25, r19
     7e2:	48 1b       	sub	r20, r24
     7e4:	59 0b       	sbc	r21, r25
     7e6:	fa 01       	movw	r30, r20
     7e8:	e0 50       	subi	r30, 0x00	; 0
     7ea:	ff 4f       	sbci	r31, 0xFF	; 255
     7ec:	80 81       	ld	r24, Z
     7ee:	80 93 1c 01 	sts	0x011C, r24
								lcd_string_array[9] = '.';
     7f2:	8e e2       	ldi	r24, 0x2E	; 46
     7f4:	80 93 1b 01 	sts	0x011B, r24
								lcd_string_array[8] = digits[(current_fm_freq/100) %10];
     7f8:	9e 01       	movw	r18, r28
     7fa:	36 95       	lsr	r19
     7fc:	27 95       	ror	r18
     7fe:	36 95       	lsr	r19
     800:	27 95       	ror	r18
     802:	ab e7       	ldi	r26, 0x7B	; 123
     804:	b4 e1       	ldi	r27, 0x14	; 20
     806:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     80a:	ac 01       	movw	r20, r24
     80c:	56 95       	lsr	r21
     80e:	47 95       	ror	r20
     810:	9a 01       	movw	r18, r20
     812:	ad ec       	ldi	r26, 0xCD	; 205
     814:	bc ec       	ldi	r27, 0xCC	; 204
     816:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     81a:	96 95       	lsr	r25
     81c:	87 95       	ror	r24
     81e:	96 95       	lsr	r25
     820:	87 95       	ror	r24
     822:	96 95       	lsr	r25
     824:	87 95       	ror	r24
     826:	9c 01       	movw	r18, r24
     828:	22 0f       	add	r18, r18
     82a:	33 1f       	adc	r19, r19
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	88 0f       	add	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	82 0f       	add	r24, r18
     83a:	93 1f       	adc	r25, r19
     83c:	48 1b       	sub	r20, r24
     83e:	59 0b       	sbc	r21, r25
     840:	fa 01       	movw	r30, r20
     842:	e0 50       	subi	r30, 0x00	; 0
     844:	ff 4f       	sbci	r31, 0xFF	; 255
     846:	80 81       	ld	r24, Z
     848:	80 93 1a 01 	sts	0x011A, r24
								lcd_string_array[7] = digits[(current_fm_freq/1000) %10];
     84c:	9e 01       	movw	r18, r28
     84e:	36 95       	lsr	r19
     850:	27 95       	ror	r18
     852:	36 95       	lsr	r19
     854:	27 95       	ror	r18
     856:	36 95       	lsr	r19
     858:	27 95       	ror	r18
     85a:	a5 ec       	ldi	r26, 0xC5	; 197
     85c:	b0 e2       	ldi	r27, 0x20	; 32
     85e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     862:	ac 01       	movw	r20, r24
     864:	52 95       	swap	r21
     866:	42 95       	swap	r20
     868:	4f 70       	andi	r20, 0x0F	; 15
     86a:	45 27       	eor	r20, r21
     86c:	5f 70       	andi	r21, 0x0F	; 15
     86e:	45 27       	eor	r20, r21
     870:	9a 01       	movw	r18, r20
     872:	ad ec       	ldi	r26, 0xCD	; 205
     874:	bc ec       	ldi	r27, 0xCC	; 204
     876:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     87a:	96 95       	lsr	r25
     87c:	87 95       	ror	r24
     87e:	96 95       	lsr	r25
     880:	87 95       	ror	r24
     882:	96 95       	lsr	r25
     884:	87 95       	ror	r24
     886:	9c 01       	movw	r18, r24
     888:	22 0f       	add	r18, r18
     88a:	33 1f       	adc	r19, r19
     88c:	88 0f       	add	r24, r24
     88e:	99 1f       	adc	r25, r25
     890:	88 0f       	add	r24, r24
     892:	99 1f       	adc	r25, r25
     894:	88 0f       	add	r24, r24
     896:	99 1f       	adc	r25, r25
     898:	82 0f       	add	r24, r18
     89a:	93 1f       	adc	r25, r19
     89c:	48 1b       	sub	r20, r24
     89e:	59 0b       	sbc	r21, r25
     8a0:	fa 01       	movw	r30, r20
     8a2:	e0 50       	subi	r30, 0x00	; 0
     8a4:	ff 4f       	sbci	r31, 0xFF	; 255
     8a6:	80 81       	ld	r24, Z
     8a8:	80 93 19 01 	sts	0x0119, r24
								lcd_string_array[6] = digits[(current_fm_freq/10000) %10];
     8ac:	9e 01       	movw	r18, r28
								fm_tune_freq();
								lcd_string_array[10] = digits[(current_fm_freq/10) %10];
								lcd_string_array[9] = '.';
								lcd_string_array[8] = digits[(current_fm_freq/100) %10];
								lcd_string_array[7] = digits[(current_fm_freq/1000) %10];
								lcd_string_array[6] = digits[(current_fm_freq/10000) %10];
     8ae:	32 95       	swap	r19
     8b0:	22 95       	swap	r18
     8b2:	2f 70       	andi	r18, 0x0F	; 15
     8b4:	23 27       	eor	r18, r19
     8b6:	3f 70       	andi	r19, 0x0F	; 15
     8b8:	23 27       	eor	r18, r19
     8ba:	a7 e4       	ldi	r26, 0x47	; 71
     8bc:	b3 e0       	ldi	r27, 0x03	; 3
     8be:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     8c2:	ac 01       	movw	r20, r24
     8c4:	56 95       	lsr	r21
     8c6:	47 95       	ror	r20
     8c8:	56 95       	lsr	r21
     8ca:	47 95       	ror	r20
     8cc:	56 95       	lsr	r21
     8ce:	47 95       	ror	r20
     8d0:	9a 01       	movw	r18, r20
     8d2:	ad ec       	ldi	r26, 0xCD	; 205
     8d4:	bc ec       	ldi	r27, 0xCC	; 204
     8d6:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__umulhisi3>
     8da:	96 95       	lsr	r25
     8dc:	87 95       	ror	r24
     8de:	96 95       	lsr	r25
     8e0:	87 95       	ror	r24
     8e2:	96 95       	lsr	r25
     8e4:	87 95       	ror	r24
     8e6:	9c 01       	movw	r18, r24
     8e8:	22 0f       	add	r18, r18
     8ea:	33 1f       	adc	r19, r19
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	82 0f       	add	r24, r18
     8fa:	93 1f       	adc	r25, r19
     8fc:	48 1b       	sub	r20, r24
     8fe:	59 0b       	sbc	r21, r25
     900:	fa 01       	movw	r30, r20
     902:	e0 50       	subi	r30, 0x00	; 0
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	80 81       	ld	r24, Z
     908:	80 93 18 01 	sts	0x0118, r24
     90c:	4d ce       	rjmp	.-870    	; 0x5a8 <encoders+0x114>
					break;
				case 1:
					if(alarm_mins > 0){
						alarm_mins = alarm_mins - 1;
					}else{
						alarm_mins = 59;
     90e:	8b e3       	ldi	r24, 0x3B	; 59
     910:	80 93 0c 01 	sts	0x010C, r24
     914:	0f ce       	rjmp	.-994    	; 0x534 <encoders+0xa0>
					break;
				case 1:
					if(mins > 0){
						mins = mins - 1;
					}else{
						mins = 59;
     916:	8b e3       	ldi	r24, 0x3B	; 59
     918:	80 93 0f 01 	sts	0x010F, r24
     91c:	45 ce       	rjmp	.-886    	; 0x5a8 <encoders+0x114>
								lcd_string_array[9] = '.';
								lcd_string_array[8] = digits[(current_fm_freq/100) %10];
								lcd_string_array[7] = digits[(current_fm_freq/1000) %10];
								lcd_string_array[6] = digits[(current_fm_freq/10000) %10];
							}else{
								current_fm_freq = 8890;
     91e:	8a eb       	ldi	r24, 0xBA	; 186
     920:	92 e2       	ldi	r25, 0x22	; 34
     922:	82 ce       	rjmp	.-764    	; 0x628 <encoders+0x194>
					break;
				case 2:
					if(alarm_mins < 59){
						alarm_mins = alarm_mins + 1;
					}else{
						alarm_mins = 0;
     924:	10 92 0c 01 	sts	0x010C, r1
     928:	05 ce       	rjmp	.-1014   	; 0x534 <encoders+0xa0>
					break;
				case 2:
					if(mins < 59){
						mins = mins + 1;
					}else{
						mins = 0;
     92a:	10 92 0f 01 	sts	0x010F, r1
     92e:	3c ce       	rjmp	.-904    	; 0x5a8 <encoders+0x114>
						alarm_hours = 23;
					}
					break;
				case 2:
					if(alarm_hours < 23){
						alarm_hours = alarm_hours + 1;
     930:	80 91 0d 01 	lds	r24, 0x010D
     934:	8f 5f       	subi	r24, 0xFF	; 255
     936:	80 93 0d 01 	sts	0x010D, r24
     93a:	b7 cd       	rjmp	.-1170   	; 0x4aa <encoders+0x16>

0000093c <check_alarm>:

//***********************************************************************
//                            check_alarm
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
     93c:	80 91 11 01 	lds	r24, 0x0111
     940:	81 30       	cpi	r24, 0x01	; 1
     942:	b9 f0       	breq	.+46     	; 0x972 <check_alarm+0x36>
			lcd_string_array[4] = 'M';
		}
	}

	// Keeps alarm on while the alarm is armed
	if((alarm_armed == 0x00)){
     944:	80 91 11 01 	lds	r24, 0x0111
     948:	81 11       	cpse	r24, r1
     94a:	12 c0       	rjmp	.+36     	; 0x970 <check_alarm+0x34>
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
     94c:	88 e1       	ldi	r24, 0x18	; 24
     94e:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
     950:	87 b7       	in	r24, 0x37	; 55
     952:	8f 7e       	andi	r24, 0xEF	; 239
     954:	87 bf       	out	0x37, r24	; 55
	}

	// Keeps alarm on while the alarm is armed
	if((alarm_armed == 0x00)){
		disable_tcnt1();
		alarm_buzz = 0x00;
     956:	10 92 54 02 	sts	0x0254, r1
		//send_lcd(0x00, 0x08); //Turn off LCD
		lcd_string_array[0] = ' ';
     95a:	80 e2       	ldi	r24, 0x20	; 32
     95c:	80 93 12 01 	sts	0x0112, r24
		lcd_string_array[1] = ' ';
     960:	80 93 13 01 	sts	0x0113, r24
		lcd_string_array[2] = ' ';
     964:	80 93 14 01 	sts	0x0114, r24
		lcd_string_array[3] = ' ';
     968:	80 93 15 01 	sts	0x0115, r24
		lcd_string_array[4] = ' ';
     96c:	80 93 16 01 	sts	0x0116, r24
     970:	08 95       	ret

//***********************************************************************
//                            check_alarm
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
     972:	20 91 10 01 	lds	r18, 0x0110
     976:	90 91 0d 01 	lds	r25, 0x010D
     97a:	29 13       	cpse	r18, r25
     97c:	e3 cf       	rjmp	.-58     	; 0x944 <check_alarm+0x8>
     97e:	20 91 0f 01 	lds	r18, 0x010F
     982:	90 91 0c 01 	lds	r25, 0x010C
     986:	29 13       	cpse	r18, r25
     988:	dd cf       	rjmp	.-70     	; 0x944 <check_alarm+0x8>
		if((seconds == alarm_seconds)){
     98a:	20 91 0e 01 	lds	r18, 0x010E
     98e:	90 91 55 02 	lds	r25, 0x0255
     992:	29 13       	cpse	r18, r25
     994:	d7 cf       	rjmp	.-82     	; 0x944 <check_alarm+0x8>
//
// setup TCNT1 in pwm mode
// set OC1A (PB5) as pwm output
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);
     996:	9f b5       	in	r25, 0x2f	; 47
     998:	92 60       	ori	r25, 0x02	; 2
     99a:	9f bd       	out	0x2f, r25	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10);
     99c:	9e b5       	in	r25, 0x2e	; 46
     99e:	99 61       	ori	r25, 0x19	; 25
     9a0:	9e bd       	out	0x2e, r25	; 46
	//no forced compare
	TCCR1C = 0x00;
     9a2:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 ec       	ldi	r19, 0xC0	; 192
     9aa:	3b bd       	out	0x2b, r19	; 43
     9ac:	2a bd       	out	0x2a, r18	; 42
	ICR1  = 0xF000; //clear at 0xF000
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 ef       	ldi	r19, 0xF0	; 240
     9b2:	37 bd       	out	0x27, r19	; 39
     9b4:	26 bd       	out	0x26, r18	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
     9b6:	97 b7       	in	r25, 0x37	; 55
     9b8:	90 61       	ori	r25, 0x10	; 16
     9ba:	97 bf       	out	0x37, r25	; 55
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
		if((seconds == alarm_seconds)){
			init_tcnt1();
			alarm_buzz = 0x01;
     9bc:	80 93 54 02 	sts	0x0254, r24
			//send_lcd(0x00, 0x0C);
			lcd_string_array[0] = 'A';
     9c0:	81 e4       	ldi	r24, 0x41	; 65
     9c2:	80 93 12 01 	sts	0x0112, r24
			lcd_string_array[1] = 'L';
     9c6:	9c e4       	ldi	r25, 0x4C	; 76
     9c8:	90 93 13 01 	sts	0x0113, r25
			lcd_string_array[2] = 'A';
     9cc:	80 93 14 01 	sts	0x0114, r24
			lcd_string_array[3] = 'R';
     9d0:	82 e5       	ldi	r24, 0x52	; 82
     9d2:	80 93 15 01 	sts	0x0115, r24
			lcd_string_array[4] = 'M';
     9d6:	8d e4       	ldi	r24, 0x4D	; 77
     9d8:	80 93 16 01 	sts	0x0116, r24
     9dc:	b3 cf       	rjmp	.-154    	; 0x944 <check_alarm+0x8>

000009de <snooze>:
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
     9de:	88 e1       	ldi	r24, 0x18	; 24
     9e0:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
     9e2:	87 b7       	in	r24, 0x37	; 55
     9e4:	8f 7e       	andi	r24, 0xEF	; 239
     9e6:	87 bf       	out	0x37, r24	; 55
//                            snooze_alarm
//**********************************************************************
void snooze(){
	//Turn off the alarm
	disable_tcnt1();
	alarm_buzz = 0x00;
     9e8:	10 92 54 02 	sts	0x0254, r1

	if(alarm_seconds < 50){
     9ec:	80 91 55 02 	lds	r24, 0x0255
     9f0:	82 33       	cpi	r24, 0x32	; 50
     9f2:	30 f5       	brcc	.+76     	; 0xa40 <snooze+0x62>
		alarm_hours = hours;
     9f4:	80 91 10 01 	lds	r24, 0x0110
     9f8:	80 93 0d 01 	sts	0x010D, r24
		alarm_mins = mins;
     9fc:	80 91 0f 01 	lds	r24, 0x010F
     a00:	80 93 0c 01 	sts	0x010C, r24
		alarm_seconds  = seconds;
     a04:	80 91 0e 01 	lds	r24, 0x010E
     a08:	80 93 55 02 	sts	0x0255, r24

		if(alarm_seconds < 50){
     a0c:	80 91 55 02 	lds	r24, 0x0255
     a10:	82 33       	cpi	r24, 0x32	; 50
     a12:	b8 f0       	brcs	.+46     	; 0xa42 <snooze+0x64>
			alarm_seconds = alarm_seconds + 10;
			return;
		}else{
			alarm_seconds = 60-alarm_seconds;
     a14:	90 91 55 02 	lds	r25, 0x0255
     a18:	8c e3       	ldi	r24, 0x3C	; 60
     a1a:	89 1b       	sub	r24, r25
     a1c:	80 93 55 02 	sts	0x0255, r24
			alarm_mins++;
     a20:	80 91 0c 01 	lds	r24, 0x010C
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	80 93 0c 01 	sts	0x010C, r24
		}

		if(alarm_mins > 59){
     a2a:	80 91 0c 01 	lds	r24, 0x010C
     a2e:	8c 33       	cpi	r24, 0x3C	; 60
     a30:	38 f0       	brcs	.+14     	; 0xa40 <snooze+0x62>
			alarm_mins = 0;
     a32:	10 92 0c 01 	sts	0x010C, r1
			alarm_hours++;
     a36:	80 91 0d 01 	lds	r24, 0x010D
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	80 93 0d 01 	sts	0x010D, r24
     a40:	08 95       	ret
		alarm_hours = hours;
		alarm_mins = mins;
		alarm_seconds  = seconds;

		if(alarm_seconds < 50){
			alarm_seconds = alarm_seconds + 10;
     a42:	80 91 55 02 	lds	r24, 0x0255
     a46:	86 5f       	subi	r24, 0xF6	; 246
     a48:	80 93 55 02 	sts	0x0255, r24
			return;
     a4c:	08 95       	ret

00000a4e <check_user_input>:


//***********************************************************************
//                            Check Buttons/Encoders
//**********************************************************************
void check_user_input(){
     a4e:	af 92       	push	r10
     a50:	bf 92       	push	r11
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
	//Checks the state of the buttons and encoders
	//Output
  //Read the buttons
        PORTB = PORTB | (1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7);
     a62:	88 b3       	in	r24, 0x18	; 24
     a64:	80 6f       	ori	r24, 0xF0	; 240
     a66:	88 bb       	out	0x18, r24	; 24
	// Select 7 - Enable Tristates on Button Board

	DDRA = 0x00; // PortA as an input from buttons
     a68:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; // PortA enable Pull Ups
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a6e:	25 e0       	ldi	r18, 0x05	; 5
     a70:	2a 95       	dec	r18
     a72:	f1 f7       	brne	.-4      	; 0xa70 <check_user_input+0x22>
     a74:	00 00       	nop
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     a76:	69 b3       	in	r22, 0x19	; 25
     a78:	80 91 5b 02 	lds	r24, 0x025B
     a7c:	90 91 5c 02 	lds	r25, 0x025C
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	90 6e       	ori	r25, 0xE0	; 224
     a86:	26 2f       	mov	r18, r22
     a88:	21 70       	andi	r18, 0x01	; 1
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	82 2b       	or	r24, r18
     a8e:	93 2b       	or	r25, r19
     a90:	90 93 5c 02 	sts	0x025C, r25
     a94:	80 93 5b 02 	sts	0x025B, r24
        if(state[button] == 0xF000) return 1;
     a98:	81 15       	cp	r24, r1
     a9a:	90 4f       	sbci	r25, 0xF0	; 240
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <check_user_input+0x52>
     a9e:	ac c0       	rjmp	.+344    	; 0xbf8 <check_user_input+0x1aa>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     aa0:	89 b3       	in	r24, 0x19	; 25
     aa2:	20 91 5d 02 	lds	r18, 0x025D
     aa6:	30 91 5e 02 	lds	r19, 0x025E
     aaa:	22 0f       	add	r18, r18
     aac:	33 1f       	adc	r19, r19
     aae:	30 6e       	ori	r19, 0xE0	; 224
     ab0:	81 fb       	bst	r24, 1
     ab2:	44 27       	eor	r20, r20
     ab4:	40 f9       	bld	r20, 0
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	24 2b       	or	r18, r20
     aba:	35 2b       	or	r19, r21
     abc:	30 93 5e 02 	sts	0x025E, r19
     ac0:	20 93 5d 02 	sts	0x025D, r18
        if(state[button] == 0xF000) return 1;
     ac4:	21 15       	cp	r18, r1
     ac6:	30 4f       	sbci	r19, 0xF0	; 240
     ac8:	09 f4       	brne	.+2      	; 0xacc <check_user_input+0x7e>
     aca:	b4 c0       	rjmp	.+360    	; 0xc34 <check_user_input+0x1e6>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     acc:	29 b3       	in	r18, 0x19	; 25
     ace:	80 91 5f 02 	lds	r24, 0x025F
     ad2:	90 91 60 02 	lds	r25, 0x0260
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	90 6e       	ori	r25, 0xE0	; 224
     adc:	22 fb       	bst	r18, 2
     ade:	cc 24       	eor	r12, r12
     ae0:	c0 f8       	bld	r12, 0
     ae2:	d1 2c       	mov	r13, r1
     ae4:	c8 2a       	or	r12, r24
     ae6:	d9 2a       	or	r13, r25
     ae8:	d0 92 60 02 	sts	0x0260, r13
     aec:	c0 92 5f 02 	sts	0x025F, r12
     af0:	29 b3       	in	r18, 0x19	; 25
     af2:	80 91 61 02 	lds	r24, 0x0261
     af6:	90 91 62 02 	lds	r25, 0x0262
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	90 6e       	ori	r25, 0xE0	; 224
     b00:	23 fb       	bst	r18, 3
     b02:	aa 24       	eor	r10, r10
     b04:	a0 f8       	bld	r10, 0
     b06:	b1 2c       	mov	r11, r1
     b08:	a8 2a       	or	r10, r24
     b0a:	b9 2a       	or	r11, r25
     b0c:	b0 92 62 02 	sts	0x0262, r11
     b10:	a0 92 61 02 	sts	0x0261, r10
     b14:	29 b3       	in	r18, 0x19	; 25
     b16:	80 91 63 02 	lds	r24, 0x0263
     b1a:	90 91 64 02 	lds	r25, 0x0264
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	90 6e       	ori	r25, 0xE0	; 224
     b24:	24 fb       	bst	r18, 4
     b26:	ee 24       	eor	r14, r14
     b28:	e0 f8       	bld	r14, 0
     b2a:	f1 2c       	mov	r15, r1
     b2c:	8e 29       	or	r24, r14
     b2e:	9f 29       	or	r25, r15
     b30:	90 93 64 02 	sts	0x0264, r25
     b34:	80 93 63 02 	sts	0x0263, r24
        if(state[button] == 0xF000) return 1;
     b38:	81 15       	cp	r24, r1
     b3a:	90 4f       	sbci	r25, 0xF0	; 240
     b3c:	09 f4       	brne	.+2      	; 0xb40 <check_user_input+0xf2>
     b3e:	76 c0       	rjmp	.+236    	; 0xc2c <check_user_input+0x1de>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     b40:	89 b3       	in	r24, 0x19	; 25
     b42:	20 91 65 02 	lds	r18, 0x0265
     b46:	30 91 66 02 	lds	r19, 0x0266
     b4a:	22 0f       	add	r18, r18
     b4c:	33 1f       	adc	r19, r19
     b4e:	30 6e       	ori	r19, 0xE0	; 224
     b50:	85 fb       	bst	r24, 5
     b52:	00 27       	eor	r16, r16
     b54:	00 f9       	bld	r16, 0
     b56:	10 e0       	ldi	r17, 0x00	; 0
     b58:	20 2b       	or	r18, r16
     b5a:	31 2b       	or	r19, r17
     b5c:	30 93 66 02 	sts	0x0266, r19
     b60:	20 93 65 02 	sts	0x0265, r18
        if(state[button] == 0xF000) return 1;
     b64:	21 15       	cp	r18, r1
     b66:	30 4f       	sbci	r19, 0xF0	; 240
     b68:	09 f4       	brne	.+2      	; 0xb6c <check_user_input+0x11e>
     b6a:	54 c0       	rjmp	.+168    	; 0xc14 <check_user_input+0x1c6>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     b6c:	29 b3       	in	r18, 0x19	; 25
     b6e:	80 91 67 02 	lds	r24, 0x0267
     b72:	90 91 68 02 	lds	r25, 0x0268
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	90 6e       	ori	r25, 0xE0	; 224
     b7c:	26 fb       	bst	r18, 6
     b7e:	22 27       	eor	r18, r18
     b80:	20 f9       	bld	r18, 0
     b82:	c2 2f       	mov	r28, r18
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	d2 2f       	mov	r29, r18
     b88:	8c 2b       	or	r24, r28
     b8a:	9d 2b       	or	r25, r29
     b8c:	90 93 68 02 	sts	0x0268, r25
     b90:	80 93 67 02 	sts	0x0267, r24
        if(state[button] == 0xF000) return 1;
     b94:	81 15       	cp	r24, r1
     b96:	90 4f       	sbci	r25, 0xF0	; 240
     b98:	b1 f1       	breq	.+108    	; 0xc06 <check_user_input+0x1b8>
                if((alarm_buzz == 0x01)){
			snooze();
		}
        }
	// Turn off the button board PWM high
	PORTB &= ~((1<<PB4) | (1<<PB5) | (1<<PB6) | (0<<PB7));
     b9a:	88 b3       	in	r24, 0x18	; 24
     b9c:	8f 78       	andi	r24, 0x8F	; 143
     b9e:	88 bb       	out	0x18, r24	; 24

	DDRA = 0xFF; //DDRA Output
     ba0:	8f ef       	ldi	r24, 0xFF	; 255
     ba2:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //Turn Off The 7Seg
     ba4:	8b bb       	out	0x1b, r24	; 27

  // Send info to the bargraph (Sending info will read in encoders)
	PORTD &= ~(1<<PD2); //Storage Reg for HC595 low
     ba6:	92 98       	cbi	0x12, 2	; 18
	PORTE &= ~((1<<PE6) |  (1<<PE5)); //Encoder Shift Reg Clk en Low, Load Mode
     ba8:	83 b1       	in	r24, 0x03	; 3
     baa:	8f 79       	andi	r24, 0x9F	; 159
     bac:	83 b9       	out	0x03, r24	; 3
	PORTC &= ~(1<<PC1);
     bae:	a9 98       	cbi	0x15, 1	; 21
	PORTC |= (1<<PC1);//Shift Mode
     bb0:	a9 9a       	sbi	0x15, 1	; 21

	//PORTE |= (1<<PE7);
	encoder = spi_rw8(incdec_to_bargraph[clockmode]); // Send SPI_8bit
     bb2:	e0 91 58 02 	lds	r30, 0x0258
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	ea 5b       	subi	r30, 0xBA	; 186
     bba:	fe 4f       	sbci	r31, 0xFE	; 254
     bbc:	80 81       	ld	r24, Z
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
     bbe:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
     bc0:	77 9b       	sbis	0x0e, 7	; 14
     bc2:	fe cf       	rjmp	.-4      	; 0xbc0 <check_user_input+0x172>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
     bc4:	8f b1       	in	r24, 0x0f	; 15
	PORTE &= ~((1<<PE6) |  (1<<PE5)); //Encoder Shift Reg Clk en Low, Load Mode
	PORTC &= ~(1<<PC1);
	PORTC |= (1<<PC1);//Shift Mode

	//PORTE |= (1<<PE7);
	encoder = spi_rw8(incdec_to_bargraph[clockmode]); // Send SPI_8bit
     bc6:	80 93 57 02 	sts	0x0257, r24
	//spi_rw8(0xF0); 			//Test line

  // Check the encoders
	if(encoder != old_encoder){
     bca:	90 91 57 02 	lds	r25, 0x0257
     bce:	80 91 56 02 	lds	r24, 0x0256
     bd2:	98 13       	cpse	r25, r24
		// Change in the encoder position
		encoders();
     bd4:	0e 94 4a 02 	call	0x494	; 0x494 <encoders>
	}
  // Return the to original states
	PORTD |= (1<<PD2); //SS_Bar Low
     bd8:	92 9a       	sbi	0x12, 2	; 18
	PORTE |= (1<<PE6) | (0<<PE5); //Clk enable high, Shift mode
     bda:	1e 9a       	sbi	0x03, 6	; 3
	PORTB &= ~((1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7)); // Sel 0
     bdc:	88 b3       	in	r24, 0x18	; 24
     bde:	8f 70       	andi	r24, 0x0F	; 15
     be0:	88 bb       	out	0x18, r24	; 24
  // Disable the button board tristates
}
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	df 90       	pop	r13
     bf0:	cf 90       	pop	r12
     bf2:	bf 90       	pop	r11
     bf4:	af 90       	pop	r10
     bf6:	08 95       	ret
	DDRA = 0x00; // PortA as an input from buttons
	PORTA = 0xFF; // PortA enable Pull Ups

	_delay_us(1); 				//Test Wait
        if(chk_buttons(0)){
		clockmode = (clockmode ^ 0X01) & 0x01; // Toggle bit 0
     bf8:	80 91 58 02 	lds	r24, 0x0258
     bfc:	80 95       	com	r24
     bfe:	81 70       	andi	r24, 0x01	; 1
     c00:	80 93 58 02 	sts	0x0258, r24
     c04:	4d cf       	rjmp	.-358    	; 0xaa0 <check_user_input+0x52>
		alarm_seconds = 0;
		// Toggle the arming of the alarm
        }

	if(chk_buttons(6)){
                if((alarm_buzz == 0x01)){
     c06:	80 91 54 02 	lds	r24, 0x0254
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	31 f6       	brne	.-116    	; 0xb9a <check_user_input+0x14c>
			snooze();
     c0e:	0e 94 ef 04 	call	0x9de	; 0x9de <snooze>
     c12:	c3 cf       	rjmp	.-122    	; 0xb9a <check_user_input+0x14c>
	if(chk_buttons(4)){
                clockmode = Clock_set_mode;
        }

	if(chk_buttons(5)){
                clockmode = Alarm_set_mode;
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	80 93 58 02 	sts	0x0258, r24
		alarm_armed ^= 0x01;
     c1a:	90 91 11 01 	lds	r25, 0x0111
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	89 27       	eor	r24, r25
     c22:	80 93 11 01 	sts	0x0111, r24
		alarm_seconds = 0;
     c26:	10 92 55 02 	sts	0x0255, r1
     c2a:	a0 cf       	rjmp	.-192    	; 0xb6c <check_user_input+0x11e>
	if(chk_buttons(3)){
                volume_down();
        }

	if(chk_buttons(4)){
                clockmode = Clock_set_mode;
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	80 93 58 02 	sts	0x0258, r24
     c32:	86 cf       	rjmp	.-244    	; 0xb40 <check_user_input+0xf2>
		clockmode = (clockmode ^ 0X01) & 0x01; // Toggle bit 0
		// Toggles between clock and alarm views
	}

	if(chk_buttons(1)){
		if(radio_onoff_toggle == TRUE){
     c34:	80 91 0a 01 	lds	r24, 0x010A
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	51 f0       	breq	.+20     	; 0xc50 <check_user_input+0x202>
			set_property(RX_HARD_MUTE, 0x0000);
			radio_onoff_toggle = FALSE;
		}else{
			set_property(RX_HARD_MUTE, 0x0003);
     c3c:	63 e0       	ldi	r22, 0x03	; 3
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e4       	ldi	r25, 0x40	; 64
     c44:	0e 94 c8 0c 	call	0x1990	; 0x1990 <set_property>
			radio_onoff_toggle = TRUE;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	80 93 0a 01 	sts	0x010A, r24
     c4e:	3e cf       	rjmp	.-388    	; 0xacc <check_user_input+0x7e>
		// Toggles between clock and alarm views
	}

	if(chk_buttons(1)){
		if(radio_onoff_toggle == TRUE){
			set_property(RX_HARD_MUTE, 0x0000);
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e4       	ldi	r25, 0x40	; 64
     c58:	0e 94 c8 0c 	call	0x1990	; 0x1990 <set_property>
			radio_onoff_toggle = FALSE;
     c5c:	10 92 0a 01 	sts	0x010A, r1
     c60:	35 cf       	rjmp	.-406    	; 0xacc <check_user_input+0x7e>

00000c62 <check_ADCs>:
//                            check_ADCs
//**********************************************************************
void check_ADCs(){
	// Reads the ADC
	uint8_t adc_result = 0;
	ADCSRA |= (1<<ADSC); //poke ADSC and start conversion
     c62:	36 9a       	sbi	0x06, 6	; 6

	while(bit_is_clear(ADCSRA,ADIF)); //spin while interrupt flag not set
     c64:	34 9b       	sbis	0x06, 4	; 6
     c66:	fe cf       	rjmp	.-4      	; 0xc64 <check_ADCs+0x2>

	ADCSRA |= (1<<ADIF); //its done, clear flag by writing a one
     c68:	34 9a       	sbi	0x06, 4	; 6

	adc_result = ADCH; //read the ADC output as 16 bits
     c6a:	85 b1       	in	r24, 0x05	; 5
	OCR2 = adc_result; //0x10; //adc_result; //adc_result;
     c6c:	83 bd       	out	0x23, r24	; 35
     c6e:	08 95       	ret

00000c70 <__vector_16>:


//***********************************************************************
//                            Timer0_overflow_interrupt
//**********************************************************************
ISR(TIMER0_OVF_vect){
     c70:	1f 92       	push	r1
     c72:	0f 92       	push	r0
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	0b b6       	in	r0, 0x3b	; 59
     c7c:	0f 92       	push	r0
     c7e:	2f 93       	push	r18
     c80:	3f 93       	push	r19
     c82:	4f 93       	push	r20
     c84:	5f 93       	push	r21
     c86:	6f 93       	push	r22
     c88:	7f 93       	push	r23
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25
     c8e:	af 93       	push	r26
     c90:	bf 93       	push	r27
     c92:	ef 93       	push	r30
     c94:	ff 93       	push	r31
	//This intterupt should occur every second
	//static uint8_t seconds = 0; //Holds the seconds between interupts
	check_alarm();
     c96:	0e 94 9e 04 	call	0x93c	; 0x93c <check_alarm>
	seconds++;
     c9a:	80 91 0e 01 	lds	r24, 0x010E
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	80 93 0e 01 	sts	0x010E, r24
	if((seconds % 60) == 0){
     ca4:	90 91 0e 01 	lds	r25, 0x010E
     ca8:	89 e8       	ldi	r24, 0x89	; 137
     caa:	98 9f       	mul	r25, r24
     cac:	81 2d       	mov	r24, r1
     cae:	11 24       	eor	r1, r1
     cb0:	82 95       	swap	r24
     cb2:	86 95       	lsr	r24
     cb4:	87 70       	andi	r24, 0x07	; 7
     cb6:	2c e3       	ldi	r18, 0x3C	; 60
     cb8:	82 9f       	mul	r24, r18
     cba:	90 19       	sub	r25, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	91 11       	cpse	r25, r1
     cc0:	07 c0       	rjmp	.+14     	; 0xcd0 <__vector_16+0x60>
		mins++;
     cc2:	80 91 0f 01 	lds	r24, 0x010F
     cc6:	8f 5f       	subi	r24, 0xFF	; 255
     cc8:	80 93 0f 01 	sts	0x010F, r24
		seconds = 0;
     ccc:	10 92 0e 01 	sts	0x010E, r1
		//check_alarm();
	}
	if(((mins % 60) == 0) & ((seconds % 60) == 0)){
     cd0:	30 91 0f 01 	lds	r19, 0x010F
     cd4:	90 91 0e 01 	lds	r25, 0x010E
     cd8:	89 e8       	ldi	r24, 0x89	; 137
     cda:	98 9f       	mul	r25, r24
     cdc:	21 2d       	mov	r18, r1
     cde:	11 24       	eor	r1, r1
     ce0:	22 95       	swap	r18
     ce2:	26 95       	lsr	r18
     ce4:	27 70       	andi	r18, 0x07	; 7
     ce6:	4c e3       	ldi	r20, 0x3C	; 60
     ce8:	24 9f       	mul	r18, r20
     cea:	90 19       	sub	r25, r0
     cec:	11 24       	eor	r1, r1
     cee:	91 11       	cpse	r25, r1
     cf0:	0c c0       	rjmp	.+24     	; 0xd0a <__vector_16+0x9a>
     cf2:	38 9f       	mul	r19, r24
     cf4:	81 2d       	mov	r24, r1
     cf6:	11 24       	eor	r1, r1
     cf8:	82 95       	swap	r24
     cfa:	86 95       	lsr	r24
     cfc:	87 70       	andi	r24, 0x07	; 7
     cfe:	84 9f       	mul	r24, r20
     d00:	30 19       	sub	r19, r0
     d02:	11 24       	eor	r1, r1
     d04:	33 23       	and	r19, r19
     d06:	09 f4       	brne	.+2      	; 0xd0a <__vector_16+0x9a>
     d08:	4b c0       	rjmp	.+150    	; 0xda0 <__vector_16+0x130>
		hours++;
		mins = 0;
	}
	if((hours % 24) == 0){
     d0a:	90 91 10 01 	lds	r25, 0x0110
     d0e:	8b ea       	ldi	r24, 0xAB	; 171
     d10:	98 9f       	mul	r25, r24
     d12:	81 2d       	mov	r24, r1
     d14:	11 24       	eor	r1, r1
     d16:	82 95       	swap	r24
     d18:	8f 70       	andi	r24, 0x0F	; 15
     d1a:	28 e1       	ldi	r18, 0x18	; 24
     d1c:	82 9f       	mul	r24, r18
     d1e:	90 19       	sub	r25, r0
     d20:	11 24       	eor	r1, r1
     d22:	91 11       	cpse	r25, r1
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <__vector_16+0xba>
		hours = 0;
     d26:	10 92 10 01 	sts	0x0110, r1
	}
	
    //Request the temp
	twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2);
     d2a:	42 e0       	ldi	r20, 0x02	; 2
     d2c:	6d eb       	ldi	r22, 0xBD	; 189
     d2e:	72 e0       	ldi	r23, 0x02	; 2
     d30:	80 e9       	ldi	r24, 0x90	; 144
     d32:	0e 94 3b 0b 	call	0x1676	; 0x1676 <twi_start_rd>
	//Format the local temp data
    lm73_temp = (lm73_rd_buf[0] << 8) | (lm73_rd_buf[1]);
     d36:	80 91 bd 02 	lds	r24, 0x02BD
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	98 2f       	mov	r25, r24
     d3e:	88 27       	eor	r24, r24
     d40:	20 91 be 02 	lds	r18, 0x02BE
     d44:	82 2b       	or	r24, r18
    lm73_temp = lm73_temp >> 7;
     d46:	88 0f       	add	r24, r24
     d48:	89 2f       	mov	r24, r25
     d4a:	88 1f       	adc	r24, r24
     d4c:	99 0b       	sbc	r25, r25
     d4e:	91 95       	neg	r25
     d50:	90 93 96 02 	sts	0x0296, r25
     d54:	80 93 95 02 	sts	0x0295, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d58:	4a e0       	ldi	r20, 0x0A	; 10
     d5a:	63 e9       	ldi	r22, 0x93	; 147
     d5c:	72 e0       	ldi	r23, 0x02	; 2
     d5e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__itoa_ncheck>
    itoa(lm73_temp, tempsensor_string, 10);
    //Send the local data to the LCD array
    lcd_string_array[19] = tempsensor_string[0];
     d62:	80 91 93 02 	lds	r24, 0x0293
     d66:	80 93 25 01 	sts	0x0125, r24
    lcd_string_array[20] = tempsensor_string[1];
     d6a:	80 91 94 02 	lds	r24, 0x0294
     d6e:	80 93 26 01 	sts	0x0126, r24


    //Request the ATmega48 data
    while(!(UCSR0A & (1 << UDRE0)));
     d72:	5d 9b       	sbis	0x0b, 5	; 11
     d74:	fe cf       	rjmp	.-4      	; 0xd72 <__vector_16+0x102>
    UDR0 = 0xF0;
     d76:	80 ef       	ldi	r24, 0xF0	; 240
     d78:	8c b9       	out	0x0c, r24	; 12

	
}
     d7a:	ff 91       	pop	r31
     d7c:	ef 91       	pop	r30
     d7e:	bf 91       	pop	r27
     d80:	af 91       	pop	r26
     d82:	9f 91       	pop	r25
     d84:	8f 91       	pop	r24
     d86:	7f 91       	pop	r23
     d88:	6f 91       	pop	r22
     d8a:	5f 91       	pop	r21
     d8c:	4f 91       	pop	r20
     d8e:	3f 91       	pop	r19
     d90:	2f 91       	pop	r18
     d92:	0f 90       	pop	r0
     d94:	0b be       	out	0x3b, r0	; 59
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti
		mins++;
		seconds = 0;
		//check_alarm();
	}
	if(((mins % 60) == 0) & ((seconds % 60) == 0)){
		hours++;
     da0:	80 91 10 01 	lds	r24, 0x0110
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	80 93 10 01 	sts	0x0110, r24
		mins = 0;
     daa:	10 92 0f 01 	sts	0x010F, r1
     dae:	ad cf       	rjmp	.-166    	; 0xd0a <__vector_16+0x9a>

00000db0 <__vector_12>:


//***********************************************************************
//                            Timer1_OCR1A_Match
//**********************************************************************
ISR(TIMER1_COMPA_vect){
     db0:	1f 92       	push	r1
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	0f 92       	push	r0
     db8:	11 24       	eor	r1, r1
     dba:	8f 93       	push	r24
     dbc:	9f 93       	push	r25
	// Port C must be used for Alarm PWM as OCR1X is used for 7Seg
	PORTC ^= 0X03; //Toggle Bit 0 & 1
     dbe:	95 b3       	in	r25, 0x15	; 21
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	89 27       	eor	r24, r25
     dc4:	85 bb       	out	0x15, r24	; 21

}
     dc6:	9f 91       	pop	r25
     dc8:	8f 91       	pop	r24
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <__vector_10>:


//***********************************************************************
//                            Timer2_overflow_interrupt
//**********************************************************************
ISR(TIMER2_OVF_vect){
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	0b b6       	in	r0, 0x3b	; 59
     de0:	0f 92       	push	r0
     de2:	2f 93       	push	r18
     de4:	3f 93       	push	r19
     de6:	4f 93       	push	r20
     de8:	5f 93       	push	r21
     dea:	6f 93       	push	r22
     dec:	7f 93       	push	r23
     dee:	8f 93       	push	r24
     df0:	9f 93       	push	r25
     df2:	af 93       	push	r26
     df4:	bf 93       	push	r27
     df6:	ef 93       	push	r30
     df8:	ff 93       	push	r31
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
     dfa:	80 91 5a 02 	lds	r24, 0x025A
     dfe:	8f 5f       	subi	r24, 0xFF	; 255
		if((timer_tick > 10)){
     e00:	8b 30       	cpi	r24, 0x0B	; 11
     e02:	a8 f4       	brcc	.+42     	; 0xe2e <__vector_10+0x5a>
//**********************************************************************
ISR(TIMER2_OVF_vect){
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
     e04:	80 93 5a 02 	sts	0x025A, r24
		
			
		refresh_lcd(lcd_string_array);

	}
}
     e08:	ff 91       	pop	r31
     e0a:	ef 91       	pop	r30
     e0c:	bf 91       	pop	r27
     e0e:	af 91       	pop	r26
     e10:	9f 91       	pop	r25
     e12:	8f 91       	pop	r24
     e14:	7f 91       	pop	r23
     e16:	6f 91       	pop	r22
     e18:	5f 91       	pop	r21
     e1a:	4f 91       	pop	r20
     e1c:	3f 91       	pop	r19
     e1e:	2f 91       	pop	r18
     e20:	0f 90       	pop	r0
     e22:	0b be       	out	0x3b, r0	; 59
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
		if((timer_tick > 10)){
		timer_tick = 0;
     e2e:	10 92 5a 02 	sts	0x025A, r1
		check_user_input();
     e32:	0e 94 27 05 	call	0xa4e	; 0xa4e <check_user_input>
//                            check_ADCs
//**********************************************************************
void check_ADCs(){
	// Reads the ADC
	uint8_t adc_result = 0;
	ADCSRA |= (1<<ADSC); //poke ADSC and start conversion
     e36:	36 9a       	sbi	0x06, 6	; 6

	while(bit_is_clear(ADCSRA,ADIF)); //spin while interrupt flag not set
     e38:	34 9b       	sbis	0x06, 4	; 6
     e3a:	fe cf       	rjmp	.-4      	; 0xe38 <__vector_10+0x64>

	ADCSRA |= (1<<ADIF); //its done, clear flag by writing a one
     e3c:	34 9a       	sbi	0x06, 4	; 6

	adc_result = ADCH; //read the ADC output as 16 bits
     e3e:	85 b1       	in	r24, 0x05	; 5
	OCR2 = adc_result; //0x10; //adc_result; //adc_result;
     e40:	83 bd       	out	0x23, r24	; 35
		timer_tick = 0;
		check_user_input();
		check_ADCs();
		
			
		refresh_lcd(lcd_string_array);
     e42:	82 e1       	ldi	r24, 0x12	; 18
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	0e 94 9d 07 	call	0xf3a	; 0xf3a <refresh_lcd>
     e4a:	de cf       	rjmp	.-68     	; 0xe08 <__vector_10+0x34>

00000e4c <__vector_9>:
	}
}



ISR(TIMER2_COMP_vect){
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
        //TO DO
}
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <__vector_18>:

//***********************************************************************
//                            USART0_recieve_interrupt
//**********************************************************************
//Get the temp from the ATMega48
ISR(USART0_RX_vect) {
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	0b b6       	in	r0, 0x3b	; 59
     e6c:	0f 92       	push	r0
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31

	//Process the recieved ATmega48 data to the LCD
    if(first_byte == TRUE){
     e86:	80 91 0b 01 	lds	r24, 0x010B
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	d1 f0       	breq	.+52     	; 0xec2 <__vector_18+0x62>
    	lcd_string_array[25] = uart_getc();
    	first_byte = FALSE;
    }else{
    	lcd_string_array[26] = uart_getc();
     e8e:	0e 94 b7 0b 	call	0x176e	; 0x176e <uart_getc>
     e92:	80 93 2c 01 	sts	0x012C, r24
    	first_byte = TRUE;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	80 93 0b 01 	sts	0x010B, r24
    }
}
     e9c:	ff 91       	pop	r31
     e9e:	ef 91       	pop	r30
     ea0:	bf 91       	pop	r27
     ea2:	af 91       	pop	r26
     ea4:	9f 91       	pop	r25
     ea6:	8f 91       	pop	r24
     ea8:	7f 91       	pop	r23
     eaa:	6f 91       	pop	r22
     eac:	5f 91       	pop	r21
     eae:	4f 91       	pop	r20
     eb0:	3f 91       	pop	r19
     eb2:	2f 91       	pop	r18
     eb4:	0f 90       	pop	r0
     eb6:	0b be       	out	0x3b, r0	; 59
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0
     ebe:	1f 90       	pop	r1
     ec0:	18 95       	reti
//Get the temp from the ATMega48
ISR(USART0_RX_vect) {

	//Process the recieved ATmega48 data to the LCD
    if(first_byte == TRUE){
    	lcd_string_array[25] = uart_getc();
     ec2:	0e 94 b7 0b 	call	0x176e	; 0x176e <uart_getc>
     ec6:	80 93 2b 01 	sts	0x012B, r24
    	first_byte = FALSE;
     eca:	10 92 0b 01 	sts	0x010B, r1
     ece:	e6 cf       	rjmp	.-52     	; 0xe9c <__vector_18+0x3c>

00000ed0 <radio_reset>:
}


void radio_reset(){
	//Code given by rodger
	DDRE  |= 0x04; //Port E bit 2 is active high reset for radio
     ed0:	12 9a       	sbi	0x02, 2	; 2
	PORTE |= 0x04; //radio reset is on at powerup (active high)
     ed2:	1a 9a       	sbi	0x03, 2	; 3

	//hardware reset of Si4734
	 PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
     ed4:	1f 98       	cbi	0x03, 7	; 3
	 DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
     ed6:	17 9a       	sbi	0x02, 7	; 2
	 PORTE |=  (1<<PE2); //hardware reset Si4734
     ed8:	1a 9a       	sbi	0x03, 2	; 3
     eda:	8f e1       	ldi	r24, 0x1F	; 31
     edc:	93 e0       	ldi	r25, 0x03	; 3
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <radio_reset+0xe>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <radio_reset+0x14>
     ee4:	00 00       	nop
	 _delay_us(200);     //hold for 200us, 100us by spec
	 PORTE &= ~(1<<PE2); //release reset
     ee6:	1a 98       	cbi	0x03, 2	; 3
     ee8:	90 ea       	ldi	r25, 0xA0	; 160
     eea:	9a 95       	dec	r25
     eec:	f1 f7       	brne	.-4      	; 0xeea <radio_reset+0x1a>
	 _delay_us(30);      //5us required because of my slow I2C translators I suspect
							//Si code in "low" has 30us delay...no explaination
	 DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
     eee:	17 98       	cbi	0x02, 7	; 2
     ef0:	08 95       	ret

00000ef2 <__vector_8>:
//******************************************************************************
// External interrupt 7 is on Port E bit 7. The interrupt is triggered on the
// rising edge of Port E bit 7.  The i/o clock must be running to detect the
// edge (not asynchronouslly triggered)
//******************************************************************************
ISR(INT7_vect){STC_interrupt = TRUE;}
     ef2:	1f 92       	push	r1
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	0f 92       	push	r0
     efa:	11 24       	eor	r1, r1
     efc:	8f 93       	push	r24
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 93 85 03 	sts	0x0385, r24
     f04:	8f 91       	pop	r24
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0
     f0c:	1f 90       	pop	r1
     f0e:	18 95       	reti

00000f10 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	81 11       	cpse	r24, r1
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <send_lcd+0x8>
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f1a:	77 9b       	sbis	0x0e, 7	; 14
     f1c:	fe cf       	rjmp	.-4      	; 0xf1a <send_lcd+0xa>
  SPDR = byte;                        //send payload
     f1e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f20:	77 9b       	sbis	0x0e, 7	; 14
     f22:	fe cf       	rjmp	.-4      	; 0xf20 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f24:	80 91 62 00 	lds	r24, 0x0062
     f28:	88 60       	ori	r24, 0x08	; 8
     f2a:	80 93 62 00 	sts	0x0062, r24
     f2e:	80 91 62 00 	lds	r24, 0x0062
     f32:	87 7f       	andi	r24, 0xF7	; 247
     f34:	80 93 62 00 	sts	0x0062, r24
     f38:	08 95       	ret

00000f3a <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
     f3a:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     f3c:	c0 91 6b 02 	lds	r28, 0x026B
     f40:	8c 0f       	add	r24, r28
     f42:	91 1d       	adc	r25, r1
     f44:	fc 01       	movw	r30, r24
     f46:	60 81       	ld	r22, Z
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
 i++;   //increment to next character
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	8c 0f       	add	r24, r28
     f52:	80 93 6b 02 	sts	0x026B, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     f56:	80 31       	cpi	r24, 0x10	; 16
     f58:	81 f0       	breq	.+32     	; 0xf7a <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     f5a:	80 32       	cpi	r24, 0x20	; 32
     f5c:	11 f0       	breq	.+4      	; 0xf62 <refresh_lcd+0x28>
}//refresh_lcd
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret
     f62:	85 ed       	ldi	r24, 0xD5	; 213
     f64:	8a 95       	dec	r24
     f66:	f1 f7       	brne	.-4      	; 0xf64 <refresh_lcd+0x2a>
     f68:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     f6a:	60 e8       	ldi	r22, 0x80	; 128
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     f72:	10 92 6b 02 	sts	0x026B, r1
}//refresh_lcd
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret
     f7a:	f5 ed       	ldi	r31, 0xD5	; 213
     f7c:	fa 95       	dec	r31
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <refresh_lcd+0x42>
     f80:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     f82:	60 ec       	ldi	r22, 0xC0	; 192
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
     f8a:	80 91 6b 02 	lds	r24, 0x026B
     f8e:	e5 cf       	rjmp	.-54     	; 0xf5a <refresh_lcd+0x20>

00000f90 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	1f 92       	push	r1
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     fa4:	66 0f       	add	r22, r22
     fa6:	66 0f       	add	r22, r22
     fa8:	66 0f       	add	r22, r22
     faa:	60 5c       	subi	r22, 0xC0	; 192
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	99 83       	std	Y+1, r25	; 0x01
     fb0:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
     fb4:	85 ed       	ldi	r24, 0xD5	; 213
     fb6:	8a 95       	dec	r24
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <set_custom_character+0x26>
     fba:	00 00       	nop
     fbc:	e1 2e       	mov	r14, r17
     fbe:	99 81       	ldd	r25, Y+1	; 0x01
     fc0:	f9 2e       	mov	r15, r25
     fc2:	87 01       	movw	r16, r14
     fc4:	08 5f       	subi	r16, 0xF8	; 248
     fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     fc8:	f7 01       	movw	r30, r14
     fca:	61 91       	ld	r22, Z+
     fcc:	7f 01       	movw	r14, r30
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
     fd4:	f5 ed       	ldi	r31, 0xD5	; 213
     fd6:	fa 95       	dec	r31
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <set_custom_character+0x46>
     fda:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     fdc:	e0 16       	cp	r14, r16
     fde:	f1 06       	cpc	r15, r17
     fe0:	99 f7       	brne	.-26     	; 0xfc8 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     fe2:	0f 90       	pop	r0
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	08 95       	ret

00000ff2 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     ff2:	90 e4       	ldi	r25, 0x40	; 64
     ff4:	89 9f       	mul	r24, r25
     ff6:	60 0d       	add	r22, r0
     ff8:	11 24       	eor	r1, r1
     ffa:	60 5c       	subi	r22, 0xC0	; 192
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

00001002 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    1002:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    1004:	88 23       	and	r24, r24
    1006:	b9 f1       	breq	.+110    	; 0x1076 <uint2lcd+0x74>
    1008:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    100a:	84 36       	cpi	r24, 0x64	; 100
    100c:	98 f4       	brcc	.+38     	; 0x1034 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    100e:	8a 30       	cpi	r24, 0x0A	; 10
    1010:	d8 f4       	brcc	.+54     	; 0x1048 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1012:	8d ec       	ldi	r24, 0xCD	; 205
    1014:	c8 9f       	mul	r28, r24
    1016:	81 2d       	mov	r24, r1
    1018:	11 24       	eor	r1, r1
    101a:	86 95       	lsr	r24
    101c:	86 95       	lsr	r24
    101e:	86 95       	lsr	r24
    1020:	6c 2f       	mov	r22, r28
    1022:	2a e0       	ldi	r18, 0x0A	; 10
    1024:	82 9f       	mul	r24, r18
    1026:	60 19       	sub	r22, r0
    1028:	11 24       	eor	r1, r1
    102a:	60 5d       	subi	r22, 0xD0	; 208
    102c:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    102e:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1030:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1034:	69 e2       	ldi	r22, 0x29	; 41
    1036:	86 9f       	mul	r24, r22
    1038:	61 2d       	mov	r22, r1
    103a:	11 24       	eor	r1, r1
    103c:	62 95       	swap	r22
    103e:	6f 70       	andi	r22, 0x0F	; 15
    1040:	60 5d       	subi	r22, 0xD0	; 208
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1048:	89 e2       	ldi	r24, 0x29	; 41
    104a:	c8 9f       	mul	r28, r24
    104c:	81 2d       	mov	r24, r1
    104e:	11 24       	eor	r1, r1
    1050:	82 95       	swap	r24
    1052:	8f 70       	andi	r24, 0x0F	; 15
    1054:	9c 2f       	mov	r25, r28
    1056:	24 e6       	ldi	r18, 0x64	; 100
    1058:	82 9f       	mul	r24, r18
    105a:	90 19       	sub	r25, r0
    105c:	11 24       	eor	r1, r1
    105e:	6d ec       	ldi	r22, 0xCD	; 205
    1060:	96 9f       	mul	r25, r22
    1062:	61 2d       	mov	r22, r1
    1064:	11 24       	eor	r1, r1
    1066:	66 95       	lsr	r22
    1068:	66 95       	lsr	r22
    106a:	66 95       	lsr	r22
    106c:	60 5d       	subi	r22, 0xD0	; 208
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1074:	ce cf       	rjmp	.-100    	; 0x1012 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    1076:	60 e3       	ldi	r22, 0x30	; 48
    1078:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
    107a:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    107c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

00001080 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    1080:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1082:	87 fd       	sbrc	r24, 7
    1084:	03 c0       	rjmp	.+6      	; 0x108c <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
    1086:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
    1088:	0c 94 01 08 	jmp	0x1002	; 0x1002 <uint2lcd>
    108c:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    108e:	6d e2       	ldi	r22, 0x2D	; 45
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1096:	85 ed       	ldi	r24, 0xD5	; 213
    1098:	8a 95       	dec	r24
    109a:	f1 f7       	brne	.-4      	; 0x1098 <int2lcd+0x18>
    109c:	00 00       	nop
    109e:	8c 2f       	mov	r24, r28
    10a0:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
    10a2:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    10a4:	0c 94 01 08 	jmp	0x1002	; 0x1002 <uint2lcd>

000010a8 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
    10a8:	6e e0       	ldi	r22, 0x0E	; 14
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

000010b0 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
    10b0:	6c e0       	ldi	r22, 0x0C	; 12
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

000010b8 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
    10b8:	6e e1       	ldi	r22, 0x1E	; 30
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

000010c0 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
    10c0:	68 e1       	ldi	r22, 0x18	; 24
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

000010c8 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10c8:	e2 e6       	ldi	r30, 0x62	; 98
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	88 60       	ori	r24, 0x08	; 8
    10d0:	80 83       	st	Z, r24
    10d2:	80 81       	ld	r24, Z
    10d4:	87 7f       	andi	r24, 0xF7	; 247
    10d6:	80 83       	st	Z, r24
    10d8:	08 95       	ret

000010da <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    10e2:	8f e1       	ldi	r24, 0x1F	; 31
    10e4:	9c e1       	ldi	r25, 0x1C	; 28
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <clear_display+0xc>
    10ea:	00 c0       	rjmp	.+0      	; 0x10ec <clear_display+0x12>
    10ec:	00 00       	nop
    10ee:	08 95       	ret

000010f0 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
    10f0:	62 e0       	ldi	r22, 0x02	; 2
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    10f8:	8f e6       	ldi	r24, 0x6F	; 111
    10fa:	97 e1       	ldi	r25, 0x17	; 23
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <cursor_home+0xc>
    1100:	00 c0       	rjmp	.+0      	; 0x1102 <__stack+0x3>
    1102:	00 00       	nop
    1104:	08 95       	ret

00001106 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    1106:	60 ec       	ldi	r22, 0xC0	; 192
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

0000110e <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    110e:	60 e8       	ldi	r22, 0x80	; 128
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

00001116 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    1116:	cf 93       	push	r28
    1118:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
    111a:	60 e2       	ldi	r22, 0x20	; 32
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1122:	85 ed       	ldi	r24, 0xD5	; 213
    1124:	8a 95       	dec	r24
    1126:	f1 f7       	brne	.-4      	; 0x1124 <fill_spaces+0xe>
    1128:	00 00       	nop
    112a:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    112c:	b1 f7       	brne	.-20     	; 0x111a <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    112e:	cf 91       	pop	r28
    1130:	08 95       	ret

00001132 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
    1132:	68 2f       	mov	r22, r24
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

0000113a <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	c0 e0       	ldi	r28, 0x00	; 0
    1148:	f8 01       	movw	r30, r16
    114a:	e4 0f       	add	r30, r20
    114c:	f5 1f       	adc	r31, r21
    114e:	60 81       	ld	r22, Z
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1156:	85 ed       	ldi	r24, 0xD5	; 213
    1158:	8a 95       	dec	r24
    115a:	f1 f7       	brne	.-4      	; 0x1158 <string2lcd+0x1e>
    115c:	00 00       	nop
    115e:	cf 5f       	subi	r28, 0xFF	; 255
    1160:	4c 2f       	mov	r20, r28
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	f8 01       	movw	r30, r16
    1166:	01 90       	ld	r0, Z+
    1168:	00 20       	and	r0, r0
    116a:	e9 f7       	brne	.-6      	; 0x1166 <string2lcd+0x2c>
    116c:	9f 01       	movw	r18, r30
    116e:	20 1b       	sub	r18, r16
    1170:	31 0b       	sbc	r19, r17
    1172:	22 50       	subi	r18, 0x02	; 2
    1174:	31 09       	sbc	r19, r1
    1176:	24 17       	cp	r18, r20
    1178:	35 07       	cpc	r19, r21
    117a:	30 f7       	brcc	.-52     	; 0x1148 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	08 95       	ret

00001184 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	99 ef       	ldi	r25, 0xF9	; 249
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <lcd_init+0x4>
    118c:	00 c0       	rjmp	.+0      	; 0x118e <lcd_init+0xa>
    118e:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1190:	88 e0       	ldi	r24, 0x08	; 8
    1192:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
    1196:	60 e3       	ldi	r22, 0x30	; 48
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    119e:	8f e5       	ldi	r24, 0x5F	; 95
    11a0:	9d e6       	ldi	r25, 0x6D	; 109
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <lcd_init+0x1e>
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <lcd_init+0x24>
    11a8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    11aa:	60 e3       	ldi	r22, 0x30	; 48
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    11b2:	8f e5       	ldi	r24, 0x5F	; 95
    11b4:	9d e6       	ldi	r25, 0x6D	; 109
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <lcd_init+0x32>
    11ba:	00 c0       	rjmp	.+0      	; 0x11bc <lcd_init+0x38>
    11bc:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    11be:	60 e3       	ldi	r22, 0x30	; 48
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    11c6:	8f e5       	ldi	r24, 0x5F	; 95
    11c8:	9d e6       	ldi	r25, 0x6D	; 109
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <lcd_init+0x46>
    11ce:	00 c0       	rjmp	.+0      	; 0x11d0 <lcd_init+0x4c>
    11d0:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
    11d2:	68 e3       	ldi	r22, 0x38	; 56
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    11da:	8f e1       	ldi	r24, 0x1F	; 31
    11dc:	9e e4       	ldi	r25, 0x4E	; 78
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <lcd_init+0x5a>
    11e2:	00 c0       	rjmp	.+0      	; 0x11e4 <lcd_init+0x60>
    11e4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
    11e6:	68 e0       	ldi	r22, 0x08	; 8
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    11ee:	8f e1       	ldi	r24, 0x1F	; 31
    11f0:	9e e4       	ldi	r25, 0x4E	; 78
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <lcd_init+0x6e>
    11f6:	00 c0       	rjmp	.+0      	; 0x11f8 <lcd_init+0x74>
    11f8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1202:	8f e1       	ldi	r24, 0x1F	; 31
    1204:	9e e4       	ldi	r25, 0x4E	; 78
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	f1 f7       	brne	.-4      	; 0x1206 <lcd_init+0x82>
    120a:	00 c0       	rjmp	.+0      	; 0x120c <lcd_init+0x88>
    120c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
    120e:	66 e0       	ldi	r22, 0x06	; 6
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1216:	8f e1       	ldi	r24, 0x1F	; 31
    1218:	9e e4       	ldi	r25, 0x4E	; 78
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <lcd_init+0x96>
    121e:	00 c0       	rjmp	.+0      	; 0x1220 <lcd_init+0x9c>
    1220:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
    1222:	6c e0       	ldi	r22, 0x0C	; 12
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    122a:	8f e1       	ldi	r24, 0x1F	; 31
    122c:	9e e4       	ldi	r25, 0x4E	; 78
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <lcd_init+0xaa>
    1232:	00 c0       	rjmp	.+0      	; 0x1234 <lcd_init+0xb0>
    1234:	00 00       	nop
    1236:	08 95       	ret

00001238 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    1238:	8f 92       	push	r8
    123a:	9f 92       	push	r9
    123c:	af 92       	push	r10
    123e:	bf 92       	push	r11
    1240:	cf 92       	push	r12
    1242:	df 92       	push	r13
    1244:	ef 92       	push	r14
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	69 97       	sbiw	r28, 0x19	; 25
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	f4 2e       	mov	r15, r20
    1262:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    1264:	00 23       	and	r16, r16
    1266:	59 f0       	breq	.+22     	; 0x127e <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    1268:	4b 01       	movw	r8, r22
    126a:	5c 01       	movw	r10, r24
    126c:	88 24       	eor	r8, r8
    126e:	b7 fc       	sbrc	r11, 7
    1270:	83 94       	inc	r8
    1272:	99 24       	eor	r9, r9
    1274:	aa 24       	eor	r10, r10
    1276:	bb 24       	eor	r11, r11
    1278:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    127a:	97 fd       	sbrc	r25, 7
    127c:	8f c0       	rjmp	.+286    	; 0x139c <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    127e:	11 23       	and	r17, r17
    1280:	09 f4       	brne	.+2      	; 0x1284 <lcd_int32+0x4c>
    1282:	84 c0       	rjmp	.+264    	; 0x138c <lcd_int32+0x154>
    1284:	9e 01       	movw	r18, r28
    1286:	2f 5f       	subi	r18, 0xFF	; 255
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	69 01       	movw	r12, r18
    128c:	59 01       	movw	r10, r18
    128e:	88 24       	eor	r8, r8
    1290:	8a 94       	dec	r8
    1292:	81 0e       	add	r8, r17
    1294:	91 2c       	mov	r9, r1
    1296:	3f ef       	ldi	r19, 0xFF	; 255
    1298:	83 1a       	sub	r8, r19
    129a:	93 0a       	sbc	r9, r19
    129c:	8c 0c       	add	r8, r12
    129e:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    12a0:	2a e0       	ldi	r18, 0x0A	; 10
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__divmodsi4>
    12ac:	e6 2f       	mov	r30, r22
    12ae:	2a 8b       	std	Y+18, r18	; 0x12
    12b0:	3b 8b       	std	Y+19, r19	; 0x13
    12b2:	4c 8b       	std	Y+20, r20	; 0x14
    12b4:	5d 8b       	std	Y+21, r21	; 0x15
    12b6:	6a 89       	ldd	r22, Y+18	; 0x12
    12b8:	7b 89       	ldd	r23, Y+19	; 0x13
    12ba:	8c 89       	ldd	r24, Y+20	; 0x14
    12bc:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    12be:	20 e3       	ldi	r18, 0x30	; 48
    12c0:	2e 0f       	add	r18, r30
    12c2:	f5 01       	movw	r30, r10
    12c4:	21 93       	st	Z+, r18
    12c6:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    12c8:	e8 15       	cp	r30, r8
    12ca:	f9 05       	cpc	r31, r9
    12cc:	49 f7       	brne	.-46     	; 0x12a0 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    12ce:	bb 24       	eor	r11, r11
    12d0:	b3 94       	inc	r11
    12d2:	b1 0e       	add	r11, r17
    12d4:	f6 01       	movw	r30, r12
    12d6:	e1 0f       	add	r30, r17
    12d8:	f1 1d       	adc	r31, r1
    12da:	2e e2       	ldi	r18, 0x2E	; 46
    12dc:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    12de:	2a e0       	ldi	r18, 0x0A	; 10
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__divmodsi4>
    12ea:	e6 2f       	mov	r30, r22
    12ec:	2a 8b       	std	Y+18, r18	; 0x12
    12ee:	3b 8b       	std	Y+19, r19	; 0x13
    12f0:	4c 8b       	std	Y+20, r20	; 0x14
    12f2:	5d 8b       	std	Y+21, r21	; 0x15
    12f4:	6e 8b       	std	Y+22, r22	; 0x16
    12f6:	7f 8b       	std	Y+23, r23	; 0x17
    12f8:	88 8f       	std	Y+24, r24	; 0x18
    12fa:	99 8f       	std	Y+25, r25	; 0x19
    12fc:	6a 89       	ldd	r22, Y+18	; 0x12
    12fe:	7b 89       	ldd	r23, Y+19	; 0x13
    1300:	8c 89       	ldd	r24, Y+20	; 0x14
    1302:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1304:	11 e0       	ldi	r17, 0x01	; 1
    1306:	1b 0d       	add	r17, r11
    1308:	d6 01       	movw	r26, r12
    130a:	ab 0d       	add	r26, r11
    130c:	b1 1d       	adc	r27, r1
    130e:	e0 5d       	subi	r30, 0xD0	; 208
    1310:	ec 93       	st	X, r30
    1312:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    1314:	61 15       	cp	r22, r1
    1316:	71 05       	cpc	r23, r1
    1318:	81 05       	cpc	r24, r1
    131a:	91 05       	cpc	r25, r1
    131c:	01 f7       	brne	.-64     	; 0x12de <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    131e:	ff 20       	and	r15, r15
    1320:	61 f0       	breq	.+24     	; 0x133a <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1322:	e1 10       	cpse	r14, r1
    1324:	39 c0       	rjmp	.+114    	; 0x1398 <lcd_int32+0x160>
    1326:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1328:	1f 15       	cp	r17, r15
    132a:	38 f4       	brcc	.+14     	; 0x133a <lcd_int32+0x102>
    132c:	f6 01       	movw	r30, r12
    132e:	e1 0f       	add	r30, r17
    1330:	f1 1d       	adc	r31, r1
    1332:	80 83       	st	Z, r24
    1334:	1f 5f       	subi	r17, 0xFF	; 255
    1336:	1f 11       	cpse	r17, r15
    1338:	f9 cf       	rjmp	.-14     	; 0x132c <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    133a:	00 23       	and	r16, r16
    133c:	31 f0       	breq	.+12     	; 0x134a <lcd_int32+0x112>
    133e:	f6 01       	movw	r30, r12
    1340:	e1 0f       	add	r30, r17
    1342:	f1 1d       	adc	r31, r1
    1344:	8d e2       	ldi	r24, 0x2D	; 45
    1346:	80 83       	st	Z, r24
    1348:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    134a:	11 50       	subi	r17, 0x01	; 1
    134c:	f6 01       	movw	r30, r12
    134e:	e1 0f       	add	r30, r17
    1350:	f1 1d       	adc	r31, r1
    1352:	60 81       	ld	r22, Z
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    135a:	35 ed       	ldi	r19, 0xD5	; 213
    135c:	3a 95       	dec	r19
    135e:	f1 f7       	brne	.-4      	; 0x135c <lcd_int32+0x124>
    1360:	00 00       	nop
    1362:	11 11       	cpse	r17, r1
    1364:	f2 cf       	rjmp	.-28     	; 0x134a <lcd_int32+0x112>

}
    1366:	69 96       	adiw	r28, 0x19	; 25
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	9f 90       	pop	r9
    1388:	8f 90       	pop	r8
    138a:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    138c:	b1 2c       	mov	r11, r1
    138e:	9e 01       	movw	r18, r28
    1390:	2f 5f       	subi	r18, 0xFF	; 255
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
    1394:	69 01       	movw	r12, r18
    1396:	a3 cf       	rjmp	.-186    	; 0x12de <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1398:	80 e3       	ldi	r24, 0x30	; 48
    139a:	c6 cf       	rjmp	.-116    	; 0x1328 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    139c:	90 95       	com	r25
    139e:	80 95       	com	r24
    13a0:	70 95       	com	r23
    13a2:	61 95       	neg	r22
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	8f 4f       	sbci	r24, 0xFF	; 255
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	69 cf       	rjmp	.-302    	; 0x127e <lcd_int32+0x46>

000013ac <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
    13ac:	5f 92       	push	r5
    13ae:	6f 92       	push	r6
    13b0:	7f 92       	push	r7
    13b2:	8f 92       	push	r8
    13b4:	9f 92       	push	r9
    13b6:	af 92       	push	r10
    13b8:	bf 92       	push	r11
    13ba:	cf 92       	push	r12
    13bc:	df 92       	push	r13
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	61 97       	sbiw	r28, 0x11	; 17
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	a6 2e       	mov	r10, r22
    13dc:	54 2e       	mov	r5, r20
    13de:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    13e0:	79 2e       	mov	r7, r25
    13e2:	77 1c       	adc	r7, r7
    13e4:	77 24       	eor	r7, r7
    13e6:	77 1c       	adc	r7, r7
    13e8:	b7 2c       	mov	r11, r7
    13ea:	c7 2c       	mov	r12, r7
    13ec:	d1 2c       	mov	r13, r1
    13ee:	ee 27       	eor	r30, r30
    13f0:	ff 27       	eor	r31, r31
    13f2:	ec 19       	sub	r30, r12
    13f4:	fd 09       	sbc	r31, r13
    13f6:	8e 27       	eor	r24, r30
    13f8:	9f 27       	eor	r25, r31
    13fa:	fc 01       	movw	r30, r24
    13fc:	ec 0d       	add	r30, r12
    13fe:	fd 1d       	adc	r31, r13
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
    1400:	44 23       	and	r20, r20
    1402:	09 f4       	brne	.+2      	; 0x1406 <lcd_int16+0x5a>
    1404:	8e c0       	rjmp	.+284    	; 0x1522 <lcd_int16+0x176>
    1406:	ce 01       	movw	r24, r28
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	7c 01       	movw	r14, r24
    140c:	8c 01       	movw	r16, r24
    140e:	88 24       	eor	r8, r8
    1410:	8a 94       	dec	r8
    1412:	84 0e       	add	r8, r20
    1414:	91 2c       	mov	r9, r1
    1416:	9f ef       	ldi	r25, 0xFF	; 255
    1418:	89 1a       	sub	r8, r25
    141a:	99 0a       	sbc	r9, r25
    141c:	8e 0c       	add	r8, r14
    141e:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    1420:	6a e0       	ldi	r22, 0x0A	; 10
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	cf 01       	movw	r24, r30
    1426:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__divmodhi4>
    142a:	26 2f       	mov	r18, r22
    142c:	e2 2f       	mov	r30, r18
    142e:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
    1430:	80 5d       	subi	r24, 0xD0	; 208
    1432:	d8 01       	movw	r26, r16
    1434:	8d 93       	st	X+, r24
    1436:	8d 01       	movw	r16, r26
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
    1438:	a8 15       	cp	r26, r8
    143a:	b9 05       	cpc	r27, r9
    143c:	89 f7       	brne	.-30     	; 0x1420 <lcd_int16+0x74>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    143e:	01 e0       	ldi	r16, 0x01	; 1
    1440:	05 0d       	add	r16, r5
    1442:	d7 01       	movw	r26, r14
    1444:	a5 0d       	add	r26, r5
    1446:	b1 1d       	adc	r27, r1
    1448:	8e e2       	ldi	r24, 0x2E	; 46
    144a:	8c 93       	st	X, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
    144c:	6a e0       	ldi	r22, 0x0A	; 10
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	cf 01       	movw	r24, r30
    1452:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__divmodhi4>
    1456:	26 2f       	mov	r18, r22
    1458:	e2 2f       	mov	r30, r18
    145a:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
    145c:	11 e0       	ldi	r17, 0x01	; 1
    145e:	10 0f       	add	r17, r16
    1460:	d7 01       	movw	r26, r14
    1462:	a0 0f       	add	r26, r16
    1464:	b1 1d       	adc	r27, r1
    1466:	80 5d       	subi	r24, 0xD0	; 208
    1468:	8c 93       	st	X, r24
    146a:	01 2f       	mov	r16, r17
        }
        while(qr.quot);
    146c:	30 97       	sbiw	r30, 0x00	; 0
    146e:	71 f7       	brne	.-36     	; 0x144c <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
    1470:	61 10       	cpse	r6, r1
    1472:	15 c0       	rjmp	.+42     	; 0x149e <lcd_int16+0xf2>
    1474:	77 20       	and	r7, r7
    1476:	39 f0       	breq	.+14     	; 0x1486 <lcd_int16+0xda>
        {
                sline[i++] = '-';
    1478:	11 e0       	ldi	r17, 0x01	; 1
    147a:	10 0f       	add	r17, r16
    147c:	f7 01       	movw	r30, r14
    147e:	e0 0f       	add	r30, r16
    1480:	f1 1d       	adc	r31, r1
    1482:	8d e2       	ldi	r24, 0x2D	; 45
    1484:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    1486:	aa 20       	and	r10, r10
    1488:	41 f1       	breq	.+80     	; 0x14da <lcd_int16+0x12e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    148a:	81 2f       	mov	r24, r17
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	2a 2d       	mov	r18, r10
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	82 17       	cp	r24, r18
    1494:	93 07       	cpc	r25, r19
    1496:	0c f5       	brge	.+66     	; 0x14da <lcd_int16+0x12e>
    1498:	b1 2c       	mov	r11, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	0c c0       	rjmp	.+24     	; 0x14b6 <lcd_int16+0x10a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    149e:	aa 20       	and	r10, r10
    14a0:	a1 f0       	breq	.+40     	; 0x14ca <lcd_int16+0x11e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    14a2:	81 2f       	mov	r24, r17
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	2a 2d       	mov	r18, r10
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	2c 19       	sub	r18, r12
    14ac:	3d 09       	sbc	r19, r13
    14ae:	82 17       	cp	r24, r18
    14b0:	93 07       	cpc	r25, r19
    14b2:	5c f4       	brge	.+22     	; 0x14ca <lcd_int16+0x11e>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    14b4:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    14b6:	1f 5f       	subi	r17, 0xFF	; 255
    14b8:	f7 01       	movw	r30, r14
    14ba:	e8 0f       	add	r30, r24
    14bc:	f9 1f       	adc	r31, r25
    14be:	40 83       	st	Z, r20
    14c0:	81 2f       	mov	r24, r17
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	82 17       	cp	r24, r18
    14c6:	93 07       	cpc	r25, r19
    14c8:	b4 f3       	brlt	.-20     	; 0x14b6 <lcd_int16+0x10a>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
    14ca:	bb 20       	and	r11, r11
    14cc:	31 f0       	breq	.+12     	; 0x14da <lcd_int16+0x12e>
    14ce:	f7 01       	movw	r30, r14
    14d0:	e1 0f       	add	r30, r17
    14d2:	f1 1d       	adc	r31, r1
    14d4:	8d e2       	ldi	r24, 0x2D	; 45
    14d6:	80 83       	st	Z, r24
    14d8:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    14da:	11 50       	subi	r17, 0x01	; 1
    14dc:	f7 01       	movw	r30, r14
    14de:	e1 0f       	add	r30, r17
    14e0:	f1 1d       	adc	r31, r1
    14e2:	60 81       	ld	r22, Z
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    14ea:	95 ed       	ldi	r25, 0xD5	; 213
    14ec:	9a 95       	dec	r25
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <lcd_int16+0x140>
    14f0:	00 00       	nop
    14f2:	11 11       	cpse	r17, r1
    14f4:	f2 cf       	rjmp	.-28     	; 0x14da <lcd_int16+0x12e>
}
    14f6:	61 96       	adiw	r28, 0x11	; 17
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	df 90       	pop	r13
    1510:	cf 90       	pop	r12
    1512:	bf 90       	pop	r11
    1514:	af 90       	pop	r10
    1516:	9f 90       	pop	r9
    1518:	8f 90       	pop	r8
    151a:	7f 90       	pop	r7
    151c:	6f 90       	pop	r6
    151e:	5f 90       	pop	r5
    1520:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    1522:	00 e0       	ldi	r16, 0x00	; 0
    1524:	ce 01       	movw	r24, r28
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	7c 01       	movw	r14, r24
    152a:	90 cf       	rjmp	.-224    	; 0x144c <lcd_int16+0xa0>

0000152c <lm73_temp_convert>:
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

//Yeah, this is for you to do! ;^)

}//lm73_temp_convert
    152c:	08 95       	ret

0000152e <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    152e:	1f 92       	push	r1
    1530:	0f 92       	push	r0
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	0f 92       	push	r0
    1536:	11 24       	eor	r1, r1
    1538:	0b b6       	in	r0, 0x3b	; 59
    153a:	0f 92       	push	r0
    153c:	2f 93       	push	r18
    153e:	3f 93       	push	r19
    1540:	8f 93       	push	r24
    1542:	9f 93       	push	r25
    1544:	af 93       	push	r26
    1546:	bf 93       	push	r27
    1548:	ef 93       	push	r30
    154a:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    154c:	e0 91 71 00 	lds	r30, 0x0071
    1550:	8e 2f       	mov	r24, r30
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	fc 01       	movw	r30, r24
    1556:	38 97       	sbiw	r30, 0x08	; 8
    1558:	e1 35       	cpi	r30, 0x51	; 81
    155a:	f1 05       	cpc	r31, r1
    155c:	b0 f0       	brcs	.+44     	; 0x158a <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    155e:	80 91 71 00 	lds	r24, 0x0071
    1562:	80 93 bf 02 	sts	0x02BF, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    1566:	84 e0       	ldi	r24, 0x04	; 4
    1568:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    156c:	ff 91       	pop	r31
    156e:	ef 91       	pop	r30
    1570:	bf 91       	pop	r27
    1572:	af 91       	pop	r26
    1574:	9f 91       	pop	r25
    1576:	8f 91       	pop	r24
    1578:	3f 91       	pop	r19
    157a:	2f 91       	pop	r18
    157c:	0f 90       	pop	r0
    157e:	0b be       	out	0x3b, r0	; 59
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    158a:	ea 5b       	subi	r30, 0xBA	; 186
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1592:	80 91 6c 02 	lds	r24, 0x026C
    1596:	e0 91 c0 02 	lds	r30, 0x02C0
    159a:	f0 91 c1 02 	lds	r31, 0x02C1
    159e:	e8 0f       	add	r30, r24
    15a0:	f1 1d       	adc	r31, r1
    15a2:	80 91 73 00 	lds	r24, 0x0073
    15a6:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    15a8:	84 e9       	ldi	r24, 0x94	; 148
    15aa:	80 93 74 00 	sts	0x0074, r24
      break;      
    15ae:	de cf       	rjmp	.-68     	; 0x156c <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    15b0:	80 91 c2 02 	lds	r24, 0x02C2
    15b4:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    15b8:	10 92 6c 02 	sts	0x026C, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    15bc:	85 e8       	ldi	r24, 0x85	; 133
    15be:	80 93 74 00 	sts	0x0074, r24
      break;
    15c2:	d4 cf       	rjmp	.-88     	; 0x156c <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    15c4:	80 91 6c 02 	lds	r24, 0x026C
    15c8:	90 91 c3 02 	lds	r25, 0x02C3
    15cc:	89 17       	cp	r24, r25
    15ce:	60 f7       	brcc	.-40     	; 0x15a8 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    15d0:	e0 91 c0 02 	lds	r30, 0x02C0
    15d4:	f0 91 c1 02 	lds	r31, 0x02C1
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	98 0f       	add	r25, r24
    15dc:	90 93 6c 02 	sts	0x026C, r25
    15e0:	e8 0f       	add	r30, r24
    15e2:	f1 1d       	adc	r31, r1
    15e4:	80 81       	ld	r24, Z
    15e6:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
    15ea:	85 e8       	ldi	r24, 0x85	; 133
    15ec:	80 93 74 00 	sts	0x0074, r24
    15f0:	bd cf       	rjmp	.-134    	; 0x156c <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    15f2:	85 ea       	ldi	r24, 0xA5	; 165
    15f4:	80 93 74 00 	sts	0x0074, r24
      break;
    15f8:	b9 cf       	rjmp	.-142    	; 0x156c <__vector_33+0x3e>
    15fa:	20 91 6c 02 	lds	r18, 0x026C
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    15fe:	80 91 c3 02 	lds	r24, 0x02C3
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	28 17       	cp	r18, r24
    160a:	39 07       	cpc	r19, r25
    160c:	dc f4       	brge	.+54     	; 0x1644 <__vector_33+0x116>
    160e:	85 ec       	ldi	r24, 0xC5	; 197
    1610:	80 93 74 00 	sts	0x0074, r24
    1614:	ab cf       	rjmp	.-170    	; 0x156c <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    1616:	e0 91 c0 02 	lds	r30, 0x02C0
    161a:	f0 91 c1 02 	lds	r31, 0x02C1
    161e:	80 91 6c 02 	lds	r24, 0x026C
    1622:	21 e0       	ldi	r18, 0x01	; 1
    1624:	28 0f       	add	r18, r24
    1626:	20 93 6c 02 	sts	0x026C, r18
    162a:	e8 0f       	add	r30, r24
    162c:	f1 1d       	adc	r31, r1
    162e:	80 91 73 00 	lds	r24, 0x0073
    1632:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1634:	80 91 c3 02 	lds	r24, 0x02C3
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	28 17       	cp	r18, r24
    1640:	39 07       	cpc	r19, r25
    1642:	2c f3       	brlt	.-54     	; 0x160e <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    1644:	85 e8       	ldi	r24, 0x85	; 133
    1646:	80 93 74 00 	sts	0x0074, r24
    164a:	90 cf       	rjmp	.-224    	; 0x156c <__vector_33+0x3e>

0000164c <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    164c:	80 91 74 00 	lds	r24, 0x0074
}
    1650:	81 70       	andi	r24, 0x01	; 1
    1652:	08 95       	ret

00001654 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1654:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    1658:	90 fd       	sbrc	r25, 0
    165a:	fc cf       	rjmp	.-8      	; 0x1654 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    165c:	8e 7f       	andi	r24, 0xFE	; 254
    165e:	80 93 c2 02 	sts	0x02C2, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    1662:	70 93 c1 02 	sts	0x02C1, r23
    1666:	60 93 c0 02 	sts	0x02C0, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    166a:	40 93 c3 02 	sts	0x02C3, r20
  TWCR = TWCR_START;                    //initiate START
    166e:	85 ea       	ldi	r24, 0xA5	; 165
    1670:	80 93 74 00 	sts	0x0074, r24
    1674:	08 95       	ret

00001676 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1676:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    167a:	90 fd       	sbrc	r25, 0
    167c:	fc cf       	rjmp	.-8      	; 0x1676 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    167e:	81 60       	ori	r24, 0x01	; 1
    1680:	80 93 c2 02 	sts	0x02C2, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    1684:	70 93 c1 02 	sts	0x02C1, r23
    1688:	60 93 c0 02 	sts	0x02C0, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    168c:	40 93 c3 02 	sts	0x02C3, r20
  TWCR = TWCR_START;                   //initiate START
    1690:	85 ea       	ldi	r24, 0xA5	; 165
    1692:	80 93 74 00 	sts	0x0074, r24
    1696:	08 95       	ret

00001698 <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
    169e:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
    16a2:	8c e0       	ldi	r24, 0x0C	; 12
    16a4:	80 93 70 00 	sts	0x0070, r24
    16a8:	08 95       	ret

000016aa <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16aa:	5d 9b       	sbis	0x0b, 5	; 11
    16ac:	fe cf       	rjmp	.-4      	; 0x16aa <uart_putc>
    UDR0 = data;    // Send data byte
    16ae:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16b0:	5d 9b       	sbis	0x0b, 5	; 11
    16b2:	fe cf       	rjmp	.-4      	; 0x16b0 <uart_putc+0x6>
}
    16b4:	08 95       	ret

000016b6 <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    16b6:	90 91 9b 00 	lds	r25, 0x009B
    16ba:	95 ff       	sbrs	r25, 5
    16bc:	fc cf       	rjmp	.-8      	; 0x16b6 <uart1_putc>
    UDR1 = data;    // Send data byte
    16be:	80 93 9c 00 	sts	0x009C, r24
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    16c2:	80 91 9b 00 	lds	r24, 0x009B
    16c6:	85 ff       	sbrs	r24, 5
    16c8:	fc cf       	rjmp	.-8      	; 0x16c2 <uart1_putc+0xc>
}
    16ca:	08 95       	ret

000016cc <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    16cc:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    16ce:	90 81       	ld	r25, Z
    16d0:	99 23       	and	r25, r25
    16d2:	49 f0       	breq	.+18     	; 0x16e6 <uart_puts+0x1a>
    16d4:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16d6:	5d 9b       	sbis	0x0b, 5	; 11
    16d8:	fe cf       	rjmp	.-4      	; 0x16d6 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    16da:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16dc:	5d 9b       	sbis	0x0b, 5	; 11
    16de:	fe cf       	rjmp	.-4      	; 0x16dc <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    16e0:	91 91       	ld	r25, Z+
    16e2:	91 11       	cpse	r25, r1
    16e4:	f8 cf       	rjmp	.-16     	; 0x16d6 <uart_puts+0xa>
    16e6:	08 95       	ret

000016e8 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    16e8:	fc 01       	movw	r30, r24
    16ea:	20 81       	ld	r18, Z
    16ec:	22 23       	and	r18, r18
    16ee:	71 f0       	breq	.+28     	; 0x170c <uart1_puts+0x24>
    16f0:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    16f2:	90 91 9b 00 	lds	r25, 0x009B
    16f6:	95 ff       	sbrs	r25, 5
    16f8:	fc cf       	rjmp	.-8      	; 0x16f2 <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
    16fa:	20 93 9c 00 	sts	0x009C, r18
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    16fe:	90 91 9b 00 	lds	r25, 0x009B
    1702:	95 ff       	sbrs	r25, 5
    1704:	fc cf       	rjmp	.-8      	; 0x16fe <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1706:	21 91       	ld	r18, Z+
    1708:	21 11       	cpse	r18, r1
    170a:	f3 cf       	rjmp	.-26     	; 0x16f2 <uart1_puts+0xa>
    170c:	08 95       	ret

0000170e <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    170e:	9c 01       	movw	r18, r24
    1710:	fc 01       	movw	r30, r24
    1712:	44 91       	lpm	r20, Z
    1714:	44 23       	and	r20, r20
    1716:	69 f0       	breq	.+26     	; 0x1732 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	f9 01       	movw	r30, r18
    171c:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    171e:	5d 9b       	sbis	0x0b, 5	; 11
    1720:	fe cf       	rjmp	.-4      	; 0x171e <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    1722:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1724:	5d 9b       	sbis	0x0b, 5	; 11
    1726:	fe cf       	rjmp	.-4      	; 0x1724 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    1728:	9c 01       	movw	r18, r24
    172a:	fc 01       	movw	r30, r24
    172c:	44 91       	lpm	r20, Z
    172e:	41 11       	cpse	r20, r1
    1730:	f3 cf       	rjmp	.-26     	; 0x1718 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    1732:	08 95       	ret

00001734 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
    1734:	8a b1       	in	r24, 0x0a	; 10
    1736:	88 69       	ori	r24, 0x98	; 152
    1738:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    173a:	e5 e9       	ldi	r30, 0x95	; 149
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	86 60       	ori	r24, 0x06	; 6
    1742:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    1744:	10 92 90 00 	sts	0x0090, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    1748:	87 e6       	ldi	r24, 0x67	; 103
    174a:	89 b9       	out	0x09, r24	; 9
    174c:	08 95       	ret

0000174e <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
    174e:	ea e9       	ldi	r30, 0x9A	; 154
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	88 61       	ori	r24, 0x18	; 24
    1756:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
    1758:	ed e9       	ldi	r30, 0x9D	; 157
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	86 60       	ori	r24, 0x06	; 6
    1760:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
    1762:	10 92 98 00 	sts	0x0098, r1
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
    1766:	87 e6       	ldi	r24, 0x67	; 103
    1768:	80 93 99 00 	sts	0x0099, r24
    176c:	08 95       	ret

0000176e <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    176e:	80 e8       	ldi	r24, 0x80	; 128
    1770:	9e e3       	ldi	r25, 0x3E	; 62
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <uart_getc+0xa>
    1774:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    1776:	21 f0       	breq	.+8      	; 0x1780 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1778:	5f 9b       	sbis	0x0b, 7	; 11
    177a:	fc cf       	rjmp	.-8      	; 0x1774 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    177c:	8c b1       	in	r24, 0x0c	; 12
    177e:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1780:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    1782:	08 95       	ret

00001784 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    1784:	80 e8       	ldi	r24, 0x80	; 128
    1786:	9e e3       	ldi	r25, 0x3E	; 62
    1788:	02 c0       	rjmp	.+4      	; 0x178e <uart1_getc+0xa>
    178a:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    178c:	39 f0       	breq	.+14     	; 0x179c <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    178e:	20 91 9b 00 	lds	r18, 0x009B
    1792:	27 ff       	sbrs	r18, 7
    1794:	fa cf       	rjmp	.-12     	; 0x178a <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
    1796:	80 91 9c 00 	lds	r24, 0x009C
    179a:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
    179c:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
    179e:	08 95       	ret

000017a0 <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
    17a0:	84 e1       	ldi	r24, 0x14	; 20
    17a2:	80 93 64 03 	sts	0x0364, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
    17a6:	41 e0       	ldi	r20, 0x01	; 1
    17a8:	64 e6       	ldi	r22, 0x64	; 100
    17aa:	73 e0       	ldi	r23, 0x03	; 3
    17ac:	82 e2       	ldi	r24, 0x22	; 34
    17ae:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    17b2:	0e 94 26 0b 	call	0x164c	; 0x164c <twi_busy>
    17b6:	81 11       	cpse	r24, r1
    17b8:	fc cf       	rjmp	.-8      	; 0x17b2 <get_int_status+0x12>
    17ba:	8f ea       	ldi	r24, 0xAF	; 175
    17bc:	94 e0       	ldi	r25, 0x04	; 4
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <get_int_status+0x1e>
    17c2:	00 c0       	rjmp	.+0      	; 0x17c4 <get_int_status+0x24>
    17c4:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	66 e8       	ldi	r22, 0x86	; 134
    17ca:	73 e0       	ldi	r23, 0x03	; 3
    17cc:	82 e2       	ldi	r24, 0x22	; 34
    17ce:	0e 94 3b 0b 	call	0x1676	; 0x1676 <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    17d2:	0e 94 26 0b 	call	0x164c	; 0x164c <twi_busy>
    17d6:	81 11       	cpse	r24, r1
    17d8:	fc cf       	rjmp	.-8      	; 0x17d2 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
    17da:	80 91 86 03 	lds	r24, 0x0386
    17de:	08 95       	ret

000017e0 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
    17e0:	e4 e6       	ldi	r30, 0x64	; 100
    17e2:	f3 e0       	ldi	r31, 0x03	; 3
    17e4:	80 e2       	ldi	r24, 0x20	; 32
    17e6:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    17e8:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    17ea:	80 91 a0 02 	lds	r24, 0x02A0
    17ee:	90 91 a1 02 	lds	r25, 0x02A1
    17f2:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    17f4:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    17f6:	14 82       	std	Z+4, r1	; 0x04
  //send fm tune command
  STC_interrupt = FALSE;
    17f8:	10 92 85 03 	sts	0x0385, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    17fc:	45 e0       	ldi	r20, 0x05	; 5
    17fe:	bf 01       	movw	r22, r30
    1800:	82 e2       	ldi	r24, 0x22	; 34
    1802:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <twi_start_wr>

00001806 <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
    1806:	80 e4       	ldi	r24, 0x40	; 64
    1808:	80 93 64 03 	sts	0x0364, r24
  si4734_wr_buf[1] = 0x00;         //no FAST tune
    180c:	10 92 65 03 	sts	0x0365, r1
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
    1810:	80 91 9e 02 	lds	r24, 0x029E
    1814:	90 91 9f 02 	lds	r25, 0x029F
    1818:	90 93 66 03 	sts	0x0366, r25
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
    181c:	80 93 67 03 	sts	0x0367, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    1820:	10 92 68 03 	sts	0x0368, r1
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
    1824:	10 92 69 03 	sts	0x0369, r1
  //send am tune command
  STC_interrupt = FALSE;
    1828:	10 92 85 03 	sts	0x0385, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    182c:	46 e0       	ldi	r20, 0x06	; 6
    182e:	64 e6       	ldi	r22, 0x64	; 100
    1830:	73 e0       	ldi	r23, 0x03	; 3
    1832:	82 e2       	ldi	r24, 0x22	; 34
    1834:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    1838:	80 91 85 03 	lds	r24, 0x0385
    183c:	88 23       	and	r24, r24
    183e:	e1 f3       	breq	.-8      	; 0x1838 <am_tune_freq+0x32>
}
    1840:	08 95       	ret

00001842 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
    1842:	e4 e6       	ldi	r30, 0x64	; 100
    1844:	f3 e0       	ldi	r31, 0x03	; 3
    1846:	80 e4       	ldi	r24, 0x40	; 64
    1848:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
    184a:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
    184c:	80 91 a2 02 	lds	r24, 0x02A2
    1850:	90 91 a3 02 	lds	r25, 0x02A3
    1854:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
    1856:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    1858:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    185e:	46 e0       	ldi	r20, 0x06	; 6
    1860:	bf 01       	movw	r22, r30
    1862:	82 e2       	ldi	r24, 0x22	; 34
    1864:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1868:	2f ef       	ldi	r18, 0xFF	; 255
    186a:	87 ee       	ldi	r24, 0xE7	; 231
    186c:	93 e0       	ldi	r25, 0x03	; 3
    186e:	21 50       	subi	r18, 0x01	; 1
    1870:	80 40       	sbci	r24, 0x00	; 0
    1872:	90 40       	sbci	r25, 0x00	; 0
    1874:	e1 f7       	brne	.-8      	; 0x186e <sw_tune_freq+0x2c>
    1876:	00 c0       	rjmp	.+0      	; 0x1878 <sw_tune_freq+0x36>
    1878:	00 00       	nop
    187a:	08 95       	ret

0000187c <radio_pwr_dwn>:

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
*/

//send fm power down command
    si4734_wr_buf[0] = 0x11;
    187c:	81 e1       	ldi	r24, 0x11	; 17
    187e:	80 93 64 03 	sts	0x0364, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	64 e6       	ldi	r22, 0x64	; 100
    1886:	73 e0       	ldi	r23, 0x03	; 3
    1888:	82 e2       	ldi	r24, 0x22	; 34
    188a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    188e:	87 ed       	ldi	r24, 0xD7	; 215
    1890:	94 e0       	ldi	r25, 0x04	; 4
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <radio_pwr_dwn+0x16>
    1896:	00 c0       	rjmp	.+0      	; 0x1898 <radio_pwr_dwn+0x1c>
    1898:	00 00       	nop
    189a:	08 95       	ret

0000189c <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    189c:	83 e2       	ldi	r24, 0x23	; 35
    189e:	80 93 64 03 	sts	0x0364, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	80 93 65 03 	sts	0x0365, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    18a8:	42 e0       	ldi	r20, 0x02	; 2
    18aa:	64 e6       	ldi	r22, 0x64	; 100
    18ac:	73 e0       	ldi	r23, 0x03	; 3
    18ae:	82 e2       	ldi	r24, 0x22	; 34
    18b0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    18b4:	0e 94 26 0b 	call	0x164c	; 0x164c <twi_busy>
    18b8:	81 11       	cpse	r24, r1
    18ba:	fc cf       	rjmp	.-8      	; 0x18b4 <fm_rsq_status+0x18>
    18bc:	8f ea       	ldi	r24, 0xAF	; 175
    18be:	94 e0       	ldi	r25, 0x04	; 4
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <fm_rsq_status+0x24>
    18c4:	00 c0       	rjmp	.+0      	; 0x18c6 <fm_rsq_status+0x2a>
    18c6:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    18c8:	48 e0       	ldi	r20, 0x08	; 8
    18ca:	6d e6       	ldi	r22, 0x6D	; 109
    18cc:	73 e0       	ldi	r23, 0x03	; 3
    18ce:	82 e2       	ldi	r24, 0x22	; 34
    18d0:	0e 94 3b 0b 	call	0x1676	; 0x1676 <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    18d4:	0e 94 26 0b 	call	0x164c	; 0x164c <twi_busy>
    18d8:	81 11       	cpse	r24, r1
    18da:	fc cf       	rjmp	.-8      	; 0x18d4 <fm_rsq_status+0x38>
}
    18dc:	08 95       	ret

000018de <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    18de:	82 e2       	ldi	r24, 0x22	; 34
    18e0:	80 93 64 03 	sts	0x0364, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	80 93 65 03 	sts	0x0365, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    18ea:	42 e0       	ldi	r20, 0x02	; 2
    18ec:	64 e6       	ldi	r22, 0x64	; 100
    18ee:	73 e0       	ldi	r23, 0x03	; 3
    18f0:	82 e2       	ldi	r24, 0x22	; 34
    18f2:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    18f6:	0e 94 26 0b 	call	0x164c	; 0x164c <twi_busy>
    18fa:	81 11       	cpse	r24, r1
    18fc:	fc cf       	rjmp	.-8      	; 0x18f6 <fm_tune_status+0x18>
    18fe:	8f ea       	ldi	r24, 0xAF	; 175
    1900:	94 e0       	ldi	r25, 0x04	; 4
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <fm_tune_status+0x24>
    1906:	00 c0       	rjmp	.+0      	; 0x1908 <fm_tune_status+0x2a>
    1908:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    190a:	48 e0       	ldi	r20, 0x08	; 8
    190c:	6d e6       	ldi	r22, 0x6D	; 109
    190e:	73 e0       	ldi	r23, 0x03	; 3
    1910:	82 e2       	ldi	r24, 0x22	; 34
    1912:	0e 94 3b 0b 	call	0x1676	; 0x1676 <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    1916:	0e 94 26 0b 	call	0x164c	; 0x164c <twi_busy>
    191a:	81 11       	cpse	r24, r1
    191c:	fc cf       	rjmp	.-8      	; 0x1916 <fm_tune_status+0x38>
}
    191e:	08 95       	ret

00001920 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    1920:	82 e4       	ldi	r24, 0x42	; 66
    1922:	80 93 64 03 	sts	0x0364, r24
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	80 93 65 03 	sts	0x0365, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    192c:	42 e0       	ldi	r20, 0x02	; 2
    192e:	64 e6       	ldi	r22, 0x64	; 100
    1930:	73 e0       	ldi	r23, 0x03	; 3
    1932:	82 e2       	ldi	r24, 0x22	; 34
    1934:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1938:	0e 94 26 0b 	call	0x164c	; 0x164c <twi_busy>
    193c:	81 11       	cpse	r24, r1
    193e:	fc cf       	rjmp	.-8      	; 0x1938 <am_tune_status+0x18>
    1940:	8f ea       	ldi	r24, 0xAF	; 175
    1942:	94 e0       	ldi	r25, 0x04	; 4
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <am_tune_status+0x24>
    1948:	00 c0       	rjmp	.+0      	; 0x194a <am_tune_status+0x2a>
    194a:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    194c:	48 e0       	ldi	r20, 0x08	; 8
    194e:	6d e6       	ldi	r22, 0x6D	; 109
    1950:	73 e0       	ldi	r23, 0x03	; 3
    1952:	82 e2       	ldi	r24, 0x22	; 34
    1954:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <twi_start_rd>

00001958 <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    1958:	83 e4       	ldi	r24, 0x43	; 67
    195a:	80 93 64 03 	sts	0x0364, r24
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	80 93 65 03 	sts	0x0365, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1964:	42 e0       	ldi	r20, 0x02	; 2
    1966:	64 e6       	ldi	r22, 0x64	; 100
    1968:	73 e0       	ldi	r23, 0x03	; 3
    196a:	82 e2       	ldi	r24, 0x22	; 34
    196c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1970:	0e 94 26 0b 	call	0x164c	; 0x164c <twi_busy>
    1974:	81 11       	cpse	r24, r1
    1976:	fc cf       	rjmp	.-8      	; 0x1970 <am_rsq_status+0x18>
    1978:	8f ea       	ldi	r24, 0xAF	; 175
    197a:	94 e0       	ldi	r25, 0x04	; 4
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <am_rsq_status+0x24>
    1980:	00 c0       	rjmp	.+0      	; 0x1982 <am_rsq_status+0x2a>
    1982:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1984:	48 e0       	ldi	r20, 0x08	; 8
    1986:	6d e6       	ldi	r22, 0x6D	; 109
    1988:	73 e0       	ldi	r23, 0x03	; 3
    198a:	82 e2       	ldi	r24, 0x22	; 34
    198c:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <twi_start_rd>

00001990 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    1990:	e4 e6       	ldi	r30, 0x64	; 100
    1992:	f3 e0       	ldi	r31, 0x03	; 3
    1994:	22 e1       	ldi	r18, 0x12	; 18
    1996:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    1998:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    199a:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    199c:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    199e:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    19a0:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    19a2:	46 e0       	ldi	r20, 0x06	; 6
    19a4:	bf 01       	movw	r22, r30
    19a6:	82 e2       	ldi	r24, 0x22	; 34
    19a8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19ac:	8f e3       	ldi	r24, 0x3F	; 63
    19ae:	9c e9       	ldi	r25, 0x9C	; 156
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <set_property+0x20>
    19b4:	00 c0       	rjmp	.+0      	; 0x19b6 <set_property+0x26>
    19b6:	00 00       	nop
    19b8:	08 95       	ret

000019ba <fm_pwr_up>:
//restore the previous fm frequency  
 //current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
 //current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    19ba:	e4 e6       	ldi	r30, 0x64	; 100
    19bc:	f3 e0       	ldi	r31, 0x03	; 3
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    19c2:	80 e5       	ldi	r24, 0x50	; 80
    19c4:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    19c6:	85 e0       	ldi	r24, 0x05	; 5
    19c8:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    19ca:	43 e0       	ldi	r20, 0x03	; 3
    19cc:	bf 01       	movw	r22, r30
    19ce:	82 e2       	ldi	r24, 0x22	; 34
    19d0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
    19d4:	2f ef       	ldi	r18, 0xFF	; 255
    19d6:	8c e4       	ldi	r24, 0x4C	; 76
    19d8:	98 e0       	ldi	r25, 0x08	; 8
    19da:	21 50       	subi	r18, 0x01	; 1
    19dc:	80 40       	sbci	r24, 0x00	; 0
    19de:	90 40       	sbci	r25, 0x00	; 0
    19e0:	e1 f7       	brne	.-8      	; 0x19da <fm_pwr_up+0x20>
    19e2:	00 c0       	rjmp	.+0      	; 0x19e4 <fm_pwr_up+0x2a>
    19e4:	00 00       	nop
  _delay_ms(170);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    19e6:	61 e0       	ldi	r22, 0x01	; 1
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <set_property>

000019f2 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
    19f2:	87 e9       	ldi	r24, 0x97	; 151
    19f4:	92 e0       	ldi	r25, 0x02	; 2
    19f6:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <eeprom_read_word>
    19fa:	90 93 9f 02 	sts	0x029F, r25
    19fe:	80 93 9e 02 	sts	0x029E, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1a02:	8d e6       	ldi	r24, 0x6D	; 109
    1a04:	92 e0       	ldi	r25, 0x02	; 2
    1a06:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <eeprom_read_byte>
    1a0a:	80 93 9a 02 	sts	0x029A, r24

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    1a0e:	e4 e6       	ldi	r30, 0x64	; 100
    1a10:	f3 e0       	ldi	r31, 0x03	; 3
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    1a16:	81 e5       	ldi	r24, 0x51	; 81
    1a18:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    1a1a:	85 e0       	ldi	r24, 0x05	; 5
    1a1c:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1a1e:	43 e0       	ldi	r20, 0x03	; 3
    1a20:	bf 01       	movw	r22, r30
    1a22:	82 e2       	ldi	r24, 0x22	; 34
    1a24:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
    1a28:	2f ef       	ldi	r18, 0xFF	; 255
    1a2a:	8b ed       	ldi	r24, 0xDB	; 219
    1a2c:	95 e0       	ldi	r25, 0x05	; 5
    1a2e:	21 50       	subi	r18, 0x01	; 1
    1a30:	80 40       	sbci	r24, 0x00	; 0
    1a32:	90 40       	sbci	r25, 0x00	; 0
    1a34:	e1 f7       	brne	.-8      	; 0x1a2e <am_pwr_up+0x3c>
    1a36:	00 c0       	rjmp	.+0      	; 0x1a38 <am_pwr_up+0x46>
    1a38:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    1a3a:	61 e0       	ldi	r22, 0x01	; 1
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <set_property>

00001a46 <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    1a46:	84 ea       	ldi	r24, 0xA4	; 164
    1a48:	92 e0       	ldi	r25, 0x02	; 2
    1a4a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <eeprom_read_word>
    1a4e:	90 93 a3 02 	sts	0x02A3, r25
    1a52:	80 93 a2 02 	sts	0x02A2, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1a56:	8d e6       	ldi	r24, 0x6D	; 109
    1a58:	92 e0       	ldi	r25, 0x02	; 2
    1a5a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <eeprom_read_byte>
    1a5e:	80 93 9a 02 	sts	0x029A, r24

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    1a62:	e4 e6       	ldi	r30, 0x64	; 100
    1a64:	f3 e0       	ldi	r31, 0x03	; 3
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    1a6a:	81 e5       	ldi	r24, 0x51	; 81
    1a6c:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    1a6e:	85 e0       	ldi	r24, 0x05	; 5
    1a70:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1a72:	43 e0       	ldi	r20, 0x03	; 3
    1a74:	bf 01       	movw	r22, r30
    1a76:	82 e2       	ldi	r24, 0x22	; 34
    1a78:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
    1a7c:	2f ef       	ldi	r18, 0xFF	; 255
    1a7e:	8b ed       	ldi	r24, 0xDB	; 219
    1a80:	95 e0       	ldi	r25, 0x05	; 5
    1a82:	21 50       	subi	r18, 0x01	; 1
    1a84:	80 40       	sbci	r24, 0x00	; 0
    1a86:	90 40       	sbci	r25, 0x00	; 0
    1a88:	e1 f7       	brne	.-8      	; 0x1a82 <sw_pwr_up+0x3c>
    1a8a:	00 c0       	rjmp	.+0      	; 0x1a8c <sw_pwr_up+0x46>
    1a8c:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	82 e0       	ldi	r24, 0x02	; 2
    1a94:	93 e3       	ldi	r25, 0x33	; 51
    1a96:	0e 94 c8 0c 	call	0x1990	; 0x1990 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	71 e0       	ldi	r23, 0x01	; 1
    1a9e:	82 e0       	ldi	r24, 0x02	; 2
    1aa0:	91 e3       	ldi	r25, 0x31	; 49
    1aa2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    1aa6:	61 e0       	ldi	r22, 0x01	; 1
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <set_property>

00001ab2 <get_rev>:
//TODO: UNTESTED!
//Report the chip revision info via uart1. UART1 be setup and connected to 
//a dumb terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//
void get_rev(){
    si4734_wr_buf[0] = GET_REV;                   //get rev command 
    1ab2:	80 e1       	ldi	r24, 0x10	; 16
    1ab4:	80 93 64 03 	sts	0x0364, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    1ab8:	41 e0       	ldi	r20, 0x01	; 1
    1aba:	64 e6       	ldi	r22, 0x64	; 100
    1abc:	73 e0       	ldi	r23, 0x03	; 3
    1abe:	82 e2       	ldi	r24, 0x22	; 34
    1ac0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    1ac4:	0e 94 26 0b 	call	0x164c	; 0x164c <twi_busy>
    1ac8:	81 11       	cpse	r24, r1
    1aca:	fc cf       	rjmp	.-8      	; 0x1ac4 <get_rev+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1acc:	8f ea       	ldi	r24, 0xAF	; 175
    1ace:	94 e0       	ldi	r25, 0x04	; 4
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <get_rev+0x1e>
    1ad4:	00 c0       	rjmp	.+0      	; 0x1ad6 <get_rev+0x24>
    1ad6:	00 00       	nop
    _delay_us(300);        //wait for processing delay
//get the revision info  
    twi_start_rd(SI4734_ADDRESS, si4734_revision_buf, 8);
    1ad8:	48 e0       	ldi	r20, 0x08	; 8
    1ada:	65 e7       	ldi	r22, 0x75	; 117
    1adc:	73 e0       	ldi	r23, 0x03	; 3
    1ade:	82 e2       	ldi	r24, 0x22	; 34
    1ae0:	0e 94 3b 0b 	call	0x1676	; 0x1676 <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    1ae4:	0e 94 26 0b 	call	0x164c	; 0x164c <twi_busy>
    1ae8:	81 11       	cpse	r24, r1
    1aea:	fc cf       	rjmp	.-8      	; 0x1ae4 <get_rev+0x32>
//use TABs instead?
    uart1_puts("Si4734 Rev:  last 2 digits of part no.   chip rev     \n\r");
    1aec:	87 e5       	ldi	r24, 0x57	; 87
    1aee:	91 e0       	ldi	r25, 0x01	; 1
    1af0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    uart1_puts("             -------------------------   --------     \n\r");
    1af4:	80 e9       	ldi	r24, 0x90	; 144
    1af6:	91 e0       	ldi	r25, 0x01	; 1
    1af8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    uart1_puts("                          "); itoa((int)si4734_revision_buf[1], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); 
    1afc:	89 ec       	ldi	r24, 0xC9	; 201
    1afe:	91 e0       	ldi	r25, 0x01	; 1
    1b00:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1b04:	80 91 76 03 	lds	r24, 0x0376
    1b08:	4a e0       	ldi	r20, 0x0A	; 10
    1b0a:	6c ee       	ldi	r22, 0xEC	; 236
    1b0c:	72 e0       	ldi	r23, 0x02	; 2
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__itoa_ncheck>
    1b14:	8c ee       	ldi	r24, 0xEC	; 236
    1b16:	92 e0       	ldi	r25, 0x02	; 2
    1b18:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    uart1_puts("             "); itoa((int)si4734_revision_buf[2], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    1b1c:	86 ed       	ldi	r24, 0xD6	; 214
    1b1e:	91 e0       	ldi	r25, 0x01	; 1
    1b20:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1b24:	80 91 77 03 	lds	r24, 0x0377
    1b28:	4a e0       	ldi	r20, 0x0A	; 10
    1b2a:	6c ee       	ldi	r22, 0xEC	; 236
    1b2c:	72 e0       	ldi	r23, 0x02	; 2
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__itoa_ncheck>
    1b34:	8c ee       	ldi	r24, 0xEC	; 236
    1b36:	92 e0       	ldi	r25, 0x02	; 2
    1b38:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1b3c:	86 ec       	ldi	r24, 0xC6	; 198
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <uart1_puts>

00001b44 <get_fm_rsq_status>:
    1b44:	ff 92       	push	r15
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	a8 97       	sbiw	r28, 0x28	; 40
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	84 ee       	ldi	r24, 0xE4	; 228
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1b66:	84 ef       	ldi	r24, 0xF4	; 244
    1b68:	91 e0       	ldi	r25, 0x01	; 1
    1b6a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1b6e:	0d e6       	ldi	r16, 0x6D	; 109
    1b70:	13 e0       	ldi	r17, 0x03	; 3
    1b72:	f8 01       	movw	r30, r16
    1b74:	80 81       	ld	r24, Z
    1b76:	40 e1       	ldi	r20, 0x10	; 16
    1b78:	6c ee       	ldi	r22, 0xEC	; 236
    1b7a:	72 e0       	ldi	r23, 0x02	; 2
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__itoa_ncheck>
    1b82:	8c ee       	ldi	r24, 0xEC	; 236
    1b84:	92 e0       	ldi	r25, 0x02	; 2
    1b86:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1b8a:	86 ec       	ldi	r24, 0xC6	; 198
    1b8c:	91 e0       	ldi	r25, 0x01	; 1
    1b8e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1b92:	84 e0       	ldi	r24, 0x04	; 4
    1b94:	92 e0       	ldi	r25, 0x02	; 2
    1b96:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	81 81       	ldd	r24, Z+1	; 0x01
    1b9e:	4a e0       	ldi	r20, 0x0A	; 10
    1ba0:	6c ee       	ldi	r22, 0xEC	; 236
    1ba2:	72 e0       	ldi	r23, 0x02	; 2
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__itoa_ncheck>
    1baa:	8c ee       	ldi	r24, 0xEC	; 236
    1bac:	92 e0       	ldi	r25, 0x02	; 2
    1bae:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1bb2:	86 ec       	ldi	r24, 0xC6	; 198
    1bb4:	91 e0       	ldi	r25, 0x01	; 1
    1bb6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1bba:	f8 01       	movw	r30, r16
    1bbc:	f3 80       	ldd	r15, Z+3	; 0x03
    1bbe:	84 e1       	ldi	r24, 0x14	; 20
    1bc0:	92 e0       	ldi	r25, 0x02	; 2
    1bc2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1bc6:	4a e0       	ldi	r20, 0x0A	; 10
    1bc8:	6c ee       	ldi	r22, 0xEC	; 236
    1bca:	72 e0       	ldi	r23, 0x02	; 2
    1bcc:	8f 2d       	mov	r24, r15
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__itoa_ncheck>
    1bd4:	8c ee       	ldi	r24, 0xEC	; 236
    1bd6:	92 e0       	ldi	r25, 0x02	; 2
    1bd8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1bdc:	86 ec       	ldi	r24, 0xC6	; 198
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1be4:	84 e2       	ldi	r24, 0x24	; 36
    1be6:	92 e0       	ldi	r25, 0x02	; 2
    1be8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1bec:	f8 01       	movw	r30, r16
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	40 e1       	ldi	r20, 0x10	; 16
    1bf2:	be 01       	movw	r22, r28
    1bf4:	6f 5f       	subi	r22, 0xFF	; 255
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__itoa_ncheck>
    1bfe:	ce 01       	movw	r24, r28
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1c06:	86 ec       	ldi	r24, 0xC6	; 198
    1c08:	91 e0       	ldi	r25, 0x01	; 1
    1c0a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1c0e:	84 e3       	ldi	r24, 0x34	; 52
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1c16:	f8 01       	movw	r30, r16
    1c18:	83 81       	ldd	r24, Z+3	; 0x03
    1c1a:	40 e1       	ldi	r20, 0x10	; 16
    1c1c:	be 01       	movw	r22, r28
    1c1e:	6f 5f       	subi	r22, 0xFF	; 255
    1c20:	7f 4f       	sbci	r23, 0xFF	; 255
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__itoa_ncheck>
    1c28:	ce 01       	movw	r24, r28
    1c2a:	01 96       	adiw	r24, 0x01	; 1
    1c2c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1c30:	86 ec       	ldi	r24, 0xC6	; 198
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1c38:	84 e4       	ldi	r24, 0x44	; 68
    1c3a:	92 e0       	ldi	r25, 0x02	; 2
    1c3c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1c40:	f8 01       	movw	r30, r16
    1c42:	84 81       	ldd	r24, Z+4	; 0x04
    1c44:	40 e1       	ldi	r20, 0x10	; 16
    1c46:	6c ee       	ldi	r22, 0xEC	; 236
    1c48:	72 e0       	ldi	r23, 0x02	; 2
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__itoa_ncheck>
    1c50:	8c ee       	ldi	r24, 0xEC	; 236
    1c52:	92 e0       	ldi	r25, 0x02	; 2
    1c54:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1c58:	86 ec       	ldi	r24, 0xC6	; 198
    1c5a:	91 e0       	ldi	r25, 0x01	; 1
    1c5c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <uart1_puts>
    1c60:	a8 96       	adiw	r28, 0x28	; 40
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	08 95       	ret

00001c78 <main>:

//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(){
  DDRB   = 0xF7; //output mode for SS, MOSI, SCLK & Pins 4-7 (7Seg & Bar Graph)
    1c78:	87 ef       	ldi	r24, 0xF7	; 247
    1c7a:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); // Enable SPI, master mode, clk low on idle, leading edge sample
    1c7c:	80 e5       	ldi	r24, 0x50	; 80
    1c7e:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (0<<SPI2X); //No double speed operation
    1c80:	1e b8       	out	0x0e, r1	; 14
// Triggers a 1 sec TOV Interrupt.
//
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
    1c82:	80 b7       	in	r24, 0x30	; 48
    1c84:	88 60       	ori	r24, 0x08	; 8
    1c86:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE0);  //TimerOverflow Interrupt Enable
    1c88:	87 b7       	in	r24, 0x37	; 55
    1c8a:	81 60       	ori	r24, 0x01	; 1
    1c8c:	87 bf       	out	0x37, r24	; 55
  TCCR0 =  (1<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode, 128 prescale, OC0 Disconnected
    1c8e:	85 e0       	ldi	r24, 0x05	; 5
    1c90:	83 bf       	out	0x33, r24	; 51
//
// setup TCNT1 in pwm mode
// set OC1A (PB5) as pwm output
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);
    1c92:	8f b5       	in	r24, 0x2f	; 47
    1c94:	82 60       	ori	r24, 0x02	; 2
    1c96:	8f bd       	out	0x2f, r24	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10);
    1c98:	8e b5       	in	r24, 0x2e	; 46
    1c9a:	89 61       	ori	r24, 0x19	; 25
    1c9c:	8e bd       	out	0x2e, r24	; 46
	//no forced compare
	TCCR1C = 0x00;
    1c9e:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 ec       	ldi	r25, 0xC0	; 192
    1ca6:	9b bd       	out	0x2b, r25	; 43
    1ca8:	8a bd       	out	0x2a, r24	; 42
	ICR1  = 0xF000; //clear at 0xF000
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 ef       	ldi	r25, 0xF0	; 240
    1cae:	97 bd       	out	0x27, r25	; 39
    1cb0:	86 bd       	out	0x26, r24	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
    1cb2:	87 b7       	in	r24, 0x37	; 55
    1cb4:	80 61       	ori	r24, 0x10	; 16
    1cb6:	87 bf       	out	0x37, r24	; 55
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
    1cb8:	88 e1       	ldi	r24, 0x18	; 24
    1cba:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
    1cbc:	87 b7       	in	r24, 0x37	; 55
    1cbe:	8f 7e       	andi	r24, 0xEF	; 239
    1cc0:	87 bf       	out	0x37, r24	; 55
//**********************************************************************
void init_tcnt2(){
// 7-Seg Brigtness PWM

  //enable interrupts for Timer/Counter2 overflow
  TIMSK |= (1<<TOIE2) | (0<<OCIE2);  //TimerOverflow Interrupt Enable
    1cc2:	87 b7       	in	r24, 0x37	; 55
    1cc4:	80 64       	ori	r24, 0x40	; 64
    1cc6:	87 bf       	out	0x37, r24	; 55
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (1<<CS21) | (1<<CS20);
    1cc8:	8b e7       	ldi	r24, 0x7B	; 123
    1cca:	85 bd       	out	0x25, r24	; 37
	//Fast-PWM mode, Inverting PWM Mode, 64 prescale, OC2(PB7)(PWM) Connected
	//0-256 takes 1ms (16k CLKIO cycles)
  OCR2 =  0xF0;                   //compare at 128(50%)
    1ccc:	80 ef       	ldi	r24, 0xF0	; 240
    1cce:	83 bd       	out	0x23, r24	; 35
//                            timer/counter3_init
//**********************************************************************
void init_tcnt3(){
// Volume PWM
// setup TCNT3 in pwm mode
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0) | (0<<WGM31) | (1<<WGM30);
    1cd0:	80 91 8b 00 	lds	r24, 0x008B
    1cd4:	81 68       	ori	r24, 0x81	; 129
    1cd6:	80 93 8b 00 	sts	0x008B, r24
	// Fast PWM, 8-Bit mode top 0x00FF
	// Clear OC3A on compare match, Fast PWM (non-inverting)
	//use ICR1 as source for TOP, use clk/1
	TCCR3B |= (0<<WGM33) | (1<< WGM32) | (1<<CS30);
    1cda:	80 91 8a 00 	lds	r24, 0x008A
    1cde:	89 60       	ori	r24, 0x09	; 9
    1ce0:	80 93 8a 00 	sts	0x008A, r24
	// No prescaling
	//no forced compare
	TCCR3C = 0x00;
    1ce4:	10 92 8c 00 	sts	0x008C, r1
	//20% duty cycle, LED is a bit dimmer
	OCR3A = 0x00CD; // Initally at 50% Duty Cycle
    1ce8:	8d ec       	ldi	r24, 0xCD	; 205
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	90 93 87 00 	sts	0x0087, r25
    1cf0:	80 93 86 00 	sts	0x0086, r24
	init_tcnt1(); // initalize TIMER/COUNTER1 - Alarm Tone PWM 16-Bit
	disable_tcnt1(); // stop the clock
	init_tcnt2(); // initalize TIMER/COUNTER2 - 7-Seg Brigtness PWM 8-bit
	init_tcnt3(); // initalize TIMER/COUNTER3 - Audio Volume PWM 16-bit
	
	init_twi();   // initialize TWI(I2C) interface - Temp Sensor
    1cf4:	0e 94 4c 0b 	call	0x1698	; 0x1698 <init_twi>
	lm73_wr_buf[0] = 0x00; //Loads the buffer with the read only temperature pointer addr
    1cf8:	10 92 bb 02 	sts	0x02BB, r1
			       //The ADDR Pin is left floating for addr 0x90
	twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2); //start the TWI write process (twi_start_wr())
    1cfc:	42 e0       	ldi	r20, 0x02	; 2
    1cfe:	6b eb       	ldi	r22, 0xBB	; 187
    1d00:	72 e0       	ldi	r23, 0x02	; 2
    1d02:	80 e9       	ldi	r24, 0x90	; 144
    1d04:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_start_wr>
	
	//ATMega48 Functions
	//USART
	uart_init();
    1d08:	0e 94 9a 0b 	call	0x1734	; 0x1734 <uart_init>
//                            timer/counter0_init
//**********************************************************************
void init_DDRs(){
// Add HERE
	// Set the DDR for Ports
	DDRA = DDRA_OUTPUT; // 7-Seg Data out
    1d0c:	8f ef       	ldi	r24, 0xFF	; 255
    1d0e:	8a bb       	out	0x1a, r24	; 26
	DDRE = (1<<PE3) | (1<<PE5) | (1<<PE6) | (1<<PE7);
    1d10:	88 ee       	ldi	r24, 0xE8	; 232
    1d12:	82 b9       	out	0x02, r24	; 2
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
    1d14:	84 e0       	ldi	r24, 0x04	; 4
    1d16:	81 bb       	out	0x11, r24	; 17
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
    1d18:	83 e0       	ldi	r24, 0x03	; 3
    1d1a:	84 bb       	out	0x14, r24	; 20
	incdec_mode = 0x01;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	80 93 59 02 	sts	0x0259, r24
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
    1d22:	85 e5       	ldi	r24, 0x55	; 85
    1d24:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
    1d26:	77 9b       	sbis	0x0e, 7	; 14
    1d28:	fe cf       	rjmp	.-4      	; 0x1d26 <main+0xae>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
    1d2a:	8f b1       	in	r24, 0x0f	; 15
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
	incdec_mode = 0x01;
	// Read the starting encoder positions
	old_encoder = spi_rw8(0x55);
    1d2c:	80 93 56 02 	sts	0x0256, r24
//                            init_adc
//**********************************************************************
void init_ADC(){
// ADC used to read brightness levels using a photoresistor
	//Initalize ADC and its ports
	DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input
    1d30:	80 91 61 00 	lds	r24, 0x0061
    1d34:	8f 77       	andi	r24, 0x7F	; 127
    1d36:	80 93 61 00 	sts	0x0061, r24
	PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
    1d3a:	80 91 62 00 	lds	r24, 0x0062
    1d3e:	8f 77       	andi	r24, 0x7F	; 127
    1d40:	80 93 62 00 	sts	0x0062, r24

	ADMUX = (1<<ADLAR) | (1<<REFS0) | (1<<MUX0) | (1<<MUX1) | (1<<MUX2);
    1d44:	87 e6       	ldi	r24, 0x67	; 103
    1d46:	87 b9       	out	0x07, r24	; 7
	//ADMUX = (1<<MUX0) | (1<<MUX1) | (1<<MUX2)
	//single-ended, input PORTF bit 7, right adjusted, 10 bits

	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
    1d48:	87 e8       	ldi	r24, 0x87	; 135
    1d4a:	86 b9       	out	0x06, r24	; 6
	//USART
	uart_init();
	
	init_DDRs(); // initalize DDRs for the display, encoders bargraph
	init_ADC();
	lcd_init(); // initialize the lcd screen
    1d4c:	0e 94 c2 08 	call	0x1184	; 0x1184 <lcd_init>

	//Radio code
	EIMSK |= 0x80; //Enable int 7 mask
    1d50:	89 b7       	in	r24, 0x39	; 57
    1d52:	80 68       	ori	r24, 0x80	; 128
    1d54:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1<<ISC71) | (1<<ISC70); //Set external interupt control reg B
    1d56:	8a b7       	in	r24, 0x3a	; 58
    1d58:	80 6c       	ori	r24, 0xC0	; 192
    1d5a:	8a bf       	out	0x3a, r24	; 58

	//radio_reset();
	radio_reset();
    1d5c:	0e 94 68 07 	call	0xed0	; 0xed0 <radio_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d60:	2f ef       	ldi	r18, 0xFF	; 255
    1d62:	81 ee       	ldi	r24, 0xE1	; 225
    1d64:	94 e0       	ldi	r25, 0x04	; 4
    1d66:	21 50       	subi	r18, 0x01	; 1
    1d68:	80 40       	sbci	r24, 0x00	; 0
    1d6a:	90 40       	sbci	r25, 0x00	; 0
    1d6c:	e1 f7       	brne	.-8      	; 0x1d66 <main+0xee>
    1d6e:	00 c0       	rjmp	.+0      	; 0x1d70 <main+0xf8>
    1d70:	00 00       	nop
	_delay_ms(100);


	sei(); // enable global interrupts
    1d72:	78 94       	sei


	fm_pwr_up(); //powerup the radio as appropriate
    1d74:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <fm_pwr_up>
    1d78:	2f ef       	ldi	r18, 0xFF	; 255
    1d7a:	81 ee       	ldi	r24, 0xE1	; 225
    1d7c:	94 e0       	ldi	r25, 0x04	; 4
    1d7e:	21 50       	subi	r18, 0x01	; 1
    1d80:	80 40       	sbci	r24, 0x00	; 0
    1d82:	90 40       	sbci	r25, 0x00	; 0
    1d84:	e1 f7       	brne	.-8      	; 0x1d7e <main+0x106>
    1d86:	00 c0       	rjmp	.+0      	; 0x1d88 <main+0x110>
    1d88:	00 00       	nop
	_delay_ms(100);
	current_fm_freq = 10630; //arg2, arg3: 99.9Mhz, 200khz steps
    1d8a:	86 e8       	ldi	r24, 0x86	; 134
    1d8c:	99 e2       	ldi	r25, 0x29	; 41
    1d8e:	90 93 a1 02 	sts	0x02A1, r25
    1d92:	80 93 a0 02 	sts	0x02A0, r24
	//current_fm_freq = 10150; //arg2, arg3: 99.9Mhz, 200khz steps
	fm_tune_freq(); //tune radio to frequency in current_fm_freq
    1d96:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <fm_tune_freq>
    1d9a:	2f ef       	ldi	r18, 0xFF	; 255
    1d9c:	81 ee       	ldi	r24, 0xE1	; 225
    1d9e:	94 e0       	ldi	r25, 0x04	; 4
    1da0:	21 50       	subi	r18, 0x01	; 1
    1da2:	80 40       	sbci	r24, 0x00	; 0
    1da4:	90 40       	sbci	r25, 0x00	; 0
    1da6:	e1 f7       	brne	.-8      	; 0x1da0 <main+0x128>
    1da8:	00 c0       	rjmp	.+0      	; 0x1daa <main+0x132>
    1daa:	00 00       	nop
		for(;j<10;j++){
		for(;i<5;i++){
                	PORTB = i<<4 | 0<<PB7; // Select a segment
			PORTA = segment_data[i]; // Send data to the segment
			_delay_us(10); // Hold
			PORTA = 0XFF; //Seg off to reduce flicker
    1dac:	cf ef       	ldi	r28, 0xFF	; 255
	_delay_ms(100);

	while(1){                             //main while loop
	// Send the Digits to the Display
	  //break up the disp_value to 4, BCD digits in the array: call (segsum)
		segsum(clockmode);
    1dae:	80 91 58 02 	lds	r24, 0x0258
    1db2:	0e 94 48 01 	call	0x290	; 0x290 <segsum>
	  //bound a counter (0-4) to keep track of digit to display
		i = 0;
    1db6:	10 92 9d 02 	sts	0x029D, r1
		j = 0; //Refresh the seg data less frequently
    1dba:	10 92 70 02 	sts	0x0270, r1
	  //send 7 segment code to LED segments
		for(;j<10;j++){
    1dbe:	80 91 70 02 	lds	r24, 0x0270
    1dc2:	8a 30       	cpi	r24, 0x0A	; 10
    1dc4:	d8 f0       	brcs	.+54     	; 0x1dfc <main+0x184>
    1dc6:	f3 cf       	rjmp	.-26     	; 0x1dae <main+0x136>
		for(;i<5;i++){
                	PORTB = i<<4 | 0<<PB7; // Select a segment
    1dc8:	80 91 9d 02 	lds	r24, 0x029D
    1dcc:	82 95       	swap	r24
    1dce:	80 7f       	andi	r24, 0xF0	; 240
    1dd0:	88 bb       	out	0x18, r24	; 24
			PORTA = segment_data[i]; // Send data to the segment
    1dd2:	e0 91 9d 02 	lds	r30, 0x029D
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	ea 55       	subi	r30, 0x5A	; 90
    1dda:	fd 4f       	sbci	r31, 0xFD	; 253
    1ddc:	80 81       	ld	r24, Z
    1dde:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1de0:	25 e3       	ldi	r18, 0x35	; 53
    1de2:	2a 95       	dec	r18
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <main+0x16a>
    1de6:	00 00       	nop
			_delay_us(10); // Hold
			PORTA = 0XFF; //Seg off to reduce flicker
    1de8:	cb bb       	out	0x1b, r28	; 27
    1dea:	85 e0       	ldi	r24, 0x05	; 5
    1dec:	8a 95       	dec	r24
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <main+0x174>
    1df0:	00 00       	nop
	  //bound a counter (0-4) to keep track of digit to display
		i = 0;
		j = 0; //Refresh the seg data less frequently
	  //send 7 segment code to LED segments
		for(;j<10;j++){
		for(;i<5;i++){
    1df2:	80 91 9d 02 	lds	r24, 0x029D
    1df6:	8f 5f       	subi	r24, 0xFF	; 255
    1df8:	80 93 9d 02 	sts	0x029D, r24
    1dfc:	80 91 9d 02 	lds	r24, 0x029D
    1e00:	85 30       	cpi	r24, 0x05	; 5
    1e02:	10 f3       	brcs	.-60     	; 0x1dc8 <main+0x150>
		segsum(clockmode);
	  //bound a counter (0-4) to keep track of digit to display
		i = 0;
		j = 0; //Refresh the seg data less frequently
	  //send 7 segment code to LED segments
		for(;j<10;j++){
    1e04:	80 91 70 02 	lds	r24, 0x0270
    1e08:	8f 5f       	subi	r24, 0xFF	; 255
    1e0a:	80 93 70 02 	sts	0x0270, r24
    1e0e:	80 91 70 02 	lds	r24, 0x0270
    1e12:	8a 30       	cpi	r24, 0x0A	; 10
    1e14:	98 f3       	brcs	.-26     	; 0x1dfc <main+0x184>
    1e16:	cb cf       	rjmp	.-106    	; 0x1dae <main+0x136>

00001e18 <__divmodhi4>:
    1e18:	97 fb       	bst	r25, 7
    1e1a:	07 2e       	mov	r0, r23
    1e1c:	16 f4       	brtc	.+4      	; 0x1e22 <__divmodhi4+0xa>
    1e1e:	00 94       	com	r0
    1e20:	07 d0       	rcall	.+14     	; 0x1e30 <__divmodhi4_neg1>
    1e22:	77 fd       	sbrc	r23, 7
    1e24:	09 d0       	rcall	.+18     	; 0x1e38 <__divmodhi4_neg2>
    1e26:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__udivmodhi4>
    1e2a:	07 fc       	sbrc	r0, 7
    1e2c:	05 d0       	rcall	.+10     	; 0x1e38 <__divmodhi4_neg2>
    1e2e:	3e f4       	brtc	.+14     	; 0x1e3e <__divmodhi4_exit>

00001e30 <__divmodhi4_neg1>:
    1e30:	90 95       	com	r25
    1e32:	81 95       	neg	r24
    1e34:	9f 4f       	sbci	r25, 0xFF	; 255
    1e36:	08 95       	ret

00001e38 <__divmodhi4_neg2>:
    1e38:	70 95       	com	r23
    1e3a:	61 95       	neg	r22
    1e3c:	7f 4f       	sbci	r23, 0xFF	; 255

00001e3e <__divmodhi4_exit>:
    1e3e:	08 95       	ret

00001e40 <__divmodsi4>:
    1e40:	05 2e       	mov	r0, r21
    1e42:	97 fb       	bst	r25, 7
    1e44:	1e f4       	brtc	.+6      	; 0x1e4c <__divmodsi4+0xc>
    1e46:	00 94       	com	r0
    1e48:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__negsi2>
    1e4c:	57 fd       	sbrc	r21, 7
    1e4e:	07 d0       	rcall	.+14     	; 0x1e5e <__divmodsi4_neg2>
    1e50:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__udivmodsi4>
    1e54:	07 fc       	sbrc	r0, 7
    1e56:	03 d0       	rcall	.+6      	; 0x1e5e <__divmodsi4_neg2>
    1e58:	4e f4       	brtc	.+18     	; 0x1e6c <__divmodsi4_exit>
    1e5a:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__negsi2>

00001e5e <__divmodsi4_neg2>:
    1e5e:	50 95       	com	r21
    1e60:	40 95       	com	r20
    1e62:	30 95       	com	r19
    1e64:	21 95       	neg	r18
    1e66:	3f 4f       	sbci	r19, 0xFF	; 255
    1e68:	4f 4f       	sbci	r20, 0xFF	; 255
    1e6a:	5f 4f       	sbci	r21, 0xFF	; 255

00001e6c <__divmodsi4_exit>:
    1e6c:	08 95       	ret

00001e6e <__negsi2>:
    1e6e:	90 95       	com	r25
    1e70:	80 95       	com	r24
    1e72:	70 95       	com	r23
    1e74:	61 95       	neg	r22
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	08 95       	ret

00001e7e <__tablejump2__>:
    1e7e:	ee 0f       	add	r30, r30
    1e80:	ff 1f       	adc	r31, r31
    1e82:	00 24       	eor	r0, r0
    1e84:	00 1c       	adc	r0, r0
    1e86:	0b be       	out	0x3b, r0	; 59
    1e88:	07 90       	elpm	r0, Z+
    1e8a:	f6 91       	elpm	r31, Z
    1e8c:	e0 2d       	mov	r30, r0
    1e8e:	09 94       	ijmp

00001e90 <__umulhisi3>:
    1e90:	a2 9f       	mul	r26, r18
    1e92:	b0 01       	movw	r22, r0
    1e94:	b3 9f       	mul	r27, r19
    1e96:	c0 01       	movw	r24, r0
    1e98:	a3 9f       	mul	r26, r19
    1e9a:	70 0d       	add	r23, r0
    1e9c:	81 1d       	adc	r24, r1
    1e9e:	11 24       	eor	r1, r1
    1ea0:	91 1d       	adc	r25, r1
    1ea2:	b2 9f       	mul	r27, r18
    1ea4:	70 0d       	add	r23, r0
    1ea6:	81 1d       	adc	r24, r1
    1ea8:	11 24       	eor	r1, r1
    1eaa:	91 1d       	adc	r25, r1
    1eac:	08 95       	ret

00001eae <__udivmodhi4>:
    1eae:	aa 1b       	sub	r26, r26
    1eb0:	bb 1b       	sub	r27, r27
    1eb2:	51 e1       	ldi	r21, 0x11	; 17
    1eb4:	07 c0       	rjmp	.+14     	; 0x1ec4 <__udivmodhi4_ep>

00001eb6 <__udivmodhi4_loop>:
    1eb6:	aa 1f       	adc	r26, r26
    1eb8:	bb 1f       	adc	r27, r27
    1eba:	a6 17       	cp	r26, r22
    1ebc:	b7 07       	cpc	r27, r23
    1ebe:	10 f0       	brcs	.+4      	; 0x1ec4 <__udivmodhi4_ep>
    1ec0:	a6 1b       	sub	r26, r22
    1ec2:	b7 0b       	sbc	r27, r23

00001ec4 <__udivmodhi4_ep>:
    1ec4:	88 1f       	adc	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	5a 95       	dec	r21
    1eca:	a9 f7       	brne	.-22     	; 0x1eb6 <__udivmodhi4_loop>
    1ecc:	80 95       	com	r24
    1ece:	90 95       	com	r25
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	08 95       	ret

00001ed6 <__udivmodsi4>:
    1ed6:	a1 e2       	ldi	r26, 0x21	; 33
    1ed8:	1a 2e       	mov	r1, r26
    1eda:	aa 1b       	sub	r26, r26
    1edc:	bb 1b       	sub	r27, r27
    1ede:	fd 01       	movw	r30, r26
    1ee0:	0d c0       	rjmp	.+26     	; 0x1efc <__udivmodsi4_ep>

00001ee2 <__udivmodsi4_loop>:
    1ee2:	aa 1f       	adc	r26, r26
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	ee 1f       	adc	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	a2 17       	cp	r26, r18
    1eec:	b3 07       	cpc	r27, r19
    1eee:	e4 07       	cpc	r30, r20
    1ef0:	f5 07       	cpc	r31, r21
    1ef2:	20 f0       	brcs	.+8      	; 0x1efc <__udivmodsi4_ep>
    1ef4:	a2 1b       	sub	r26, r18
    1ef6:	b3 0b       	sbc	r27, r19
    1ef8:	e4 0b       	sbc	r30, r20
    1efa:	f5 0b       	sbc	r31, r21

00001efc <__udivmodsi4_ep>:
    1efc:	66 1f       	adc	r22, r22
    1efe:	77 1f       	adc	r23, r23
    1f00:	88 1f       	adc	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	1a 94       	dec	r1
    1f06:	69 f7       	brne	.-38     	; 0x1ee2 <__udivmodsi4_loop>
    1f08:	60 95       	com	r22
    1f0a:	70 95       	com	r23
    1f0c:	80 95       	com	r24
    1f0e:	90 95       	com	r25
    1f10:	9b 01       	movw	r18, r22
    1f12:	ac 01       	movw	r20, r24
    1f14:	bd 01       	movw	r22, r26
    1f16:	cf 01       	movw	r24, r30
    1f18:	08 95       	ret

00001f1a <__itoa_ncheck>:
    1f1a:	bb 27       	eor	r27, r27
    1f1c:	4a 30       	cpi	r20, 0x0A	; 10
    1f1e:	31 f4       	brne	.+12     	; 0x1f2c <__itoa_ncheck+0x12>
    1f20:	99 23       	and	r25, r25
    1f22:	22 f4       	brpl	.+8      	; 0x1f2c <__itoa_ncheck+0x12>
    1f24:	bd e2       	ldi	r27, 0x2D	; 45
    1f26:	90 95       	com	r25
    1f28:	81 95       	neg	r24
    1f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2c:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__utoa_common>

00001f30 <__utoa_ncheck>:
    1f30:	bb 27       	eor	r27, r27

00001f32 <__utoa_common>:
    1f32:	fb 01       	movw	r30, r22
    1f34:	55 27       	eor	r21, r21
    1f36:	aa 27       	eor	r26, r26
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	aa 1f       	adc	r26, r26
    1f3e:	a4 17       	cp	r26, r20
    1f40:	10 f0       	brcs	.+4      	; 0x1f46 <__utoa_common+0x14>
    1f42:	a4 1b       	sub	r26, r20
    1f44:	83 95       	inc	r24
    1f46:	50 51       	subi	r21, 0x10	; 16
    1f48:	b9 f7       	brne	.-18     	; 0x1f38 <__utoa_common+0x6>
    1f4a:	a0 5d       	subi	r26, 0xD0	; 208
    1f4c:	aa 33       	cpi	r26, 0x3A	; 58
    1f4e:	08 f0       	brcs	.+2      	; 0x1f52 <__utoa_common+0x20>
    1f50:	a9 5d       	subi	r26, 0xD9	; 217
    1f52:	a1 93       	st	Z+, r26
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	79 f7       	brne	.-34     	; 0x1f36 <__utoa_common+0x4>
    1f58:	b1 11       	cpse	r27, r1
    1f5a:	b1 93       	st	Z+, r27
    1f5c:	11 92       	st	Z+, r1
    1f5e:	cb 01       	movw	r24, r22
    1f60:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <strrev>

00001f64 <strrev>:
    1f64:	dc 01       	movw	r26, r24
    1f66:	fc 01       	movw	r30, r24
    1f68:	67 2f       	mov	r22, r23
    1f6a:	71 91       	ld	r23, Z+
    1f6c:	77 23       	and	r23, r23
    1f6e:	e1 f7       	brne	.-8      	; 0x1f68 <strrev+0x4>
    1f70:	32 97       	sbiw	r30, 0x02	; 2
    1f72:	04 c0       	rjmp	.+8      	; 0x1f7c <strrev+0x18>
    1f74:	7c 91       	ld	r23, X
    1f76:	6d 93       	st	X+, r22
    1f78:	70 83       	st	Z, r23
    1f7a:	62 91       	ld	r22, -Z
    1f7c:	ae 17       	cp	r26, r30
    1f7e:	bf 07       	cpc	r27, r31
    1f80:	c8 f3       	brcs	.-14     	; 0x1f74 <strrev+0x10>
    1f82:	08 95       	ret

00001f84 <eeprom_read_byte>:
    1f84:	e1 99       	sbic	0x1c, 1	; 28
    1f86:	fe cf       	rjmp	.-4      	; 0x1f84 <eeprom_read_byte>
    1f88:	9f bb       	out	0x1f, r25	; 31
    1f8a:	8e bb       	out	0x1e, r24	; 30
    1f8c:	e0 9a       	sbi	0x1c, 0	; 28
    1f8e:	99 27       	eor	r25, r25
    1f90:	8d b3       	in	r24, 0x1d	; 29
    1f92:	08 95       	ret

00001f94 <eeprom_read_word>:
    1f94:	a8 e1       	ldi	r26, 0x18	; 24
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	42 e0       	ldi	r20, 0x02	; 2
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <eeprom_read_blraw>

00001fa0 <eeprom_read_block>:
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22

00001fa4 <eeprom_read_blraw>:
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	e1 99       	sbic	0x1c, 1	; 28
    1fa8:	fe cf       	rjmp	.-4      	; 0x1fa6 <eeprom_read_blraw+0x2>
    1faa:	06 c0       	rjmp	.+12     	; 0x1fb8 <eeprom_read_blraw+0x14>
    1fac:	ff bb       	out	0x1f, r31	; 31
    1fae:	ee bb       	out	0x1e, r30	; 30
    1fb0:	e0 9a       	sbi	0x1c, 0	; 28
    1fb2:	31 96       	adiw	r30, 0x01	; 1
    1fb4:	0d b2       	in	r0, 0x1d	; 29
    1fb6:	0d 92       	st	X+, r0
    1fb8:	41 50       	subi	r20, 0x01	; 1
    1fba:	50 40       	sbci	r21, 0x00	; 0
    1fbc:	b8 f7       	brcc	.-18     	; 0x1fac <eeprom_read_blraw+0x8>
    1fbe:	08 95       	ret

00001fc0 <_exit>:
    1fc0:	f8 94       	cli

00001fc2 <__stop_program>:
    1fc2:	ff cf       	rjmp	.-2      	; 0x1fc2 <__stop_program>
