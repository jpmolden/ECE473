
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800100  00001c6a  00001cfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013f  0080024a  0080024a  00001e48  2**0
                  ALLOC
  3 .stab         00004f2c  00000000  00000000  00001e48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c71  00000000  00000000  00006d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000089e5  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000089f8  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__vector_8>
      24:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_9>
      28:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__vector_10>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 9a 04 	jmp	0x934	; 0x934 <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__vector_18>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	3a 09       	sbc	r19, r10
      8e:	11 09       	sbc	r17, r1
      90:	11 09       	sbc	r17, r1
      92:	11 09       	sbc	r17, r1
      94:	11 09       	sbc	r17, r1
      96:	11 09       	sbc	r17, r1
      98:	11 09       	sbc	r17, r1
      9a:	11 09       	sbc	r17, r1
      9c:	3a 09       	sbc	r19, r10
      9e:	11 09       	sbc	r17, r1
      a0:	11 09       	sbc	r17, r1
      a2:	11 09       	sbc	r17, r1
      a4:	11 09       	sbc	r17, r1
      a6:	11 09       	sbc	r17, r1
      a8:	11 09       	sbc	r17, r1
      aa:	11 09       	sbc	r17, r1
      ac:	44 09       	sbc	r20, r4
      ae:	11 09       	sbc	r17, r1
      b0:	11 09       	sbc	r17, r1
      b2:	11 09       	sbc	r17, r1
      b4:	11 09       	sbc	r17, r1
      b6:	11 09       	sbc	r17, r1
      b8:	11 09       	sbc	r17, r1
      ba:	11 09       	sbc	r17, r1
      bc:	11 09       	sbc	r17, r1
      be:	11 09       	sbc	r17, r1
      c0:	11 09       	sbc	r17, r1
      c2:	11 09       	sbc	r17, r1
      c4:	11 09       	sbc	r17, r1
      c6:	11 09       	sbc	r17, r1
      c8:	11 09       	sbc	r17, r1
      ca:	11 09       	sbc	r17, r1
      cc:	44 09       	sbc	r20, r4
      ce:	11 09       	sbc	r17, r1
      d0:	11 09       	sbc	r17, r1
      d2:	11 09       	sbc	r17, r1
      d4:	11 09       	sbc	r17, r1
      d6:	11 09       	sbc	r17, r1
      d8:	11 09       	sbc	r17, r1
      da:	11 09       	sbc	r17, r1
      dc:	11 09       	sbc	r17, r1
      de:	11 09       	sbc	r17, r1
      e0:	11 09       	sbc	r17, r1
      e2:	11 09       	sbc	r17, r1
      e4:	11 09       	sbc	r17, r1
      e6:	11 09       	sbc	r17, r1
      e8:	11 09       	sbc	r17, r1
      ea:	11 09       	sbc	r17, r1
      ec:	5b 09       	sbc	r21, r11
      ee:	11 09       	sbc	r17, r1
      f0:	11 09       	sbc	r17, r1
      f2:	11 09       	sbc	r17, r1
      f4:	11 09       	sbc	r17, r1
      f6:	11 09       	sbc	r17, r1
      f8:	11 09       	sbc	r17, r1
      fa:	11 09       	sbc	r17, r1
      fc:	5f 09       	sbc	r21, r15
      fe:	11 09       	sbc	r17, r1
     100:	11 09       	sbc	r17, r1
     102:	11 09       	sbc	r17, r1
     104:	11 09       	sbc	r17, r1
     106:	11 09       	sbc	r17, r1
     108:	11 09       	sbc	r17, r1
     10a:	11 09       	sbc	r17, r1
     10c:	11 09       	sbc	r17, r1
     10e:	11 09       	sbc	r17, r1
     110:	11 09       	sbc	r17, r1
     112:	11 09       	sbc	r17, r1
     114:	11 09       	sbc	r17, r1
     116:	11 09       	sbc	r17, r1
     118:	11 09       	sbc	r17, r1
     11a:	11 09       	sbc	r17, r1
     11c:	6d 09       	sbc	r22, r13
     11e:	11 09       	sbc	r17, r1
     120:	11 09       	sbc	r17, r1
     122:	11 09       	sbc	r17, r1
     124:	11 09       	sbc	r17, r1
     126:	11 09       	sbc	r17, r1
     128:	11 09       	sbc	r17, r1
     12a:	11 09       	sbc	r17, r1
     12c:	2b 09       	sbc	r18, r11

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	ea e6       	ldi	r30, 0x6A	; 106
     142:	fc e1       	ldi	r31, 0x1C	; 28
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	aa 34       	cpi	r26, 0x4A	; 74
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e0       	ldi	r18, 0x03	; 3
     156:	aa e4       	ldi	r26, 0x4A	; 74
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a9 38       	cpi	r26, 0x89	; 137
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 9e 0c 	call	0x193c	; 0x193c <main>
     168:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <spi_init>:

//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(){
  DDRB   = 0xF7; //output mode for SS, MOSI, SCLK & Pins 4-7 (7Seg & Bar Graph)
     170:	87 ef       	ldi	r24, 0xF7	; 247
     172:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); // Enable SPI, master mode, clk low on idle, leading edge sample
     174:	80 e5       	ldi	r24, 0x50	; 80
     176:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (0<<SPI2X); //No double speed operation
     178:	1e b8       	out	0x0e, r1	; 14
     17a:	08 95       	ret

0000017c <init_tcnt0>:
// Triggers a 1 sec TOV Interrupt.
//
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
     17c:	80 b7       	in	r24, 0x30	; 48
     17e:	88 60       	ori	r24, 0x08	; 8
     180:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE0);  //TimerOverflow Interrupt Enable
     182:	87 b7       	in	r24, 0x37	; 55
     184:	81 60       	ori	r24, 0x01	; 1
     186:	87 bf       	out	0x37, r24	; 55
  TCCR0 =  (1<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode, 128 prescale, OC0 Disconnected
     188:	85 e0       	ldi	r24, 0x05	; 5
     18a:	83 bf       	out	0x33, r24	; 51
     18c:	08 95       	ret

0000018e <init_tcnt1>:
//
// setup TCNT1 in pwm mode
// set OC1A (PB5) as pwm output
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);
     18e:	8f b5       	in	r24, 0x2f	; 47
     190:	82 60       	ori	r24, 0x02	; 2
     192:	8f bd       	out	0x2f, r24	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10);
     194:	8e b5       	in	r24, 0x2e	; 46
     196:	89 61       	ori	r24, 0x19	; 25
     198:	8e bd       	out	0x2e, r24	; 46
	//no forced compare
	TCCR1C = 0x00;
     19a:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 ec       	ldi	r25, 0xC0	; 192
     1a2:	9b bd       	out	0x2b, r25	; 43
     1a4:	8a bd       	out	0x2a, r24	; 42
	ICR1  = 0xF000; //clear at 0xF000
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 ef       	ldi	r25, 0xF0	; 240
     1aa:	97 bd       	out	0x27, r25	; 39
     1ac:	86 bd       	out	0x26, r24	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
     1ae:	87 b7       	in	r24, 0x37	; 55
     1b0:	80 61       	ori	r24, 0x10	; 16
     1b2:	87 bf       	out	0x37, r24	; 55
     1b4:	08 95       	ret

000001b6 <init_tcnt2>:
//**********************************************************************
void init_tcnt2(){
// 7-Seg Brigtness PWM

  //enable interrupts for Timer/Counter2 overflow
  TIMSK |= (1<<TOIE2) | (0<<OCIE2);  //TimerOverflow Interrupt Enable
     1b6:	87 b7       	in	r24, 0x37	; 55
     1b8:	80 64       	ori	r24, 0x40	; 64
     1ba:	87 bf       	out	0x37, r24	; 55
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (1<<CS21) | (1<<CS20);
     1bc:	8b e7       	ldi	r24, 0x7B	; 123
     1be:	85 bd       	out	0x25, r24	; 37
	//Fast-PWM mode, Inverting PWM Mode, 64 prescale, OC2(PB7)(PWM) Connected
	//0-256 takes 1ms (16k CLKIO cycles)
  OCR2 =  0xF0;                   //compare at 128(50%)
     1c0:	80 ef       	ldi	r24, 0xF0	; 240
     1c2:	83 bd       	out	0x23, r24	; 35
     1c4:	08 95       	ret

000001c6 <init_tcnt3>:
//                            timer/counter3_init
//**********************************************************************
void init_tcnt3(){
// Volume PWM
// setup TCNT3 in pwm mode
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0) | (0<<WGM31) | (1<<WGM30);
     1c6:	eb e8       	ldi	r30, 0x8B	; 139
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	81 68       	ori	r24, 0x81	; 129
     1ce:	80 83       	st	Z, r24
	// Fast PWM, 8-Bit mode top 0x00FF
	// Clear OC3A on compare match, Fast PWM (non-inverting)
	//use ICR1 as source for TOP, use clk/1
	TCCR3B |= (0<<WGM33) | (1<< WGM32) | (1<<CS30);
     1d0:	ea e8       	ldi	r30, 0x8A	; 138
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	89 60       	ori	r24, 0x09	; 9
     1d8:	80 83       	st	Z, r24
	// No prescaling
	//no forced compare
	TCCR3C = 0x00;
     1da:	10 92 8c 00 	sts	0x008C, r1
	//20% duty cycle, LED is a bit dimmer
	OCR3A = 0x00CD; // Initally at 50% Duty Cycle
     1de:	8d ec       	ldi	r24, 0xCD	; 205
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	90 93 87 00 	sts	0x0087, r25
     1e6:	80 93 86 00 	sts	0x0086, r24
     1ea:	08 95       	ret

000001ec <init_DDRs>:
//                            timer/counter0_init
//**********************************************************************
void init_DDRs(){
// Add HERE
	// Set the DDR for Ports
	DDRA = DDRA_OUTPUT; // 7-Seg Data out
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	8a bb       	out	0x1a, r24	; 26
	DDRE = (1<<PE3) | (1<<PE5) | (1<<PE6) | (1<<PE7);
     1f0:	88 ee       	ldi	r24, 0xE8	; 232
     1f2:	82 b9       	out	0x02, r24	; 2
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
     1f4:	84 e0       	ldi	r24, 0x04	; 4
     1f6:	81 bb       	out	0x11, r24	; 17
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	84 bb       	out	0x14, r24	; 20
	incdec_mode = 0x01;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 4f 02 	sts	0x024F, r24
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
     202:	85 e5       	ldi	r24, 0x55	; 85
     204:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
     206:	77 9b       	sbis	0x0e, 7	; 14
     208:	fe cf       	rjmp	.-4      	; 0x206 <init_DDRs+0x1a>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
     20a:	8f b1       	in	r24, 0x0f	; 15
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
	incdec_mode = 0x01;
	// Read the starting encoder positions
	old_encoder = spi_rw8(0x55);
     20c:	80 93 4c 02 	sts	0x024C, r24
     210:	08 95       	ret

00000212 <init_ADC>:
//                            init_adc
//**********************************************************************
void init_ADC(){
// ADC used to read brightness levels using a photoresistor
	//Initalize ADC and its ports
	DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input
     212:	e1 e6       	ldi	r30, 0x61	; 97
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	8f 77       	andi	r24, 0x7F	; 127
     21a:	80 83       	st	Z, r24
	PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
     21c:	e2 e6       	ldi	r30, 0x62	; 98
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	8f 77       	andi	r24, 0x7F	; 127
     224:	80 83       	st	Z, r24

	ADMUX = (1<<ADLAR) | (1<<REFS0) | (1<<MUX0) | (1<<MUX1) | (1<<MUX2);
     226:	87 e6       	ldi	r24, 0x67	; 103
     228:	87 b9       	out	0x07, r24	; 7
	//ADMUX = (1<<MUX0) | (1<<MUX1) | (1<<MUX2)
	//single-ended, input PORTF bit 7, right adjusted, 10 bits

	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     22a:	87 e8       	ldi	r24, 0x87	; 135
     22c:	86 b9       	out	0x06, r24	; 6
     22e:	08 95       	ret

00000230 <disable_tcnt1>:
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
     230:	88 e1       	ldi	r24, 0x18	; 24
     232:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
     234:	87 b7       	in	r24, 0x37	; 55
     236:	8f 7e       	andi	r24, 0xEF	; 239
     238:	87 bf       	out	0x37, r24	; 55
     23a:	08 95       	ret

0000023c <disable_timer2>:
// Add HERE
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  //enable interrupts for output compare match 0
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (0<<CS21) | (0<<CS20);
     23c:	88 e7       	ldi	r24, 0x78	; 120
     23e:	85 bd       	out	0x25, r24	; 37
     240:	08 95       	ret

00000242 <spi_rw8>:
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
     242:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
     244:	77 9b       	sbis	0x0e, 7	; 14
     246:	fe cf       	rjmp	.-4      	; 0x244 <spi_rw8+0x2>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
     248:	8f b1       	in	r24, 0x0f	; 15
	return(data);
}
     24a:	08 95       	ret

0000024c <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
     24c:	48 2f       	mov	r20, r24
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     24e:	e8 2f       	mov	r30, r24
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	99 b3       	in	r25, 0x19	; 25
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	ef 5a       	subi	r30, 0xAF	; 175
     25a:	fd 4f       	sbci	r31, 0xFD	; 253
     25c:	20 81       	ld	r18, Z
     25e:	31 81       	ldd	r19, Z+1	; 0x01
     260:	22 0f       	add	r18, r18
     262:	33 1f       	adc	r19, r19
     264:	30 6e       	ori	r19, 0xE0	; 224
     266:	89 2f       	mov	r24, r25
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <chk_buttons+0x24>
     26c:	95 95       	asr	r25
     26e:	87 95       	ror	r24
     270:	4a 95       	dec	r20
     272:	e2 f7       	brpl	.-8      	; 0x26c <chk_buttons+0x20>
     274:	81 70       	andi	r24, 0x01	; 1
     276:	99 27       	eor	r25, r25
     278:	28 2b       	or	r18, r24
     27a:	39 2b       	or	r19, r25
     27c:	31 83       	std	Z+1, r19	; 0x01
     27e:	20 83       	st	Z, r18
        if(state[button] == 0xF000) return 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	21 15       	cp	r18, r1
     284:	30 4f       	sbci	r19, 0xF0	; 240
     286:	09 f0       	breq	.+2      	; 0x28a <chk_buttons+0x3e>
     288:	80 e0       	ldi	r24, 0x00	; 0
        return 0;

//******************************************************************************
}
     28a:	08 95       	ret

0000028c <volume_up>:


//***********************************************************************
//                            volume_up
//**********************************************************************
void volume_up(){
     28c:	08 95       	ret

0000028e <volume_down>:


//***********************************************************************
//                            volume_down
//**********************************************************************
void volume_down(){
     28e:	08 95       	ret

00000290 <segsum>:
        //if(sum >= 1)(no_digits = 1);
        //if(sum >= 10)(no_digits = 2);
        //if(sum >= 100)(no_digits = 3);
        //if(sum >= 1000)(no_digits = 4);

	switch(xmode){
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	09 f4       	brne	.+2      	; 0x296 <segsum+0x6>
     294:	4e c0       	rjmp	.+156    	; 0x332 <segsum+0xa2>
     296:	08 f4       	brcc	.+2      	; 0x29a <segsum+0xa>
     298:	ac c0       	rjmp	.+344    	; 0x3f2 <segsum+0x162>
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	19 f0       	breq	.+6      	; 0x2a4 <segsum+0x14>
     29e:	83 30       	cpi	r24, 0x03	; 3
     2a0:	c1 f1       	breq	.+112    	; 0x312 <segsum+0x82>
     2a2:	08 95       	ret
			// Alarm armed bit into same position as L3 on 7Seg
			segment_data[3] = dec_to_7seg[((alarm_hours)/1) %10];
			segment_data[4] = dec_to_7seg[((alarm_hours)/10) %10];
			break;
		case Clock_set_mode:
			if((seconds % 2) == 1){
     2a4:	80 91 03 01 	lds	r24, 0x0103
     2a8:	80 ff       	sbrs	r24, 0
     2aa:	37 c0       	rjmp	.+110    	; 0x31a <segsum+0x8a>
				segment_data[0] = dec_to_7seg[(mins/1) %10];
     2ac:	e0 91 04 01 	lds	r30, 0x0104
     2b0:	8d ec       	ldi	r24, 0xCD	; 205
     2b2:	e8 9f       	mul	r30, r24
     2b4:	91 2d       	mov	r25, r1
     2b6:	11 24       	eor	r1, r1
     2b8:	96 95       	lsr	r25
     2ba:	96 95       	lsr	r25
     2bc:	96 95       	lsr	r25
     2be:	2a e0       	ldi	r18, 0x0A	; 10
     2c0:	92 9f       	mul	r25, r18
     2c2:	e0 19       	sub	r30, r0
     2c4:	11 24       	eor	r1, r1
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	e0 5c       	subi	r30, 0xC0	; 192
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	90 81       	ld	r25, Z
     2ce:	90 93 9a 02 	sts	0x029A, r25
				segment_data[1] = dec_to_7seg[(mins/10) %10];
     2d2:	e0 91 04 01 	lds	r30, 0x0104
     2d6:	e8 9f       	mul	r30, r24
     2d8:	e1 2d       	mov	r30, r1
     2da:	11 24       	eor	r1, r1
     2dc:	e6 95       	lsr	r30
     2de:	e6 95       	lsr	r30
     2e0:	e6 95       	lsr	r30
     2e2:	e8 9f       	mul	r30, r24
     2e4:	91 2d       	mov	r25, r1
     2e6:	11 24       	eor	r1, r1
     2e8:	96 95       	lsr	r25
     2ea:	96 95       	lsr	r25
     2ec:	96 95       	lsr	r25
     2ee:	2a e0       	ldi	r18, 0x0A	; 10
     2f0:	92 9f       	mul	r25, r18
     2f2:	e0 19       	sub	r30, r0
     2f4:	11 24       	eor	r1, r1
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	e0 5c       	subi	r30, 0xC0	; 192
     2fa:	fe 4f       	sbci	r31, 0xFE	; 254
     2fc:	90 81       	ld	r25, Z
     2fe:	90 93 9b 02 	sts	0x029B, r25
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
     302:	90 91 06 01 	lds	r25, 0x0106
     306:	99 0f       	add	r25, r25
     308:	99 0f       	add	r25, r25
     30a:	90 95       	com	r25
     30c:	20 91 4b 01 	lds	r18, 0x014B
     310:	a9 c0       	rjmp	.+338    	; 0x464 <segsum+0x1d4>
				segment_data[3] = SEG_OFF;
				segment_data[4] = SEG_OFF;
			break;
			}
		case Alarm_set_mode:
			if((seconds % 2) == 1){
     312:	80 91 03 01 	lds	r24, 0x0103
     316:	80 fd       	sbrc	r24, 0
     318:	0c c0       	rjmp	.+24     	; 0x332 <segsum+0xa2>
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((hours)/1) %10];
				segment_data[4] = dec_to_7seg[((hours)/10) %10];
				break;
			}else{
				segment_data[0] = SEG_OFF;
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	80 93 9a 02 	sts	0x029A, r24
				segment_data[1] = SEG_OFF;
     320:	80 93 9b 02 	sts	0x029B, r24
				segment_data[2] = SEG_OFF;
     324:	80 93 9c 02 	sts	0x029C, r24
				segment_data[3] = SEG_OFF;
     328:	80 93 9d 02 	sts	0x029D, r24
				segment_data[4] = SEG_OFF;
     32c:	80 93 9e 02 	sts	0x029E, r24
			break;
     330:	08 95       	ret
			}
		case Alarm_set_mode:
			if((seconds % 2) == 1){
				segment_data[0] = dec_to_7seg[(alarm_mins/1) %10];
     332:	e0 91 01 01 	lds	r30, 0x0101
     336:	8d ec       	ldi	r24, 0xCD	; 205
     338:	e8 9f       	mul	r30, r24
     33a:	91 2d       	mov	r25, r1
     33c:	11 24       	eor	r1, r1
     33e:	96 95       	lsr	r25
     340:	96 95       	lsr	r25
     342:	96 95       	lsr	r25
     344:	2a e0       	ldi	r18, 0x0A	; 10
     346:	92 9f       	mul	r25, r18
     348:	e0 19       	sub	r30, r0
     34a:	11 24       	eor	r1, r1
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	e0 5c       	subi	r30, 0xC0	; 192
     350:	fe 4f       	sbci	r31, 0xFE	; 254
     352:	90 81       	ld	r25, Z
     354:	90 93 9a 02 	sts	0x029A, r25
				segment_data[1] = dec_to_7seg[(alarm_mins/10) %10];
     358:	e0 91 01 01 	lds	r30, 0x0101
     35c:	e8 9f       	mul	r30, r24
     35e:	e1 2d       	mov	r30, r1
     360:	11 24       	eor	r1, r1
     362:	e6 95       	lsr	r30
     364:	e6 95       	lsr	r30
     366:	e6 95       	lsr	r30
     368:	e8 9f       	mul	r30, r24
     36a:	91 2d       	mov	r25, r1
     36c:	11 24       	eor	r1, r1
     36e:	96 95       	lsr	r25
     370:	96 95       	lsr	r25
     372:	96 95       	lsr	r25
     374:	2a e0       	ldi	r18, 0x0A	; 10
     376:	92 9f       	mul	r25, r18
     378:	e0 19       	sub	r30, r0
     37a:	11 24       	eor	r1, r1
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	e0 5c       	subi	r30, 0xC0	; 192
     380:	fe 4f       	sbci	r31, 0xFE	; 254
     382:	90 81       	ld	r25, Z
     384:	90 93 9b 02 	sts	0x029B, r25
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
     388:	90 91 06 01 	lds	r25, 0x0106
     38c:	99 0f       	add	r25, r25
     38e:	99 0f       	add	r25, r25
     390:	90 95       	com	r25
     392:	20 91 4b 01 	lds	r18, 0x014B
     396:	92 23       	and	r25, r18
     398:	90 93 9c 02 	sts	0x029C, r25
				//in dec_to_7seg index 11 = OFF, index 12 = Colon
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((alarm_hours)/1) %10];
     39c:	e0 91 02 01 	lds	r30, 0x0102
     3a0:	e8 9f       	mul	r30, r24
     3a2:	91 2d       	mov	r25, r1
     3a4:	11 24       	eor	r1, r1
     3a6:	96 95       	lsr	r25
     3a8:	96 95       	lsr	r25
     3aa:	96 95       	lsr	r25
     3ac:	2a e0       	ldi	r18, 0x0A	; 10
     3ae:	92 9f       	mul	r25, r18
     3b0:	e0 19       	sub	r30, r0
     3b2:	11 24       	eor	r1, r1
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	e0 5c       	subi	r30, 0xC0	; 192
     3b8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ba:	90 81       	ld	r25, Z
     3bc:	90 93 9d 02 	sts	0x029D, r25
				segment_data[4] = dec_to_7seg[((alarm_hours)/10) %10];
     3c0:	e0 91 02 01 	lds	r30, 0x0102
     3c4:	e8 9f       	mul	r30, r24
     3c6:	e1 2d       	mov	r30, r1
     3c8:	11 24       	eor	r1, r1
     3ca:	e6 95       	lsr	r30
     3cc:	e6 95       	lsr	r30
     3ce:	e6 95       	lsr	r30
     3d0:	e8 9f       	mul	r30, r24
     3d2:	81 2d       	mov	r24, r1
     3d4:	11 24       	eor	r1, r1
     3d6:	86 95       	lsr	r24
     3d8:	86 95       	lsr	r24
     3da:	86 95       	lsr	r24
     3dc:	9a e0       	ldi	r25, 0x0A	; 10
     3de:	89 9f       	mul	r24, r25
     3e0:	e0 19       	sub	r30, r0
     3e2:	11 24       	eor	r1, r1
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	e0 5c       	subi	r30, 0xC0	; 192
     3e8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ea:	80 81       	ld	r24, Z
     3ec:	80 93 9e 02 	sts	0x029E, r24
     3f0:	08 95       	ret

	switch(xmode){
		case Clock_mode:
		  	//break up decimal sum into 4 digit-segment
			//The digits (0-9) are used as the index for the seven segment representation
			segment_data[0] = dec_to_7seg[(mins/1) %10];
     3f2:	e0 91 04 01 	lds	r30, 0x0104
     3f6:	8d ec       	ldi	r24, 0xCD	; 205
     3f8:	e8 9f       	mul	r30, r24
     3fa:	91 2d       	mov	r25, r1
     3fc:	11 24       	eor	r1, r1
     3fe:	96 95       	lsr	r25
     400:	96 95       	lsr	r25
     402:	96 95       	lsr	r25
     404:	2a e0       	ldi	r18, 0x0A	; 10
     406:	92 9f       	mul	r25, r18
     408:	e0 19       	sub	r30, r0
     40a:	11 24       	eor	r1, r1
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	e0 5c       	subi	r30, 0xC0	; 192
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	90 81       	ld	r25, Z
     414:	90 93 9a 02 	sts	0x029A, r25
			segment_data[1] = dec_to_7seg[(mins/10) %10];
     418:	e0 91 04 01 	lds	r30, 0x0104
     41c:	e8 9f       	mul	r30, r24
     41e:	e1 2d       	mov	r30, r1
     420:	11 24       	eor	r1, r1
     422:	e6 95       	lsr	r30
     424:	e6 95       	lsr	r30
     426:	e6 95       	lsr	r30
     428:	e8 9f       	mul	r30, r24
     42a:	91 2d       	mov	r25, r1
     42c:	11 24       	eor	r1, r1
     42e:	96 95       	lsr	r25
     430:	96 95       	lsr	r25
     432:	96 95       	lsr	r25
     434:	2a e0       	ldi	r18, 0x0A	; 10
     436:	92 9f       	mul	r25, r18
     438:	e0 19       	sub	r30, r0
     43a:	11 24       	eor	r1, r1
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	e0 5c       	subi	r30, 0xC0	; 192
     440:	fe 4f       	sbci	r31, 0xFE	; 254
     442:	90 81       	ld	r25, Z
     444:	90 93 9b 02 	sts	0x029B, r25
			if((xmode == Clock_mode)){
				segment_data[2] = dec_to_7seg[10 + (seconds % 2)] & (~(alarm_armed<<2));
     448:	40 91 03 01 	lds	r20, 0x0103
     44c:	90 91 06 01 	lds	r25, 0x0106
     450:	24 2f       	mov	r18, r20
     452:	21 70       	andi	r18, 0x01	; 1
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	f9 01       	movw	r30, r18
     458:	e0 5c       	subi	r30, 0xC0	; 192
     45a:	fe 4f       	sbci	r31, 0xFE	; 254
     45c:	99 0f       	add	r25, r25
     45e:	99 0f       	add	r25, r25
     460:	90 95       	com	r25
     462:	22 85       	ldd	r18, Z+10	; 0x0a
			break;
		case Clock_set_mode:
			if((seconds % 2) == 1){
				segment_data[0] = dec_to_7seg[(mins/1) %10];
				segment_data[1] = dec_to_7seg[(mins/10) %10];
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
     464:	92 23       	and	r25, r18
     466:	90 93 9c 02 	sts	0x029C, r25
				//in dec_to_7seg index 11 = OFF, index 12 = Colon
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((hours)/1) %10];
     46a:	e0 91 05 01 	lds	r30, 0x0105
     46e:	e8 9f       	mul	r30, r24
     470:	91 2d       	mov	r25, r1
     472:	11 24       	eor	r1, r1
     474:	96 95       	lsr	r25
     476:	96 95       	lsr	r25
     478:	96 95       	lsr	r25
     47a:	2a e0       	ldi	r18, 0x0A	; 10
     47c:	92 9f       	mul	r25, r18
     47e:	e0 19       	sub	r30, r0
     480:	11 24       	eor	r1, r1
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	e0 5c       	subi	r30, 0xC0	; 192
     486:	fe 4f       	sbci	r31, 0xFE	; 254
     488:	90 81       	ld	r25, Z
     48a:	90 93 9d 02 	sts	0x029D, r25
				segment_data[4] = dec_to_7seg[((hours)/10) %10];
     48e:	e0 91 05 01 	lds	r30, 0x0105
     492:	98 cf       	rjmp	.-208    	; 0x3c4 <segsum+0x134>

00000494 <encoders>:
	// The direction is determined by a state machine look up table 0=no change
	// 1=CCW, 2=CW
	//The old encoder value is place in posistion in b2 b3, 0x03 masks out other 1's

	uint8_t direction = 0;
	switch(clockmode){
     494:	80 91 4e 02 	lds	r24, 0x024E
     498:	82 30       	cpi	r24, 0x02	; 2
     49a:	09 f4       	brne	.+2      	; 0x49e <encoders+0xa>
     49c:	40 c0       	rjmp	.+128    	; 0x51e <encoders+0x8a>
     49e:	83 30       	cpi	r24, 0x03	; 3
     4a0:	c9 f5       	brne	.+114    	; 0x514 <encoders+0x80>
					break;
			}
			break;
		case Alarm_set_mode:
			//Check encoder 1
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
     4a2:	e0 91 4c 02 	lds	r30, 0x024C
     4a6:	80 91 4d 02 	lds	r24, 0x024D
     4aa:	e3 70       	andi	r30, 0x03	; 3
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	ee 0f       	add	r30, r30
     4b0:	ff 1f       	adc	r31, r31
     4b2:	ee 0f       	add	r30, r30
     4b4:	ff 1f       	adc	r31, r31
     4b6:	83 70       	andi	r24, 0x03	; 3
     4b8:	e8 2b       	or	r30, r24
     4ba:	e9 5d       	subi	r30, 0xD9	; 217
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     4be:	80 81       	ld	r24, Z
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <encoders+0x32>
     4c4:	84 c0       	rjmp	.+264    	; 0x5ce <encoders+0x13a>
     4c6:	82 30       	cpi	r24, 0x02	; 2
     4c8:	51 f4       	brne	.+20     	; 0x4de <encoders+0x4a>
					}else{
						alarm_mins = 59;
					}
					break;
				case 2:
					if(alarm_mins < 59){
     4ca:	80 91 01 01 	lds	r24, 0x0101
     4ce:	8b 33       	cpi	r24, 0x3B	; 59
     4d0:	08 f0       	brcs	.+2      	; 0x4d4 <encoders+0x40>
     4d2:	8a c0       	rjmp	.+276    	; 0x5e8 <encoders+0x154>
						alarm_mins = alarm_mins + 1;
     4d4:	80 91 01 01 	lds	r24, 0x0101
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	80 93 01 01 	sts	0x0101, r24
					break;
			}
// Hi

			//Check encoder 2
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
     4de:	80 91 4c 02 	lds	r24, 0x024C
     4e2:	e0 91 4d 02 	lds	r30, 0x024D
     4e6:	ec 70       	andi	r30, 0x0C	; 12
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	f5 95       	asr	r31
     4ec:	e7 95       	ror	r30
     4ee:	f5 95       	asr	r31
     4f0:	e7 95       	ror	r30
     4f2:	8c 70       	andi	r24, 0x0C	; 12
     4f4:	e8 2b       	or	r30, r24
     4f6:	e9 5d       	subi	r30, 0xD9	; 217
     4f8:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     4fa:	80 81       	ld	r24, Z
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	09 f4       	brne	.+2      	; 0x502 <encoders+0x6e>
     500:	5c c0       	rjmp	.+184    	; 0x5ba <encoders+0x126>
     502:	82 30       	cpi	r24, 0x02	; 2
     504:	39 f4       	brne	.+14     	; 0x514 <encoders+0x80>
					}else{
						alarm_hours = 23;
					}
					break;
				case 2:
					if(alarm_hours < 23){
     506:	80 91 02 01 	lds	r24, 0x0102
     50a:	87 31       	cpi	r24, 0x17	; 23
     50c:	08 f4       	brcc	.+2      	; 0x510 <encoders+0x7c>
     50e:	82 c0       	rjmp	.+260    	; 0x614 <encoders+0x180>
						alarm_hours = alarm_hours + 1;
					}else{
						alarm_hours = 0;
     510:	10 92 02 01 	sts	0x0102, r1
			break;
		default:
			break;
	}
	//Replace the old encoder value
	old_encoder = encoder;
     514:	80 91 4d 02 	lds	r24, 0x024D
     518:	80 93 4c 02 	sts	0x024C, r24
     51c:	08 95       	ret
		case Alarm_mode:
			// Do Nothing
			break;
		case Clock_set_mode:
			//Check encoder 1
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
     51e:	e0 91 4c 02 	lds	r30, 0x024C
     522:	80 91 4d 02 	lds	r24, 0x024D
     526:	e3 70       	andi	r30, 0x03	; 3
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	ee 0f       	add	r30, r30
     530:	ff 1f       	adc	r31, r31
     532:	83 70       	andi	r24, 0x03	; 3
     534:	e8 2b       	or	r30, r24
     536:	e9 5d       	subi	r30, 0xD9	; 217
     538:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     53a:	80 81       	ld	r24, Z
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	49 f1       	breq	.+82     	; 0x592 <encoders+0xfe>
     540:	82 30       	cpi	r24, 0x02	; 2
     542:	51 f4       	brne	.+20     	; 0x558 <encoders+0xc4>
					}else{
						mins = 59;
					}
					break;
				case 2:
					if(mins < 59){
     544:	80 91 04 01 	lds	r24, 0x0104
     548:	8b 33       	cpi	r24, 0x3B	; 59
     54a:	08 f0       	brcs	.+2      	; 0x54e <encoders+0xba>
     54c:	54 c0       	rjmp	.+168    	; 0x5f6 <encoders+0x162>
						mins = mins + 1;
     54e:	80 91 04 01 	lds	r24, 0x0104
     552:	8f 5f       	subi	r24, 0xFF	; 255
     554:	80 93 04 01 	sts	0x0104, r24
					break;
			}


			//Check encoder 2
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
     558:	80 91 4c 02 	lds	r24, 0x024C
     55c:	e0 91 4d 02 	lds	r30, 0x024D
     560:	ec 70       	andi	r30, 0x0C	; 12
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	f5 95       	asr	r31
     566:	e7 95       	ror	r30
     568:	f5 95       	asr	r31
     56a:	e7 95       	ror	r30
     56c:	8c 70       	andi	r24, 0x0C	; 12
     56e:	e8 2b       	or	r30, r24
     570:	e9 5d       	subi	r30, 0xD9	; 217
     572:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     574:	80 81       	ld	r24, Z
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	b1 f0       	breq	.+44     	; 0x5a6 <encoders+0x112>
     57a:	82 30       	cpi	r24, 0x02	; 2
     57c:	59 f6       	brne	.-106    	; 0x514 <encoders+0x80>
					}else{
						hours = 23;
					}
					break;
				case 2:
					if(hours < 23){
     57e:	80 91 05 01 	lds	r24, 0x0105
     582:	87 31       	cpi	r24, 0x17	; 23
     584:	70 f5       	brcc	.+92     	; 0x5e2 <encoders+0x14e>
						hours = hours + 1;
     586:	80 91 05 01 	lds	r24, 0x0105
     58a:	8f 5f       	subi	r24, 0xFF	; 255
     58c:	80 93 05 01 	sts	0x0105, r24
     590:	c1 cf       	rjmp	.-126    	; 0x514 <encoders+0x80>
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(mins > 0){
     592:	80 91 04 01 	lds	r24, 0x0104
     596:	88 23       	and	r24, r24
     598:	a9 f1       	breq	.+106    	; 0x604 <encoders+0x170>
						mins = mins - 1;
     59a:	80 91 04 01 	lds	r24, 0x0104
     59e:	81 50       	subi	r24, 0x01	; 1
     5a0:	80 93 04 01 	sts	0x0104, r24
     5a4:	d9 cf       	rjmp	.-78     	; 0x558 <encoders+0xc4>
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(hours > 0){
     5a6:	80 91 05 01 	lds	r24, 0x0105
     5aa:	88 23       	and	r24, r24
     5ac:	39 f1       	breq	.+78     	; 0x5fc <encoders+0x168>
						hours = hours - 1;
     5ae:	80 91 05 01 	lds	r24, 0x0105
     5b2:	81 50       	subi	r24, 0x01	; 1
     5b4:	80 93 05 01 	sts	0x0105, r24
     5b8:	ad cf       	rjmp	.-166    	; 0x514 <encoders+0x80>
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(alarm_hours > 0){
     5ba:	80 91 02 01 	lds	r24, 0x0102
     5be:	88 23       	and	r24, r24
     5c0:	29 f1       	breq	.+74     	; 0x60c <encoders+0x178>
						alarm_hours = alarm_hours - 1;
     5c2:	80 91 02 01 	lds	r24, 0x0102
     5c6:	81 50       	subi	r24, 0x01	; 1
     5c8:	80 93 02 01 	sts	0x0102, r24
     5cc:	a3 cf       	rjmp	.-186    	; 0x514 <encoders+0x80>
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(alarm_mins > 0){
     5ce:	80 91 01 01 	lds	r24, 0x0101
     5d2:	88 23       	and	r24, r24
     5d4:	61 f0       	breq	.+24     	; 0x5ee <encoders+0x15a>
						alarm_mins = alarm_mins - 1;
     5d6:	80 91 01 01 	lds	r24, 0x0101
     5da:	81 50       	subi	r24, 0x01	; 1
     5dc:	80 93 01 01 	sts	0x0101, r24
     5e0:	7e cf       	rjmp	.-260    	; 0x4de <encoders+0x4a>
					break;
				case 2:
					if(hours < 23){
						hours = hours + 1;
					}else{
						hours = 0;
     5e2:	10 92 05 01 	sts	0x0105, r1
     5e6:	96 cf       	rjmp	.-212    	; 0x514 <encoders+0x80>
					break;
				case 2:
					if(alarm_mins < 59){
						alarm_mins = alarm_mins + 1;
					}else{
						alarm_mins = 0;
     5e8:	10 92 01 01 	sts	0x0101, r1
     5ec:	78 cf       	rjmp	.-272    	; 0x4de <encoders+0x4a>
					break;
				case 1:
					if(alarm_mins > 0){
						alarm_mins = alarm_mins - 1;
					}else{
						alarm_mins = 59;
     5ee:	8b e3       	ldi	r24, 0x3B	; 59
     5f0:	80 93 01 01 	sts	0x0101, r24
     5f4:	74 cf       	rjmp	.-280    	; 0x4de <encoders+0x4a>
					break;
				case 2:
					if(mins < 59){
						mins = mins + 1;
					}else{
						mins = 0;
     5f6:	10 92 04 01 	sts	0x0104, r1
     5fa:	ae cf       	rjmp	.-164    	; 0x558 <encoders+0xc4>
					break;
				case 1:
					if(hours > 0){
						hours = hours - 1;
					}else{
						hours = 23;
     5fc:	87 e1       	ldi	r24, 0x17	; 23
     5fe:	80 93 05 01 	sts	0x0105, r24
     602:	88 cf       	rjmp	.-240    	; 0x514 <encoders+0x80>
					break;
				case 1:
					if(mins > 0){
						mins = mins - 1;
					}else{
						mins = 59;
     604:	8b e3       	ldi	r24, 0x3B	; 59
     606:	80 93 04 01 	sts	0x0104, r24
     60a:	a6 cf       	rjmp	.-180    	; 0x558 <encoders+0xc4>
					break;
				case 1:
					if(alarm_hours > 0){
						alarm_hours = alarm_hours - 1;
					}else{
						alarm_hours = 23;
     60c:	87 e1       	ldi	r24, 0x17	; 23
     60e:	80 93 02 01 	sts	0x0102, r24
     612:	80 cf       	rjmp	.-256    	; 0x514 <encoders+0x80>
					}
					break;
				case 2:
					if(alarm_hours < 23){
						alarm_hours = alarm_hours + 1;
     614:	80 91 02 01 	lds	r24, 0x0102
     618:	8f 5f       	subi	r24, 0xFF	; 255
     61a:	80 93 02 01 	sts	0x0102, r24
     61e:	7a cf       	rjmp	.-268    	; 0x514 <encoders+0x80>

00000620 <check_alarm>:

//***********************************************************************
//                            check_alarm
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
     620:	80 91 06 01 	lds	r24, 0x0106
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	b9 f0       	breq	.+46     	; 0x656 <check_alarm+0x36>
			lcd_string_array[4] = 'M';
		}
	}

	// Keeps alarm on while the alarm is armed
	if((alarm_armed == 0x00)){
     628:	80 91 06 01 	lds	r24, 0x0106
     62c:	81 11       	cpse	r24, r1
     62e:	12 c0       	rjmp	.+36     	; 0x654 <check_alarm+0x34>
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
     630:	88 e1       	ldi	r24, 0x18	; 24
     632:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
     634:	87 b7       	in	r24, 0x37	; 55
     636:	8f 7e       	andi	r24, 0xEF	; 239
     638:	87 bf       	out	0x37, r24	; 55
	}

	// Keeps alarm on while the alarm is armed
	if((alarm_armed == 0x00)){
		disable_tcnt1();
		alarm_buzz = 0x00;
     63a:	10 92 4a 02 	sts	0x024A, r1
		//send_lcd(0x00, 0x08); //Turn off LCD
		lcd_string_array[0] = ' ';
     63e:	80 e2       	ldi	r24, 0x20	; 32
     640:	80 93 07 01 	sts	0x0107, r24
		lcd_string_array[1] = ' ';
     644:	80 93 08 01 	sts	0x0108, r24
		lcd_string_array[2] = ' ';
     648:	80 93 09 01 	sts	0x0109, r24
		lcd_string_array[3] = ' ';
     64c:	80 93 0a 01 	sts	0x010A, r24
		lcd_string_array[4] = ' ';
     650:	80 93 0b 01 	sts	0x010B, r24
     654:	08 95       	ret

//***********************************************************************
//                            check_alarm
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
     656:	20 91 05 01 	lds	r18, 0x0105
     65a:	90 91 02 01 	lds	r25, 0x0102
     65e:	29 13       	cpse	r18, r25
     660:	e3 cf       	rjmp	.-58     	; 0x628 <check_alarm+0x8>
     662:	20 91 04 01 	lds	r18, 0x0104
     666:	90 91 01 01 	lds	r25, 0x0101
     66a:	29 13       	cpse	r18, r25
     66c:	dd cf       	rjmp	.-70     	; 0x628 <check_alarm+0x8>
		if((seconds == alarm_seconds)){
     66e:	20 91 03 01 	lds	r18, 0x0103
     672:	90 91 4b 02 	lds	r25, 0x024B
     676:	29 13       	cpse	r18, r25
     678:	d7 cf       	rjmp	.-82     	; 0x628 <check_alarm+0x8>
//
// setup TCNT1 in pwm mode
// set OC1A (PB5) as pwm output
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);
     67a:	9f b5       	in	r25, 0x2f	; 47
     67c:	92 60       	ori	r25, 0x02	; 2
     67e:	9f bd       	out	0x2f, r25	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10);
     680:	9e b5       	in	r25, 0x2e	; 46
     682:	99 61       	ori	r25, 0x19	; 25
     684:	9e bd       	out	0x2e, r25	; 46
	//no forced compare
	TCCR1C = 0x00;
     686:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 ec       	ldi	r19, 0xC0	; 192
     68e:	3b bd       	out	0x2b, r19	; 43
     690:	2a bd       	out	0x2a, r18	; 42
	ICR1  = 0xF000; //clear at 0xF000
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 ef       	ldi	r19, 0xF0	; 240
     696:	37 bd       	out	0x27, r19	; 39
     698:	26 bd       	out	0x26, r18	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
     69a:	97 b7       	in	r25, 0x37	; 55
     69c:	90 61       	ori	r25, 0x10	; 16
     69e:	97 bf       	out	0x37, r25	; 55
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
		if((seconds == alarm_seconds)){
			init_tcnt1();
			alarm_buzz = 0x01;
     6a0:	80 93 4a 02 	sts	0x024A, r24
			//send_lcd(0x00, 0x0C);
			lcd_string_array[0] = 'A';
     6a4:	81 e4       	ldi	r24, 0x41	; 65
     6a6:	80 93 07 01 	sts	0x0107, r24
			lcd_string_array[1] = 'L';
     6aa:	9c e4       	ldi	r25, 0x4C	; 76
     6ac:	90 93 08 01 	sts	0x0108, r25
			lcd_string_array[2] = 'A';
     6b0:	80 93 09 01 	sts	0x0109, r24
			lcd_string_array[3] = 'R';
     6b4:	82 e5       	ldi	r24, 0x52	; 82
     6b6:	80 93 0a 01 	sts	0x010A, r24
			lcd_string_array[4] = 'M';
     6ba:	8d e4       	ldi	r24, 0x4D	; 77
     6bc:	80 93 0b 01 	sts	0x010B, r24
     6c0:	b3 cf       	rjmp	.-154    	; 0x628 <check_alarm+0x8>

000006c2 <snooze>:
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
     6c2:	88 e1       	ldi	r24, 0x18	; 24
     6c4:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
     6c6:	87 b7       	in	r24, 0x37	; 55
     6c8:	8f 7e       	andi	r24, 0xEF	; 239
     6ca:	87 bf       	out	0x37, r24	; 55
//                            snooze_alarm
//**********************************************************************
void snooze(){
	//Turn off the alarm
	disable_tcnt1();
	alarm_buzz = 0x00;
     6cc:	10 92 4a 02 	sts	0x024A, r1

	if(alarm_seconds < 50){
     6d0:	80 91 4b 02 	lds	r24, 0x024B
     6d4:	82 33       	cpi	r24, 0x32	; 50
     6d6:	30 f5       	brcc	.+76     	; 0x724 <snooze+0x62>
		alarm_hours = hours;
     6d8:	80 91 05 01 	lds	r24, 0x0105
     6dc:	80 93 02 01 	sts	0x0102, r24
		alarm_mins = mins;
     6e0:	80 91 04 01 	lds	r24, 0x0104
     6e4:	80 93 01 01 	sts	0x0101, r24
		alarm_seconds  = seconds;
     6e8:	80 91 03 01 	lds	r24, 0x0103
     6ec:	80 93 4b 02 	sts	0x024B, r24

		if(alarm_seconds < 50){
     6f0:	80 91 4b 02 	lds	r24, 0x024B
     6f4:	82 33       	cpi	r24, 0x32	; 50
     6f6:	b8 f0       	brcs	.+46     	; 0x726 <snooze+0x64>
			alarm_seconds = alarm_seconds + 10;
			return;
		}else{
			alarm_seconds = 60-alarm_seconds;
     6f8:	90 91 4b 02 	lds	r25, 0x024B
     6fc:	8c e3       	ldi	r24, 0x3C	; 60
     6fe:	89 1b       	sub	r24, r25
     700:	80 93 4b 02 	sts	0x024B, r24
			alarm_mins++;
     704:	80 91 01 01 	lds	r24, 0x0101
     708:	8f 5f       	subi	r24, 0xFF	; 255
     70a:	80 93 01 01 	sts	0x0101, r24
		}

		if(alarm_mins > 59){
     70e:	80 91 01 01 	lds	r24, 0x0101
     712:	8c 33       	cpi	r24, 0x3C	; 60
     714:	38 f0       	brcs	.+14     	; 0x724 <snooze+0x62>
			alarm_mins = 0;
     716:	10 92 01 01 	sts	0x0101, r1
			alarm_hours++;
     71a:	80 91 02 01 	lds	r24, 0x0102
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	80 93 02 01 	sts	0x0102, r24
     724:	08 95       	ret
		alarm_hours = hours;
		alarm_mins = mins;
		alarm_seconds  = seconds;

		if(alarm_seconds < 50){
			alarm_seconds = alarm_seconds + 10;
     726:	80 91 4b 02 	lds	r24, 0x024B
     72a:	86 5f       	subi	r24, 0xF6	; 246
     72c:	80 93 4b 02 	sts	0x024B, r24
			return;
     730:	08 95       	ret

00000732 <check_user_input>:


//***********************************************************************
//                            Check Buttons/Encoders
//**********************************************************************
void check_user_input(){
     732:	af 92       	push	r10
     734:	bf 92       	push	r11
     736:	cf 92       	push	r12
     738:	df 92       	push	r13
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
	//Checks the state of the buttons and encoders
	//Output
  //Read the buttons
        PORTB = PORTB | (1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7);
     746:	88 b3       	in	r24, 0x18	; 24
     748:	80 6f       	ori	r24, 0xF0	; 240
     74a:	88 bb       	out	0x18, r24	; 24
	// Select 7 - Enable Tristates on Button Board

	DDRA = 0x00; // PortA as an input from buttons
     74c:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; // PortA enable Pull Ups
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     752:	25 e0       	ldi	r18, 0x05	; 5
     754:	2a 95       	dec	r18
     756:	f1 f7       	brne	.-4      	; 0x754 <check_user_input+0x22>
     758:	00 00       	nop
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     75a:	69 b3       	in	r22, 0x19	; 25
     75c:	80 91 51 02 	lds	r24, 0x0251
     760:	90 91 52 02 	lds	r25, 0x0252
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	90 6e       	ori	r25, 0xE0	; 224
     76a:	26 2f       	mov	r18, r22
     76c:	21 70       	andi	r18, 0x01	; 1
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	82 2b       	or	r24, r18
     772:	93 2b       	or	r25, r19
     774:	90 93 52 02 	sts	0x0252, r25
     778:	80 93 51 02 	sts	0x0251, r24
        if(state[button] == 0xF000) return 1;
     77c:	81 15       	cp	r24, r1
     77e:	90 4f       	sbci	r25, 0xF0	; 240
     780:	09 f4       	brne	.+2      	; 0x784 <check_user_input+0x52>
     782:	ac c0       	rjmp	.+344    	; 0x8dc <check_user_input+0x1aa>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     784:	89 b3       	in	r24, 0x19	; 25
     786:	20 91 53 02 	lds	r18, 0x0253
     78a:	30 91 54 02 	lds	r19, 0x0254
     78e:	22 0f       	add	r18, r18
     790:	33 1f       	adc	r19, r19
     792:	30 6e       	ori	r19, 0xE0	; 224
     794:	81 fb       	bst	r24, 1
     796:	44 27       	eor	r20, r20
     798:	40 f9       	bld	r20, 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	24 2b       	or	r18, r20
     79e:	35 2b       	or	r19, r21
     7a0:	30 93 54 02 	sts	0x0254, r19
     7a4:	20 93 53 02 	sts	0x0253, r18
        if(state[button] == 0xF000) return 1;
     7a8:	21 15       	cp	r18, r1
     7aa:	30 4f       	sbci	r19, 0xF0	; 240
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <check_user_input+0x7e>
     7ae:	b4 c0       	rjmp	.+360    	; 0x918 <check_user_input+0x1e6>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     7b0:	29 b3       	in	r18, 0x19	; 25
     7b2:	80 91 55 02 	lds	r24, 0x0255
     7b6:	90 91 56 02 	lds	r25, 0x0256
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	90 6e       	ori	r25, 0xE0	; 224
     7c0:	22 fb       	bst	r18, 2
     7c2:	cc 24       	eor	r12, r12
     7c4:	c0 f8       	bld	r12, 0
     7c6:	d1 2c       	mov	r13, r1
     7c8:	c8 2a       	or	r12, r24
     7ca:	d9 2a       	or	r13, r25
     7cc:	d0 92 56 02 	sts	0x0256, r13
     7d0:	c0 92 55 02 	sts	0x0255, r12
     7d4:	29 b3       	in	r18, 0x19	; 25
     7d6:	80 91 57 02 	lds	r24, 0x0257
     7da:	90 91 58 02 	lds	r25, 0x0258
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	90 6e       	ori	r25, 0xE0	; 224
     7e4:	23 fb       	bst	r18, 3
     7e6:	aa 24       	eor	r10, r10
     7e8:	a0 f8       	bld	r10, 0
     7ea:	b1 2c       	mov	r11, r1
     7ec:	a8 2a       	or	r10, r24
     7ee:	b9 2a       	or	r11, r25
     7f0:	b0 92 58 02 	sts	0x0258, r11
     7f4:	a0 92 57 02 	sts	0x0257, r10
     7f8:	29 b3       	in	r18, 0x19	; 25
     7fa:	80 91 59 02 	lds	r24, 0x0259
     7fe:	90 91 5a 02 	lds	r25, 0x025A
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	90 6e       	ori	r25, 0xE0	; 224
     808:	24 fb       	bst	r18, 4
     80a:	ee 24       	eor	r14, r14
     80c:	e0 f8       	bld	r14, 0
     80e:	f1 2c       	mov	r15, r1
     810:	8e 29       	or	r24, r14
     812:	9f 29       	or	r25, r15
     814:	90 93 5a 02 	sts	0x025A, r25
     818:	80 93 59 02 	sts	0x0259, r24
        if(state[button] == 0xF000) return 1;
     81c:	81 15       	cp	r24, r1
     81e:	90 4f       	sbci	r25, 0xF0	; 240
     820:	09 f4       	brne	.+2      	; 0x824 <check_user_input+0xf2>
     822:	76 c0       	rjmp	.+236    	; 0x910 <check_user_input+0x1de>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     824:	89 b3       	in	r24, 0x19	; 25
     826:	20 91 5b 02 	lds	r18, 0x025B
     82a:	30 91 5c 02 	lds	r19, 0x025C
     82e:	22 0f       	add	r18, r18
     830:	33 1f       	adc	r19, r19
     832:	30 6e       	ori	r19, 0xE0	; 224
     834:	85 fb       	bst	r24, 5
     836:	00 27       	eor	r16, r16
     838:	00 f9       	bld	r16, 0
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	20 2b       	or	r18, r16
     83e:	31 2b       	or	r19, r17
     840:	30 93 5c 02 	sts	0x025C, r19
     844:	20 93 5b 02 	sts	0x025B, r18
        if(state[button] == 0xF000) return 1;
     848:	21 15       	cp	r18, r1
     84a:	30 4f       	sbci	r19, 0xF0	; 240
     84c:	09 f4       	brne	.+2      	; 0x850 <check_user_input+0x11e>
     84e:	54 c0       	rjmp	.+168    	; 0x8f8 <check_user_input+0x1c6>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     850:	29 b3       	in	r18, 0x19	; 25
     852:	80 91 5d 02 	lds	r24, 0x025D
     856:	90 91 5e 02 	lds	r25, 0x025E
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	90 6e       	ori	r25, 0xE0	; 224
     860:	26 fb       	bst	r18, 6
     862:	22 27       	eor	r18, r18
     864:	20 f9       	bld	r18, 0
     866:	c2 2f       	mov	r28, r18
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	d2 2f       	mov	r29, r18
     86c:	8c 2b       	or	r24, r28
     86e:	9d 2b       	or	r25, r29
     870:	90 93 5e 02 	sts	0x025E, r25
     874:	80 93 5d 02 	sts	0x025D, r24
        if(state[button] == 0xF000) return 1;
     878:	81 15       	cp	r24, r1
     87a:	90 4f       	sbci	r25, 0xF0	; 240
     87c:	b1 f1       	breq	.+108    	; 0x8ea <check_user_input+0x1b8>
                if((alarm_buzz == 0x01)){
			snooze();
		}
        }
	// Turn off the button board PWM high
	PORTB &= ~((1<<PB4) | (1<<PB5) | (1<<PB6) | (0<<PB7));
     87e:	88 b3       	in	r24, 0x18	; 24
     880:	8f 78       	andi	r24, 0x8F	; 143
     882:	88 bb       	out	0x18, r24	; 24

	DDRA = 0xFF; //DDRA Output
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //Turn Off The 7Seg
     888:	8b bb       	out	0x1b, r24	; 27

  // Send info to the bargraph (Sending info will read in encoders)
	PORTD &= ~(1<<PD2); //Storage Reg for HC595 low
     88a:	92 98       	cbi	0x12, 2	; 18
	PORTE &= ~((1<<PE6) |  (1<<PE5)); //Encoder Shift Reg Clk en Low, Load Mode
     88c:	83 b1       	in	r24, 0x03	; 3
     88e:	8f 79       	andi	r24, 0x9F	; 159
     890:	83 b9       	out	0x03, r24	; 3
	PORTC &= ~(1<<PC1);
     892:	a9 98       	cbi	0x15, 1	; 21
	PORTC |= (1<<PC1);//Shift Mode
     894:	a9 9a       	sbi	0x15, 1	; 21

	//PORTE |= (1<<PE7);
	encoder = spi_rw8(incdec_to_bargraph[clockmode]); // Send SPI_8bit
     896:	e0 91 4e 02 	lds	r30, 0x024E
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	e5 5c       	subi	r30, 0xC5	; 197
     89e:	fe 4f       	sbci	r31, 0xFE	; 254
     8a0:	80 81       	ld	r24, Z
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
     8a2:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
     8a4:	77 9b       	sbis	0x0e, 7	; 14
     8a6:	fe cf       	rjmp	.-4      	; 0x8a4 <check_user_input+0x172>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
     8a8:	8f b1       	in	r24, 0x0f	; 15
	PORTE &= ~((1<<PE6) |  (1<<PE5)); //Encoder Shift Reg Clk en Low, Load Mode
	PORTC &= ~(1<<PC1);
	PORTC |= (1<<PC1);//Shift Mode

	//PORTE |= (1<<PE7);
	encoder = spi_rw8(incdec_to_bargraph[clockmode]); // Send SPI_8bit
     8aa:	80 93 4d 02 	sts	0x024D, r24
	//spi_rw8(0xF0); 			//Test line

  // Check the encoders
	if(encoder != old_encoder){
     8ae:	90 91 4d 02 	lds	r25, 0x024D
     8b2:	80 91 4c 02 	lds	r24, 0x024C
     8b6:	98 13       	cpse	r25, r24
		// Change in the encoder position
		encoders();
     8b8:	0e 94 4a 02 	call	0x494	; 0x494 <encoders>
	}
  // Return the to original states
	PORTD |= (1<<PD2); //SS_Bar Low
     8bc:	92 9a       	sbi	0x12, 2	; 18
	PORTE |= (1<<PE6) | (0<<PE5); //Clk enable high, Shift mode
     8be:	1e 9a       	sbi	0x03, 6	; 3
	PORTB &= ~((1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7)); // Sel 0
     8c0:	88 b3       	in	r24, 0x18	; 24
     8c2:	8f 70       	andi	r24, 0x0F	; 15
     8c4:	88 bb       	out	0x18, r24	; 24
  // Disable the button board tristates
}
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	cf 90       	pop	r12
     8d6:	bf 90       	pop	r11
     8d8:	af 90       	pop	r10
     8da:	08 95       	ret
	DDRA = 0x00; // PortA as an input from buttons
	PORTA = 0xFF; // PortA enable Pull Ups

	_delay_us(1); 				//Test Wait
        if(chk_buttons(0)){
		clockmode = (clockmode ^ 0X01) & 0x01; // Toggle bit 0
     8dc:	80 91 4e 02 	lds	r24, 0x024E
     8e0:	80 95       	com	r24
     8e2:	81 70       	andi	r24, 0x01	; 1
     8e4:	80 93 4e 02 	sts	0x024E, r24
     8e8:	4d cf       	rjmp	.-358    	; 0x784 <check_user_input+0x52>
		alarm_seconds = 0;
		// Toggle the arming of the alarm
        }

	if(chk_buttons(6)){
                if((alarm_buzz == 0x01)){
     8ea:	80 91 4a 02 	lds	r24, 0x024A
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	31 f6       	brne	.-116    	; 0x87e <check_user_input+0x14c>
			snooze();
     8f2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <snooze>
     8f6:	c3 cf       	rjmp	.-122    	; 0x87e <check_user_input+0x14c>
	if(chk_buttons(4)){
                clockmode = Clock_set_mode;
        }

	if(chk_buttons(5)){
                clockmode = Alarm_set_mode;
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	80 93 4e 02 	sts	0x024E, r24
		alarm_armed ^= 0x01;
     8fe:	90 91 06 01 	lds	r25, 0x0106
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	89 27       	eor	r24, r25
     906:	80 93 06 01 	sts	0x0106, r24
		alarm_seconds = 0;
     90a:	10 92 4b 02 	sts	0x024B, r1
     90e:	a0 cf       	rjmp	.-192    	; 0x850 <check_user_input+0x11e>
	if(chk_buttons(3)){
                volume_down();
        }

	if(chk_buttons(4)){
                clockmode = Clock_set_mode;
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	80 93 4e 02 	sts	0x024E, r24
     916:	86 cf       	rjmp	.-244    	; 0x824 <check_user_input+0xf2>
		clockmode = (clockmode ^ 0X01) & 0x01; // Toggle bit 0
		// Toggles between clock and alarm views
	}

	if(chk_buttons(1)){
		set_property(0x4001, 0x0000);
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e4       	ldi	r25, 0x40	; 64
     920:	0e 94 2a 0b 	call	0x1654	; 0x1654 <set_property>
     924:	45 cf       	rjmp	.-374    	; 0x7b0 <check_user_input+0x7e>

00000926 <check_ADCs>:
//                            check_ADCs
//**********************************************************************
void check_ADCs(){
	// Reads the ADC
	uint8_t adc_result = 0;
	ADCSRA |= (1<<ADSC); //poke ADSC and start conversion
     926:	36 9a       	sbi	0x06, 6	; 6

	while(bit_is_clear(ADCSRA,ADIF)); //spin while interrupt flag not set
     928:	34 9b       	sbis	0x06, 4	; 6
     92a:	fe cf       	rjmp	.-4      	; 0x928 <check_ADCs+0x2>

	ADCSRA |= (1<<ADIF); //its done, clear flag by writing a one
     92c:	34 9a       	sbi	0x06, 4	; 6

	adc_result = ADCH; //read the ADC output as 16 bits
     92e:	85 b1       	in	r24, 0x05	; 5
	OCR2 = adc_result; //0x10; //adc_result; //adc_result;
     930:	83 bd       	out	0x23, r24	; 35
     932:	08 95       	ret

00000934 <__vector_16>:


//***********************************************************************
//                            Timer0_overflow_interrupt
//**********************************************************************
ISR(TIMER0_OVF_vect){
     934:	1f 92       	push	r1
     936:	0f 92       	push	r0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	0f 92       	push	r0
     93c:	11 24       	eor	r1, r1
     93e:	0b b6       	in	r0, 0x3b	; 59
     940:	0f 92       	push	r0
     942:	2f 93       	push	r18
     944:	3f 93       	push	r19
     946:	4f 93       	push	r20
     948:	5f 93       	push	r21
     94a:	6f 93       	push	r22
     94c:	7f 93       	push	r23
     94e:	8f 93       	push	r24
     950:	9f 93       	push	r25
     952:	af 93       	push	r26
     954:	bf 93       	push	r27
     956:	ef 93       	push	r30
     958:	ff 93       	push	r31
	//This intterupt should occur every second
	//static uint8_t seconds = 0; //Holds the seconds between interupts
	check_alarm();
     95a:	0e 94 10 03 	call	0x620	; 0x620 <check_alarm>
	seconds++;
     95e:	80 91 03 01 	lds	r24, 0x0103
     962:	8f 5f       	subi	r24, 0xFF	; 255
     964:	80 93 03 01 	sts	0x0103, r24
	if((seconds % 60) == 0){
     968:	90 91 03 01 	lds	r25, 0x0103
     96c:	89 e8       	ldi	r24, 0x89	; 137
     96e:	98 9f       	mul	r25, r24
     970:	81 2d       	mov	r24, r1
     972:	11 24       	eor	r1, r1
     974:	82 95       	swap	r24
     976:	86 95       	lsr	r24
     978:	87 70       	andi	r24, 0x07	; 7
     97a:	2c e3       	ldi	r18, 0x3C	; 60
     97c:	82 9f       	mul	r24, r18
     97e:	90 19       	sub	r25, r0
     980:	11 24       	eor	r1, r1
     982:	91 11       	cpse	r25, r1
     984:	07 c0       	rjmp	.+14     	; 0x994 <__vector_16+0x60>
		mins++;
     986:	80 91 04 01 	lds	r24, 0x0104
     98a:	8f 5f       	subi	r24, 0xFF	; 255
     98c:	80 93 04 01 	sts	0x0104, r24
		seconds = 0;
     990:	10 92 03 01 	sts	0x0103, r1
		//check_alarm();
	}
	if(((mins % 60) == 0) & ((seconds % 60) == 0)){
     994:	30 91 04 01 	lds	r19, 0x0104
     998:	90 91 03 01 	lds	r25, 0x0103
     99c:	89 e8       	ldi	r24, 0x89	; 137
     99e:	98 9f       	mul	r25, r24
     9a0:	21 2d       	mov	r18, r1
     9a2:	11 24       	eor	r1, r1
     9a4:	22 95       	swap	r18
     9a6:	26 95       	lsr	r18
     9a8:	27 70       	andi	r18, 0x07	; 7
     9aa:	4c e3       	ldi	r20, 0x3C	; 60
     9ac:	24 9f       	mul	r18, r20
     9ae:	90 19       	sub	r25, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	91 11       	cpse	r25, r1
     9b4:	0c c0       	rjmp	.+24     	; 0x9ce <__vector_16+0x9a>
     9b6:	38 9f       	mul	r19, r24
     9b8:	81 2d       	mov	r24, r1
     9ba:	11 24       	eor	r1, r1
     9bc:	82 95       	swap	r24
     9be:	86 95       	lsr	r24
     9c0:	87 70       	andi	r24, 0x07	; 7
     9c2:	84 9f       	mul	r24, r20
     9c4:	30 19       	sub	r19, r0
     9c6:	11 24       	eor	r1, r1
     9c8:	33 23       	and	r19, r19
     9ca:	09 f4       	brne	.+2      	; 0x9ce <__vector_16+0x9a>
     9cc:	4b c0       	rjmp	.+150    	; 0xa64 <__vector_16+0x130>
		hours++;
		mins = 0;
	}
	if((hours % 24) == 0){
     9ce:	90 91 05 01 	lds	r25, 0x0105
     9d2:	8b ea       	ldi	r24, 0xAB	; 171
     9d4:	98 9f       	mul	r25, r24
     9d6:	81 2d       	mov	r24, r1
     9d8:	11 24       	eor	r1, r1
     9da:	82 95       	swap	r24
     9dc:	8f 70       	andi	r24, 0x0F	; 15
     9de:	28 e1       	ldi	r18, 0x18	; 24
     9e0:	82 9f       	mul	r24, r18
     9e2:	90 19       	sub	r25, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	91 11       	cpse	r25, r1
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <__vector_16+0xba>
		hours = 0;
     9ea:	10 92 05 01 	sts	0x0105, r1
	}
	
    //Request the temp
	twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2);
     9ee:	42 e0       	ldi	r20, 0x02	; 2
     9f0:	61 eb       	ldi	r22, 0xB1	; 177
     9f2:	72 e0       	ldi	r23, 0x02	; 2
     9f4:	80 e9       	ldi	r24, 0x90	; 144
     9f6:	0e 94 9d 09 	call	0x133a	; 0x133a <twi_start_rd>
	//Format the local temp data
    lm73_temp = (lm73_rd_buf[0] << 8) | (lm73_rd_buf[1]);
     9fa:	80 91 b1 02 	lds	r24, 0x02B1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	98 2f       	mov	r25, r24
     a02:	88 27       	eor	r24, r24
     a04:	20 91 b2 02 	lds	r18, 0x02B2
     a08:	82 2b       	or	r24, r18
    lm73_temp = lm73_temp >> 7;
     a0a:	88 0f       	add	r24, r24
     a0c:	89 2f       	mov	r24, r25
     a0e:	88 1f       	adc	r24, r24
     a10:	99 0b       	sbc	r25, r25
     a12:	91 95       	neg	r25
     a14:	90 93 8c 02 	sts	0x028C, r25
     a18:	80 93 8b 02 	sts	0x028B, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     a1c:	4a e0       	ldi	r20, 0x0A	; 10
     a1e:	69 e8       	ldi	r22, 0x89	; 137
     a20:	72 e0       	ldi	r23, 0x02	; 2
     a22:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__itoa_ncheck>
    itoa(lm73_temp, tempsensor_string, 10);
    //Send the local data to the LCD array
    lcd_string_array[19] = tempsensor_string[0];
     a26:	80 91 89 02 	lds	r24, 0x0289
     a2a:	80 93 1a 01 	sts	0x011A, r24
    lcd_string_array[20] = tempsensor_string[1];
     a2e:	80 91 8a 02 	lds	r24, 0x028A
     a32:	80 93 1b 01 	sts	0x011B, r24


    //Request the ATmega48 data
    while(!(UCSR0A & (1 << UDRE0)));
     a36:	5d 9b       	sbis	0x0b, 5	; 11
     a38:	fe cf       	rjmp	.-4      	; 0xa36 <__vector_16+0x102>
    UDR0 = 0xF0;
     a3a:	80 ef       	ldi	r24, 0xF0	; 240
     a3c:	8c b9       	out	0x0c, r24	; 12

	
}
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	7f 91       	pop	r23
     a4c:	6f 91       	pop	r22
     a4e:	5f 91       	pop	r21
     a50:	4f 91       	pop	r20
     a52:	3f 91       	pop	r19
     a54:	2f 91       	pop	r18
     a56:	0f 90       	pop	r0
     a58:	0b be       	out	0x3b, r0	; 59
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti
		mins++;
		seconds = 0;
		//check_alarm();
	}
	if(((mins % 60) == 0) & ((seconds % 60) == 0)){
		hours++;
     a64:	80 91 05 01 	lds	r24, 0x0105
     a68:	8f 5f       	subi	r24, 0xFF	; 255
     a6a:	80 93 05 01 	sts	0x0105, r24
		mins = 0;
     a6e:	10 92 04 01 	sts	0x0104, r1
     a72:	ad cf       	rjmp	.-166    	; 0x9ce <__vector_16+0x9a>

00000a74 <__vector_12>:


//***********************************************************************
//                            Timer1_OCR1A_Match
//**********************************************************************
ISR(TIMER1_COMPA_vect){
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	8f 93       	push	r24
     a80:	9f 93       	push	r25
	// Port C must be used for Alarm PWM as OCR1X is used for 7Seg
	PORTC ^= 0X03; //Toggle Bit 0 & 1
     a82:	95 b3       	in	r25, 0x15	; 21
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	89 27       	eor	r24, r25
     a88:	85 bb       	out	0x15, r24	; 21

}
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	0f 90       	pop	r0
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	0f 90       	pop	r0
     a94:	1f 90       	pop	r1
     a96:	18 95       	reti

00000a98 <__vector_10>:


//***********************************************************************
//                            Timer2_overflow_interrupt
//**********************************************************************
ISR(TIMER2_OVF_vect){
     a98:	1f 92       	push	r1
     a9a:	0f 92       	push	r0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	0b b6       	in	r0, 0x3b	; 59
     aa4:	0f 92       	push	r0
     aa6:	2f 93       	push	r18
     aa8:	3f 93       	push	r19
     aaa:	4f 93       	push	r20
     aac:	5f 93       	push	r21
     aae:	6f 93       	push	r22
     ab0:	7f 93       	push	r23
     ab2:	8f 93       	push	r24
     ab4:	9f 93       	push	r25
     ab6:	af 93       	push	r26
     ab8:	bf 93       	push	r27
     aba:	ef 93       	push	r30
     abc:	ff 93       	push	r31
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
     abe:	80 91 50 02 	lds	r24, 0x0250
     ac2:	8f 5f       	subi	r24, 0xFF	; 255
		if((timer_tick > 10)){
     ac4:	8b 30       	cpi	r24, 0x0B	; 11
     ac6:	a8 f4       	brcc	.+42     	; 0xaf2 <__vector_10+0x5a>
//**********************************************************************
ISR(TIMER2_OVF_vect){
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
     ac8:	80 93 50 02 	sts	0x0250, r24
		
			
		refresh_lcd(lcd_string_array);

	}
}
     acc:	ff 91       	pop	r31
     ace:	ef 91       	pop	r30
     ad0:	bf 91       	pop	r27
     ad2:	af 91       	pop	r26
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	7f 91       	pop	r23
     ada:	6f 91       	pop	r22
     adc:	5f 91       	pop	r21
     ade:	4f 91       	pop	r20
     ae0:	3f 91       	pop	r19
     ae2:	2f 91       	pop	r18
     ae4:	0f 90       	pop	r0
     ae6:	0b be       	out	0x3b, r0	; 59
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
		if((timer_tick > 10)){
		timer_tick = 0;
     af2:	10 92 50 02 	sts	0x0250, r1
		check_user_input();
     af6:	0e 94 99 03 	call	0x732	; 0x732 <check_user_input>
//                            check_ADCs
//**********************************************************************
void check_ADCs(){
	// Reads the ADC
	uint8_t adc_result = 0;
	ADCSRA |= (1<<ADSC); //poke ADSC and start conversion
     afa:	36 9a       	sbi	0x06, 6	; 6

	while(bit_is_clear(ADCSRA,ADIF)); //spin while interrupt flag not set
     afc:	34 9b       	sbis	0x06, 4	; 6
     afe:	fe cf       	rjmp	.-4      	; 0xafc <__vector_10+0x64>

	ADCSRA |= (1<<ADIF); //its done, clear flag by writing a one
     b00:	34 9a       	sbi	0x06, 4	; 6

	adc_result = ADCH; //read the ADC output as 16 bits
     b02:	85 b1       	in	r24, 0x05	; 5
	OCR2 = adc_result; //0x10; //adc_result; //adc_result;
     b04:	83 bd       	out	0x23, r24	; 35
		timer_tick = 0;
		check_user_input();
		check_ADCs();
		
			
		refresh_lcd(lcd_string_array);
     b06:	87 e0       	ldi	r24, 0x07	; 7
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <refresh_lcd>
     b0e:	de cf       	rjmp	.-68     	; 0xacc <__vector_10+0x34>

00000b10 <__vector_9>:
	}
}



ISR(TIMER2_COMP_vect){
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
        //TO DO
}
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <__vector_18>:

//***********************************************************************
//                            USART0_recieve_interrupt
//**********************************************************************
//Get the temp from the ATMega48
ISR(USART0_RX_vect) {
     b24:	1f 92       	push	r1
     b26:	0f 92       	push	r0
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	0b b6       	in	r0, 0x3b	; 59
     b30:	0f 92       	push	r0
     b32:	2f 93       	push	r18
     b34:	3f 93       	push	r19
     b36:	4f 93       	push	r20
     b38:	5f 93       	push	r21
     b3a:	6f 93       	push	r22
     b3c:	7f 93       	push	r23
     b3e:	8f 93       	push	r24
     b40:	9f 93       	push	r25
     b42:	af 93       	push	r26
     b44:	bf 93       	push	r27
     b46:	ef 93       	push	r30
     b48:	ff 93       	push	r31

	//Process the recieved ATmega48 data to the LCD
    if(first_byte == TRUE){
     b4a:	80 91 00 01 	lds	r24, 0x0100
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	d1 f0       	breq	.+52     	; 0xb86 <__vector_18+0x62>
    	lcd_string_array[25] = uart_getc();
    	first_byte = FALSE;
    }else{
    	lcd_string_array[26] = uart_getc();
     b52:	0e 94 19 0a 	call	0x1432	; 0x1432 <uart_getc>
     b56:	80 93 21 01 	sts	0x0121, r24
    	first_byte = TRUE;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	80 93 00 01 	sts	0x0100, r24
    }
}
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	7f 91       	pop	r23
     b6e:	6f 91       	pop	r22
     b70:	5f 91       	pop	r21
     b72:	4f 91       	pop	r20
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	0b be       	out	0x3b, r0	; 59
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	0f 90       	pop	r0
     b82:	1f 90       	pop	r1
     b84:	18 95       	reti
//Get the temp from the ATMega48
ISR(USART0_RX_vect) {

	//Process the recieved ATmega48 data to the LCD
    if(first_byte == TRUE){
    	lcd_string_array[25] = uart_getc();
     b86:	0e 94 19 0a 	call	0x1432	; 0x1432 <uart_getc>
     b8a:	80 93 20 01 	sts	0x0120, r24
    	first_byte = FALSE;
     b8e:	10 92 00 01 	sts	0x0100, r1
     b92:	e6 cf       	rjmp	.-52     	; 0xb60 <__vector_18+0x3c>

00000b94 <radio_reset>:
}


void radio_reset(){
	//Code given by rodger
	DDRE  |= 0x04; //Port E bit 2 is active high reset for radio
     b94:	12 9a       	sbi	0x02, 2	; 2
	PORTE |= 0x04; //radio reset is on at powerup (active high)
     b96:	1a 9a       	sbi	0x03, 2	; 3

	//hardware reset of Si4734
	 PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
     b98:	1f 98       	cbi	0x03, 7	; 3
	 DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
     b9a:	17 9a       	sbi	0x02, 7	; 2
	 PORTE |=  (1<<PE2); //hardware reset Si4734
     b9c:	1a 9a       	sbi	0x03, 2	; 3
     b9e:	8f e1       	ldi	r24, 0x1F	; 31
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	f1 f7       	brne	.-4      	; 0xba2 <radio_reset+0xe>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <radio_reset+0x14>
     ba8:	00 00       	nop
	 _delay_us(200);     //hold for 200us, 100us by spec
	 PORTE &= ~(1<<PE2); //release reset
     baa:	1a 98       	cbi	0x03, 2	; 3
     bac:	90 ea       	ldi	r25, 0xA0	; 160
     bae:	9a 95       	dec	r25
     bb0:	f1 f7       	brne	.-4      	; 0xbae <radio_reset+0x1a>
	 _delay_us(30);      //5us required because of my slow I2C translators I suspect
							//Si code in "low" has 30us delay...no explaination
	 DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
     bb2:	17 98       	cbi	0x02, 7	; 2
     bb4:	08 95       	ret

00000bb6 <__vector_8>:
//******************************************************************************
// External interrupt 7 is on Port E bit 7. The interrupt is triggered on the
// rising edge of Port E bit 7.  The i/o clock must be running to detect the
// edge (not asynchronouslly triggered)
//******************************************************************************
ISR(INT7_vect){STC_interrupt = TRUE;}
     bb6:	1f 92       	push	r1
     bb8:	0f 92       	push	r0
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	8f 93       	push	r24
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 79 03 	sts	0x0379, r24
     bc8:	8f 91       	pop	r24
     bca:	0f 90       	pop	r0
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	0f 90       	pop	r0
     bd0:	1f 90       	pop	r1
     bd2:	18 95       	reti

00000bd4 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	81 11       	cpse	r24, r1
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <send_lcd+0x8>
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bde:	77 9b       	sbis	0x0e, 7	; 14
     be0:	fe cf       	rjmp	.-4      	; 0xbde <send_lcd+0xa>
  SPDR = byte;                        //send payload
     be2:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     be4:	77 9b       	sbis	0x0e, 7	; 14
     be6:	fe cf       	rjmp	.-4      	; 0xbe4 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     be8:	80 91 62 00 	lds	r24, 0x0062
     bec:	88 60       	ori	r24, 0x08	; 8
     bee:	80 93 62 00 	sts	0x0062, r24
     bf2:	80 91 62 00 	lds	r24, 0x0062
     bf6:	87 7f       	andi	r24, 0xF7	; 247
     bf8:	80 93 62 00 	sts	0x0062, r24
     bfc:	08 95       	ret

00000bfe <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
     bfe:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     c00:	c0 91 61 02 	lds	r28, 0x0261
     c04:	8c 0f       	add	r24, r28
     c06:	91 1d       	adc	r25, r1
     c08:	fc 01       	movw	r30, r24
     c0a:	60 81       	ld	r22, Z
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
 i++;   //increment to next character
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	8c 0f       	add	r24, r28
     c16:	80 93 61 02 	sts	0x0261, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     c1a:	80 31       	cpi	r24, 0x10	; 16
     c1c:	81 f0       	breq	.+32     	; 0xc3e <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     c1e:	80 32       	cpi	r24, 0x20	; 32
     c20:	11 f0       	breq	.+4      	; 0xc26 <refresh_lcd+0x28>
}//refresh_lcd
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret
     c26:	85 ed       	ldi	r24, 0xD5	; 213
     c28:	8a 95       	dec	r24
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <refresh_lcd+0x2a>
     c2c:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     c2e:	60 e8       	ldi	r22, 0x80	; 128
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     c36:	10 92 61 02 	sts	0x0261, r1
}//refresh_lcd
     c3a:	cf 91       	pop	r28
     c3c:	08 95       	ret
     c3e:	f5 ed       	ldi	r31, 0xD5	; 213
     c40:	fa 95       	dec	r31
     c42:	f1 f7       	brne	.-4      	; 0xc40 <refresh_lcd+0x42>
     c44:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     c46:	60 ec       	ldi	r22, 0xC0	; 192
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     c4e:	80 91 61 02 	lds	r24, 0x0261
     c52:	e5 cf       	rjmp	.-54     	; 0xc1e <refresh_lcd+0x20>

00000c54 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	1f 92       	push	r1
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     c68:	66 0f       	add	r22, r22
     c6a:	66 0f       	add	r22, r22
     c6c:	66 0f       	add	r22, r22
     c6e:	60 5c       	subi	r22, 0xC0	; 192
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	99 83       	std	Y+1, r25	; 0x01
     c74:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     c78:	85 ed       	ldi	r24, 0xD5	; 213
     c7a:	8a 95       	dec	r24
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <set_custom_character+0x26>
     c7e:	00 00       	nop
     c80:	e1 2e       	mov	r14, r17
     c82:	99 81       	ldd	r25, Y+1	; 0x01
     c84:	f9 2e       	mov	r15, r25
     c86:	87 01       	movw	r16, r14
     c88:	08 5f       	subi	r16, 0xF8	; 248
     c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     c8c:	f7 01       	movw	r30, r14
     c8e:	61 91       	ld	r22, Z+
     c90:	7f 01       	movw	r14, r30
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     c98:	f5 ed       	ldi	r31, 0xD5	; 213
     c9a:	fa 95       	dec	r31
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <set_custom_character+0x46>
     c9e:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     ca0:	e0 16       	cp	r14, r16
     ca2:	f1 06       	cpc	r15, r17
     ca4:	99 f7       	brne	.-26     	; 0xc8c <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     ca6:	0f 90       	pop	r0
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	08 95       	ret

00000cb6 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     cb6:	90 e4       	ldi	r25, 0x40	; 64
     cb8:	89 9f       	mul	r24, r25
     cba:	60 0d       	add	r22, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	60 5c       	subi	r22, 0xC0	; 192
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <send_lcd>

00000cc6 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
     cc6:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     cc8:	88 23       	and	r24, r24
     cca:	b9 f1       	breq	.+110    	; 0xd3a <uint2lcd+0x74>
     ccc:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     cce:	84 36       	cpi	r24, 0x64	; 100
     cd0:	98 f4       	brcc	.+38     	; 0xcf8 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     cd2:	8a 30       	cpi	r24, 0x0A	; 10
     cd4:	d8 f4       	brcc	.+54     	; 0xd0c <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     cd6:	8d ec       	ldi	r24, 0xCD	; 205
     cd8:	c8 9f       	mul	r28, r24
     cda:	81 2d       	mov	r24, r1
     cdc:	11 24       	eor	r1, r1
     cde:	86 95       	lsr	r24
     ce0:	86 95       	lsr	r24
     ce2:	86 95       	lsr	r24
     ce4:	6c 2f       	mov	r22, r28
     ce6:	2a e0       	ldi	r18, 0x0A	; 10
     ce8:	82 9f       	mul	r24, r18
     cea:	60 19       	sub	r22, r0
     cec:	11 24       	eor	r1, r1
     cee:	60 5d       	subi	r22, 0xD0	; 208
     cf0:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     cf2:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     cf4:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     cf8:	69 e2       	ldi	r22, 0x29	; 41
     cfa:	86 9f       	mul	r24, r22
     cfc:	61 2d       	mov	r22, r1
     cfe:	11 24       	eor	r1, r1
     d00:	62 95       	swap	r22
     d02:	6f 70       	andi	r22, 0x0F	; 15
     d04:	60 5d       	subi	r22, 0xD0	; 208
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     d0c:	89 e2       	ldi	r24, 0x29	; 41
     d0e:	c8 9f       	mul	r28, r24
     d10:	81 2d       	mov	r24, r1
     d12:	11 24       	eor	r1, r1
     d14:	82 95       	swap	r24
     d16:	8f 70       	andi	r24, 0x0F	; 15
     d18:	9c 2f       	mov	r25, r28
     d1a:	24 e6       	ldi	r18, 0x64	; 100
     d1c:	82 9f       	mul	r24, r18
     d1e:	90 19       	sub	r25, r0
     d20:	11 24       	eor	r1, r1
     d22:	6d ec       	ldi	r22, 0xCD	; 205
     d24:	96 9f       	mul	r25, r22
     d26:	61 2d       	mov	r22, r1
     d28:	11 24       	eor	r1, r1
     d2a:	66 95       	lsr	r22
     d2c:	66 95       	lsr	r22
     d2e:	66 95       	lsr	r22
     d30:	60 5d       	subi	r22, 0xD0	; 208
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     d38:	ce cf       	rjmp	.-100    	; 0xcd6 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     d3a:	60 e3       	ldi	r22, 0x30	; 48
     d3c:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
     d3e:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     d40:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <send_lcd>

00000d44 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
     d44:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     d46:	87 fd       	sbrc	r24, 7
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
     d4a:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
     d4c:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <uint2lcd>
     d50:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     d52:	6d e2       	ldi	r22, 0x2D	; 45
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     d5a:	85 ed       	ldi	r24, 0xD5	; 213
     d5c:	8a 95       	dec	r24
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <int2lcd+0x18>
     d60:	00 00       	nop
     d62:	8c 2f       	mov	r24, r28
     d64:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
     d66:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     d68:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <uint2lcd>

00000d6c <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
     d6c:	6e e0       	ldi	r22, 0x0E	; 14
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <send_lcd>

00000d74 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
     d74:	6c e0       	ldi	r22, 0x0C	; 12
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <send_lcd>

00000d7c <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
     d7c:	6e e1       	ldi	r22, 0x1E	; 30
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <send_lcd>

00000d84 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
     d84:	68 e1       	ldi	r22, 0x18	; 24
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <send_lcd>

00000d8c <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d8c:	e2 e6       	ldi	r30, 0x62	; 98
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	88 60       	ori	r24, 0x08	; 8
     d94:	80 83       	st	Z, r24
     d96:	80 81       	ld	r24, Z
     d98:	87 7f       	andi	r24, 0xF7	; 247
     d9a:	80 83       	st	Z, r24
     d9c:	08 95       	ret

00000d9e <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     da6:	8f e1       	ldi	r24, 0x1F	; 31
     da8:	9c e1       	ldi	r25, 0x1C	; 28
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <clear_display+0xc>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <clear_display+0x12>
     db0:	00 00       	nop
     db2:	08 95       	ret

00000db4 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
     db4:	62 e0       	ldi	r22, 0x02	; 2
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     dbc:	8f e6       	ldi	r24, 0x6F	; 111
     dbe:	97 e1       	ldi	r25, 0x17	; 23
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <cursor_home+0xc>
     dc4:	00 c0       	rjmp	.+0      	; 0xdc6 <cursor_home+0x12>
     dc6:	00 00       	nop
     dc8:	08 95       	ret

00000dca <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     dca:	60 ec       	ldi	r22, 0xC0	; 192
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <send_lcd>

00000dd2 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     dd2:	60 e8       	ldi	r22, 0x80	; 128
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <send_lcd>

00000dda <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     dda:	cf 93       	push	r28
     ddc:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
     dde:	60 e2       	ldi	r22, 0x20	; 32
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     de6:	85 ed       	ldi	r24, 0xD5	; 213
     de8:	8a 95       	dec	r24
     dea:	f1 f7       	brne	.-4      	; 0xde8 <fill_spaces+0xe>
     dec:	00 00       	nop
     dee:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     df0:	b1 f7       	brne	.-20     	; 0xdde <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
     df6:	68 2f       	mov	r22, r24
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <send_lcd>

00000dfe <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	c0 e0       	ldi	r28, 0x00	; 0
     e0c:	f8 01       	movw	r30, r16
     e0e:	e4 0f       	add	r30, r20
     e10:	f5 1f       	adc	r31, r21
     e12:	60 81       	ld	r22, Z
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     e1a:	85 ed       	ldi	r24, 0xD5	; 213
     e1c:	8a 95       	dec	r24
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <string2lcd+0x1e>
     e20:	00 00       	nop
     e22:	cf 5f       	subi	r28, 0xFF	; 255
     e24:	4c 2f       	mov	r20, r28
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	f8 01       	movw	r30, r16
     e2a:	01 90       	ld	r0, Z+
     e2c:	00 20       	and	r0, r0
     e2e:	e9 f7       	brne	.-6      	; 0xe2a <string2lcd+0x2c>
     e30:	9f 01       	movw	r18, r30
     e32:	20 1b       	sub	r18, r16
     e34:	31 0b       	sbc	r19, r17
     e36:	22 50       	subi	r18, 0x02	; 2
     e38:	31 09       	sbc	r19, r1
     e3a:	24 17       	cp	r18, r20
     e3c:	35 07       	cpc	r19, r21
     e3e:	30 f7       	brcc	.-52     	; 0xe0c <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	08 95       	ret

00000e48 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	99 ef       	ldi	r25, 0xF9	; 249
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <lcd_init+0x4>
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <lcd_init+0xa>
     e52:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     e54:	88 e0       	ldi	r24, 0x08	; 8
     e56:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
     e5a:	60 e3       	ldi	r22, 0x30	; 48
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     e62:	8f e5       	ldi	r24, 0x5F	; 95
     e64:	9d e6       	ldi	r25, 0x6D	; 109
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <lcd_init+0x1e>
     e6a:	00 c0       	rjmp	.+0      	; 0xe6c <lcd_init+0x24>
     e6c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     e6e:	60 e3       	ldi	r22, 0x30	; 48
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     e76:	8f e5       	ldi	r24, 0x5F	; 95
     e78:	9d e6       	ldi	r25, 0x6D	; 109
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <lcd_init+0x32>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <lcd_init+0x38>
     e80:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     e82:	60 e3       	ldi	r22, 0x30	; 48
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     e8a:	8f e5       	ldi	r24, 0x5F	; 95
     e8c:	9d e6       	ldi	r25, 0x6D	; 109
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	f1 f7       	brne	.-4      	; 0xe8e <lcd_init+0x46>
     e92:	00 c0       	rjmp	.+0      	; 0xe94 <lcd_init+0x4c>
     e94:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
     e96:	68 e3       	ldi	r22, 0x38	; 56
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     e9e:	8f e1       	ldi	r24, 0x1F	; 31
     ea0:	9e e4       	ldi	r25, 0x4E	; 78
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <lcd_init+0x5a>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <lcd_init+0x60>
     ea8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
     eaa:	68 e0       	ldi	r22, 0x08	; 8
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     eb2:	8f e1       	ldi	r24, 0x1F	; 31
     eb4:	9e e4       	ldi	r25, 0x4E	; 78
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <lcd_init+0x6e>
     eba:	00 c0       	rjmp	.+0      	; 0xebc <lcd_init+0x74>
     ebc:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     ec6:	8f e1       	ldi	r24, 0x1F	; 31
     ec8:	9e e4       	ldi	r25, 0x4E	; 78
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <lcd_init+0x82>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <lcd_init+0x88>
     ed0:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
     ed2:	66 e0       	ldi	r22, 0x06	; 6
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     eda:	8f e1       	ldi	r24, 0x1F	; 31
     edc:	9e e4       	ldi	r25, 0x4E	; 78
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <lcd_init+0x96>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <lcd_init+0x9c>
     ee4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
     ee6:	6c e0       	ldi	r22, 0x0C	; 12
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
     eee:	8f e1       	ldi	r24, 0x1F	; 31
     ef0:	9e e4       	ldi	r25, 0x4E	; 78
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <lcd_init+0xaa>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <lcd_init+0xb0>
     ef8:	00 00       	nop
     efa:	08 95       	ret

00000efc <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     efc:	8f 92       	push	r8
     efe:	9f 92       	push	r9
     f00:	af 92       	push	r10
     f02:	bf 92       	push	r11
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	69 97       	sbiw	r28, 0x19	; 25
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	f4 2e       	mov	r15, r20
     f26:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
     f28:	00 23       	and	r16, r16
     f2a:	59 f0       	breq	.+22     	; 0xf42 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
     f2c:	4b 01       	movw	r8, r22
     f2e:	5c 01       	movw	r10, r24
     f30:	88 24       	eor	r8, r8
     f32:	b7 fc       	sbrc	r11, 7
     f34:	83 94       	inc	r8
     f36:	99 24       	eor	r9, r9
     f38:	aa 24       	eor	r10, r10
     f3a:	bb 24       	eor	r11, r11
     f3c:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
     f3e:	97 fd       	sbrc	r25, 7
     f40:	8f c0       	rjmp	.+286    	; 0x1060 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
     f42:	11 23       	and	r17, r17
     f44:	09 f4       	brne	.+2      	; 0xf48 <lcd_int32+0x4c>
     f46:	84 c0       	rjmp	.+264    	; 0x1050 <lcd_int32+0x154>
     f48:	9e 01       	movw	r18, r28
     f4a:	2f 5f       	subi	r18, 0xFF	; 255
     f4c:	3f 4f       	sbci	r19, 0xFF	; 255
     f4e:	69 01       	movw	r12, r18
     f50:	59 01       	movw	r10, r18
     f52:	88 24       	eor	r8, r8
     f54:	8a 94       	dec	r8
     f56:	81 0e       	add	r8, r17
     f58:	91 2c       	mov	r9, r1
     f5a:	3f ef       	ldi	r19, 0xFF	; 255
     f5c:	83 1a       	sub	r8, r19
     f5e:	93 0a       	sbc	r9, r19
     f60:	8c 0c       	add	r8, r12
     f62:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     f64:	2a e0       	ldi	r18, 0x0A	; 10
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__divmodsi4>
     f70:	e6 2f       	mov	r30, r22
     f72:	2a 8b       	std	Y+18, r18	; 0x12
     f74:	3b 8b       	std	Y+19, r19	; 0x13
     f76:	4c 8b       	std	Y+20, r20	; 0x14
     f78:	5d 8b       	std	Y+21, r21	; 0x15
     f7a:	6a 89       	ldd	r22, Y+18	; 0x12
     f7c:	7b 89       	ldd	r23, Y+19	; 0x13
     f7e:	8c 89       	ldd	r24, Y+20	; 0x14
     f80:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     f82:	20 e3       	ldi	r18, 0x30	; 48
     f84:	2e 0f       	add	r18, r30
     f86:	f5 01       	movw	r30, r10
     f88:	21 93       	st	Z+, r18
     f8a:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
     f8c:	e8 15       	cp	r30, r8
     f8e:	f9 05       	cpc	r31, r9
     f90:	49 f7       	brne	.-46     	; 0xf64 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     f92:	bb 24       	eor	r11, r11
     f94:	b3 94       	inc	r11
     f96:	b1 0e       	add	r11, r17
     f98:	f6 01       	movw	r30, r12
     f9a:	e1 0f       	add	r30, r17
     f9c:	f1 1d       	adc	r31, r1
     f9e:	2e e2       	ldi	r18, 0x2E	; 46
     fa0:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
     fa2:	2a e0       	ldi	r18, 0x0A	; 10
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__divmodsi4>
     fae:	e6 2f       	mov	r30, r22
     fb0:	2a 8b       	std	Y+18, r18	; 0x12
     fb2:	3b 8b       	std	Y+19, r19	; 0x13
     fb4:	4c 8b       	std	Y+20, r20	; 0x14
     fb6:	5d 8b       	std	Y+21, r21	; 0x15
     fb8:	6e 8b       	std	Y+22, r22	; 0x16
     fba:	7f 8b       	std	Y+23, r23	; 0x17
     fbc:	88 8f       	std	Y+24, r24	; 0x18
     fbe:	99 8f       	std	Y+25, r25	; 0x19
     fc0:	6a 89       	ldd	r22, Y+18	; 0x12
     fc2:	7b 89       	ldd	r23, Y+19	; 0x13
     fc4:	8c 89       	ldd	r24, Y+20	; 0x14
     fc6:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     fc8:	11 e0       	ldi	r17, 0x01	; 1
     fca:	1b 0d       	add	r17, r11
     fcc:	d6 01       	movw	r26, r12
     fce:	ab 0d       	add	r26, r11
     fd0:	b1 1d       	adc	r27, r1
     fd2:	e0 5d       	subi	r30, 0xD0	; 208
     fd4:	ec 93       	st	X, r30
     fd6:	b1 2e       	mov	r11, r17
        }while(qr.quot);
     fd8:	61 15       	cp	r22, r1
     fda:	71 05       	cpc	r23, r1
     fdc:	81 05       	cpc	r24, r1
     fde:	91 05       	cpc	r25, r1
     fe0:	01 f7       	brne	.-64     	; 0xfa2 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
     fe2:	ff 20       	and	r15, r15
     fe4:	61 f0       	breq	.+24     	; 0xffe <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     fe6:	e1 10       	cpse	r14, r1
     fe8:	39 c0       	rjmp	.+114    	; 0x105c <lcd_int32+0x160>
     fea:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     fec:	1f 15       	cp	r17, r15
     fee:	38 f4       	brcc	.+14     	; 0xffe <lcd_int32+0x102>
     ff0:	f6 01       	movw	r30, r12
     ff2:	e1 0f       	add	r30, r17
     ff4:	f1 1d       	adc	r31, r1
     ff6:	80 83       	st	Z, r24
     ff8:	1f 5f       	subi	r17, 0xFF	; 255
     ffa:	1f 11       	cpse	r17, r15
     ffc:	f9 cf       	rjmp	.-14     	; 0xff0 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     ffe:	00 23       	and	r16, r16
    1000:	31 f0       	breq	.+12     	; 0x100e <lcd_int32+0x112>
    1002:	f6 01       	movw	r30, r12
    1004:	e1 0f       	add	r30, r17
    1006:	f1 1d       	adc	r31, r1
    1008:	8d e2       	ldi	r24, 0x2D	; 45
    100a:	80 83       	st	Z, r24
    100c:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    100e:	11 50       	subi	r17, 0x01	; 1
    1010:	f6 01       	movw	r30, r12
    1012:	e1 0f       	add	r30, r17
    1014:	f1 1d       	adc	r31, r1
    1016:	60 81       	ld	r22, Z
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    101e:	35 ed       	ldi	r19, 0xD5	; 213
    1020:	3a 95       	dec	r19
    1022:	f1 f7       	brne	.-4      	; 0x1020 <lcd_int32+0x124>
    1024:	00 00       	nop
    1026:	11 11       	cpse	r17, r1
    1028:	f2 cf       	rjmp	.-28     	; 0x100e <lcd_int32+0x112>

}
    102a:	69 96       	adiw	r28, 0x19	; 25
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	cf 90       	pop	r12
    1046:	bf 90       	pop	r11
    1048:	af 90       	pop	r10
    104a:	9f 90       	pop	r9
    104c:	8f 90       	pop	r8
    104e:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    1050:	b1 2c       	mov	r11, r1
    1052:	9e 01       	movw	r18, r28
    1054:	2f 5f       	subi	r18, 0xFF	; 255
    1056:	3f 4f       	sbci	r19, 0xFF	; 255
    1058:	69 01       	movw	r12, r18
    105a:	a3 cf       	rjmp	.-186    	; 0xfa2 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    105c:	80 e3       	ldi	r24, 0x30	; 48
    105e:	c6 cf       	rjmp	.-116    	; 0xfec <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    1060:	90 95       	com	r25
    1062:	80 95       	com	r24
    1064:	70 95       	com	r23
    1066:	61 95       	neg	r22
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	8f 4f       	sbci	r24, 0xFF	; 255
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	69 cf       	rjmp	.-302    	; 0xf42 <lcd_int32+0x46>

00001070 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
    1070:	5f 92       	push	r5
    1072:	6f 92       	push	r6
    1074:	7f 92       	push	r7
    1076:	8f 92       	push	r8
    1078:	9f 92       	push	r9
    107a:	af 92       	push	r10
    107c:	bf 92       	push	r11
    107e:	cf 92       	push	r12
    1080:	df 92       	push	r13
    1082:	ef 92       	push	r14
    1084:	ff 92       	push	r15
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	61 97       	sbiw	r28, 0x11	; 17
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	a6 2e       	mov	r10, r22
    10a0:	54 2e       	mov	r5, r20
    10a2:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    10a4:	79 2e       	mov	r7, r25
    10a6:	77 1c       	adc	r7, r7
    10a8:	77 24       	eor	r7, r7
    10aa:	77 1c       	adc	r7, r7
    10ac:	b7 2c       	mov	r11, r7
    10ae:	c7 2c       	mov	r12, r7
    10b0:	d1 2c       	mov	r13, r1
    10b2:	ee 27       	eor	r30, r30
    10b4:	ff 27       	eor	r31, r31
    10b6:	ec 19       	sub	r30, r12
    10b8:	fd 09       	sbc	r31, r13
    10ba:	8e 27       	eor	r24, r30
    10bc:	9f 27       	eor	r25, r31
    10be:	fc 01       	movw	r30, r24
    10c0:	ec 0d       	add	r30, r12
    10c2:	fd 1d       	adc	r31, r13
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
    10c4:	44 23       	and	r20, r20
    10c6:	09 f4       	brne	.+2      	; 0x10ca <lcd_int16+0x5a>
    10c8:	8e c0       	rjmp	.+284    	; 0x11e6 <__stack+0xe7>
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	7c 01       	movw	r14, r24
    10d0:	8c 01       	movw	r16, r24
    10d2:	88 24       	eor	r8, r8
    10d4:	8a 94       	dec	r8
    10d6:	84 0e       	add	r8, r20
    10d8:	91 2c       	mov	r9, r1
    10da:	9f ef       	ldi	r25, 0xFF	; 255
    10dc:	89 1a       	sub	r8, r25
    10de:	99 0a       	sbc	r9, r25
    10e0:	8e 0c       	add	r8, r14
    10e2:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    10e4:	6a e0       	ldi	r22, 0x0A	; 10
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	cf 01       	movw	r24, r30
    10ea:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__divmodhi4>
    10ee:	26 2f       	mov	r18, r22
    10f0:	e2 2f       	mov	r30, r18
    10f2:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
    10f4:	80 5d       	subi	r24, 0xD0	; 208
    10f6:	d8 01       	movw	r26, r16
    10f8:	8d 93       	st	X+, r24
    10fa:	8d 01       	movw	r16, r26
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
    10fc:	a8 15       	cp	r26, r8
    10fe:	b9 05       	cpc	r27, r9
    1100:	89 f7       	brne	.-30     	; 0x10e4 <lcd_int16+0x74>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    1102:	01 e0       	ldi	r16, 0x01	; 1
    1104:	05 0d       	add	r16, r5
    1106:	d7 01       	movw	r26, r14
    1108:	a5 0d       	add	r26, r5
    110a:	b1 1d       	adc	r27, r1
    110c:	8e e2       	ldi	r24, 0x2E	; 46
    110e:	8c 93       	st	X, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
    1110:	6a e0       	ldi	r22, 0x0A	; 10
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	cf 01       	movw	r24, r30
    1116:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__divmodhi4>
    111a:	26 2f       	mov	r18, r22
    111c:	e2 2f       	mov	r30, r18
    111e:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
    1120:	11 e0       	ldi	r17, 0x01	; 1
    1122:	10 0f       	add	r17, r16
    1124:	d7 01       	movw	r26, r14
    1126:	a0 0f       	add	r26, r16
    1128:	b1 1d       	adc	r27, r1
    112a:	80 5d       	subi	r24, 0xD0	; 208
    112c:	8c 93       	st	X, r24
    112e:	01 2f       	mov	r16, r17
        }
        while(qr.quot);
    1130:	30 97       	sbiw	r30, 0x00	; 0
    1132:	71 f7       	brne	.-36     	; 0x1110 <__stack+0x11>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
    1134:	61 10       	cpse	r6, r1
    1136:	15 c0       	rjmp	.+42     	; 0x1162 <__stack+0x63>
    1138:	77 20       	and	r7, r7
    113a:	39 f0       	breq	.+14     	; 0x114a <__stack+0x4b>
        {
                sline[i++] = '-';
    113c:	11 e0       	ldi	r17, 0x01	; 1
    113e:	10 0f       	add	r17, r16
    1140:	f7 01       	movw	r30, r14
    1142:	e0 0f       	add	r30, r16
    1144:	f1 1d       	adc	r31, r1
    1146:	8d e2       	ldi	r24, 0x2D	; 45
    1148:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    114a:	aa 20       	and	r10, r10
    114c:	41 f1       	breq	.+80     	; 0x119e <__stack+0x9f>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    114e:	81 2f       	mov	r24, r17
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	2a 2d       	mov	r18, r10
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	82 17       	cp	r24, r18
    1158:	93 07       	cpc	r25, r19
    115a:	0c f5       	brge	.+66     	; 0x119e <__stack+0x9f>
    115c:	b1 2c       	mov	r11, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    115e:	40 e2       	ldi	r20, 0x20	; 32
    1160:	0c c0       	rjmp	.+24     	; 0x117a <__stack+0x7b>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    1162:	aa 20       	and	r10, r10
    1164:	a1 f0       	breq	.+40     	; 0x118e <__stack+0x8f>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1166:	81 2f       	mov	r24, r17
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	2a 2d       	mov	r18, r10
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	2c 19       	sub	r18, r12
    1170:	3d 09       	sbc	r19, r13
    1172:	82 17       	cp	r24, r18
    1174:	93 07       	cpc	r25, r19
    1176:	5c f4       	brge	.+22     	; 0x118e <__stack+0x8f>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1178:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    117a:	1f 5f       	subi	r17, 0xFF	; 255
    117c:	f7 01       	movw	r30, r14
    117e:	e8 0f       	add	r30, r24
    1180:	f9 1f       	adc	r31, r25
    1182:	40 83       	st	Z, r20
    1184:	81 2f       	mov	r24, r17
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	82 17       	cp	r24, r18
    118a:	93 07       	cpc	r25, r19
    118c:	b4 f3       	brlt	.-20     	; 0x117a <__stack+0x7b>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
    118e:	bb 20       	and	r11, r11
    1190:	31 f0       	breq	.+12     	; 0x119e <__stack+0x9f>
    1192:	f7 01       	movw	r30, r14
    1194:	e1 0f       	add	r30, r17
    1196:	f1 1d       	adc	r31, r1
    1198:	8d e2       	ldi	r24, 0x2D	; 45
    119a:	80 83       	st	Z, r24
    119c:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    119e:	11 50       	subi	r17, 0x01	; 1
    11a0:	f7 01       	movw	r30, r14
    11a2:	e1 0f       	add	r30, r17
    11a4:	f1 1d       	adc	r31, r1
    11a6:	60 81       	ld	r22, Z
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <send_lcd>
    11ae:	95 ed       	ldi	r25, 0xD5	; 213
    11b0:	9a 95       	dec	r25
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <__stack+0xb1>
    11b4:	00 00       	nop
    11b6:	11 11       	cpse	r17, r1
    11b8:	f2 cf       	rjmp	.-28     	; 0x119e <__stack+0x9f>
}
    11ba:	61 96       	adiw	r28, 0x11	; 17
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	ff 90       	pop	r15
    11d0:	ef 90       	pop	r14
    11d2:	df 90       	pop	r13
    11d4:	cf 90       	pop	r12
    11d6:	bf 90       	pop	r11
    11d8:	af 90       	pop	r10
    11da:	9f 90       	pop	r9
    11dc:	8f 90       	pop	r8
    11de:	7f 90       	pop	r7
    11e0:	6f 90       	pop	r6
    11e2:	5f 90       	pop	r5
    11e4:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    11e6:	00 e0       	ldi	r16, 0x00	; 0
    11e8:	ce 01       	movw	r24, r28
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	7c 01       	movw	r14, r24
    11ee:	90 cf       	rjmp	.-224    	; 0x1110 <__stack+0x11>

000011f0 <lm73_temp_convert>:
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

//Yeah, this is for you to do! ;^)

}//lm73_temp_convert
    11f0:	08 95       	ret

000011f2 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    11f2:	1f 92       	push	r1
    11f4:	0f 92       	push	r0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	0f 92       	push	r0
    11fa:	11 24       	eor	r1, r1
    11fc:	0b b6       	in	r0, 0x3b	; 59
    11fe:	0f 92       	push	r0
    1200:	2f 93       	push	r18
    1202:	3f 93       	push	r19
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1210:	e0 91 71 00 	lds	r30, 0x0071
    1214:	8e 2f       	mov	r24, r30
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	fc 01       	movw	r30, r24
    121a:	38 97       	sbiw	r30, 0x08	; 8
    121c:	e1 35       	cpi	r30, 0x51	; 81
    121e:	f1 05       	cpc	r31, r1
    1220:	b0 f0       	brcs	.+44     	; 0x124e <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1222:	80 91 71 00 	lds	r24, 0x0071
    1226:	80 93 b3 02 	sts	0x02B3, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    122a:	84 e0       	ldi	r24, 0x04	; 4
    122c:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    1230:	ff 91       	pop	r31
    1232:	ef 91       	pop	r30
    1234:	bf 91       	pop	r27
    1236:	af 91       	pop	r26
    1238:	9f 91       	pop	r25
    123a:	8f 91       	pop	r24
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	0f 90       	pop	r0
    1242:	0b be       	out	0x3b, r0	; 59
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    124e:	ea 5b       	subi	r30, 0xBA	; 186
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1256:	80 91 62 02 	lds	r24, 0x0262
    125a:	e0 91 b4 02 	lds	r30, 0x02B4
    125e:	f0 91 b5 02 	lds	r31, 0x02B5
    1262:	e8 0f       	add	r30, r24
    1264:	f1 1d       	adc	r31, r1
    1266:	80 91 73 00 	lds	r24, 0x0073
    126a:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    126c:	84 e9       	ldi	r24, 0x94	; 148
    126e:	80 93 74 00 	sts	0x0074, r24
      break;      
    1272:	de cf       	rjmp	.-68     	; 0x1230 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    1274:	80 91 b6 02 	lds	r24, 0x02B6
    1278:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    127c:	10 92 62 02 	sts	0x0262, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    1280:	85 e8       	ldi	r24, 0x85	; 133
    1282:	80 93 74 00 	sts	0x0074, r24
      break;
    1286:	d4 cf       	rjmp	.-88     	; 0x1230 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    1288:	80 91 62 02 	lds	r24, 0x0262
    128c:	90 91 b7 02 	lds	r25, 0x02B7
    1290:	89 17       	cp	r24, r25
    1292:	60 f7       	brcc	.-40     	; 0x126c <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    1294:	e0 91 b4 02 	lds	r30, 0x02B4
    1298:	f0 91 b5 02 	lds	r31, 0x02B5
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	98 0f       	add	r25, r24
    12a0:	90 93 62 02 	sts	0x0262, r25
    12a4:	e8 0f       	add	r30, r24
    12a6:	f1 1d       	adc	r31, r1
    12a8:	80 81       	ld	r24, Z
    12aa:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
    12ae:	85 e8       	ldi	r24, 0x85	; 133
    12b0:	80 93 74 00 	sts	0x0074, r24
    12b4:	bd cf       	rjmp	.-134    	; 0x1230 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    12b6:	85 ea       	ldi	r24, 0xA5	; 165
    12b8:	80 93 74 00 	sts	0x0074, r24
      break;
    12bc:	b9 cf       	rjmp	.-142    	; 0x1230 <__vector_33+0x3e>
    12be:	20 91 62 02 	lds	r18, 0x0262
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    12c2:	80 91 b7 02 	lds	r24, 0x02B7
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	28 17       	cp	r18, r24
    12ce:	39 07       	cpc	r19, r25
    12d0:	dc f4       	brge	.+54     	; 0x1308 <__vector_33+0x116>
    12d2:	85 ec       	ldi	r24, 0xC5	; 197
    12d4:	80 93 74 00 	sts	0x0074, r24
    12d8:	ab cf       	rjmp	.-170    	; 0x1230 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    12da:	e0 91 b4 02 	lds	r30, 0x02B4
    12de:	f0 91 b5 02 	lds	r31, 0x02B5
    12e2:	80 91 62 02 	lds	r24, 0x0262
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	28 0f       	add	r18, r24
    12ea:	20 93 62 02 	sts	0x0262, r18
    12ee:	e8 0f       	add	r30, r24
    12f0:	f1 1d       	adc	r31, r1
    12f2:	80 91 73 00 	lds	r24, 0x0073
    12f6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    12f8:	80 91 b7 02 	lds	r24, 0x02B7
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	28 17       	cp	r18, r24
    1304:	39 07       	cpc	r19, r25
    1306:	2c f3       	brlt	.-54     	; 0x12d2 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    1308:	85 e8       	ldi	r24, 0x85	; 133
    130a:	80 93 74 00 	sts	0x0074, r24
    130e:	90 cf       	rjmp	.-224    	; 0x1230 <__vector_33+0x3e>

00001310 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1310:	80 91 74 00 	lds	r24, 0x0074
}
    1314:	81 70       	andi	r24, 0x01	; 1
    1316:	08 95       	ret

00001318 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1318:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    131c:	90 fd       	sbrc	r25, 0
    131e:	fc cf       	rjmp	.-8      	; 0x1318 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1320:	8e 7f       	andi	r24, 0xFE	; 254
    1322:	80 93 b6 02 	sts	0x02B6, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    1326:	70 93 b5 02 	sts	0x02B5, r23
    132a:	60 93 b4 02 	sts	0x02B4, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    132e:	40 93 b7 02 	sts	0x02B7, r20
  TWCR = TWCR_START;                    //initiate START
    1332:	85 ea       	ldi	r24, 0xA5	; 165
    1334:	80 93 74 00 	sts	0x0074, r24
    1338:	08 95       	ret

0000133a <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    133a:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    133e:	90 fd       	sbrc	r25, 0
    1340:	fc cf       	rjmp	.-8      	; 0x133a <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1342:	81 60       	ori	r24, 0x01	; 1
    1344:	80 93 b6 02 	sts	0x02B6, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    1348:	70 93 b5 02 	sts	0x02B5, r23
    134c:	60 93 b4 02 	sts	0x02B4, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    1350:	40 93 b7 02 	sts	0x02B7, r20
  TWCR = TWCR_START;                   //initiate START
    1354:	85 ea       	ldi	r24, 0xA5	; 165
    1356:	80 93 74 00 	sts	0x0074, r24
    135a:	08 95       	ret

0000135c <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
    1362:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
    1366:	8c e0       	ldi	r24, 0x0C	; 12
    1368:	80 93 70 00 	sts	0x0070, r24
    136c:	08 95       	ret

0000136e <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    136e:	5d 9b       	sbis	0x0b, 5	; 11
    1370:	fe cf       	rjmp	.-4      	; 0x136e <uart_putc>
    UDR0 = data;    // Send data byte
    1372:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1374:	5d 9b       	sbis	0x0b, 5	; 11
    1376:	fe cf       	rjmp	.-4      	; 0x1374 <uart_putc+0x6>
}
    1378:	08 95       	ret

0000137a <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    137a:	90 91 9b 00 	lds	r25, 0x009B
    137e:	95 ff       	sbrs	r25, 5
    1380:	fc cf       	rjmp	.-8      	; 0x137a <uart1_putc>
    UDR1 = data;    // Send data byte
    1382:	80 93 9c 00 	sts	0x009C, r24
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1386:	80 91 9b 00 	lds	r24, 0x009B
    138a:	85 ff       	sbrs	r24, 5
    138c:	fc cf       	rjmp	.-8      	; 0x1386 <uart1_putc+0xc>
}
    138e:	08 95       	ret

00001390 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    1390:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1392:	90 81       	ld	r25, Z
    1394:	99 23       	and	r25, r25
    1396:	49 f0       	breq	.+18     	; 0x13aa <uart_puts+0x1a>
    1398:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    139a:	5d 9b       	sbis	0x0b, 5	; 11
    139c:	fe cf       	rjmp	.-4      	; 0x139a <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    139e:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    13a0:	5d 9b       	sbis	0x0b, 5	; 11
    13a2:	fe cf       	rjmp	.-4      	; 0x13a0 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    13a4:	91 91       	ld	r25, Z+
    13a6:	91 11       	cpse	r25, r1
    13a8:	f8 cf       	rjmp	.-16     	; 0x139a <uart_puts+0xa>
    13aa:	08 95       	ret

000013ac <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    13ac:	fc 01       	movw	r30, r24
    13ae:	20 81       	ld	r18, Z
    13b0:	22 23       	and	r18, r18
    13b2:	71 f0       	breq	.+28     	; 0x13d0 <uart1_puts+0x24>
    13b4:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    13b6:	90 91 9b 00 	lds	r25, 0x009B
    13ba:	95 ff       	sbrs	r25, 5
    13bc:	fc cf       	rjmp	.-8      	; 0x13b6 <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
    13be:	20 93 9c 00 	sts	0x009C, r18
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    13c2:	90 91 9b 00 	lds	r25, 0x009B
    13c6:	95 ff       	sbrs	r25, 5
    13c8:	fc cf       	rjmp	.-8      	; 0x13c2 <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    13ca:	21 91       	ld	r18, Z+
    13cc:	21 11       	cpse	r18, r1
    13ce:	f3 cf       	rjmp	.-26     	; 0x13b6 <uart1_puts+0xa>
    13d0:	08 95       	ret

000013d2 <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    13d2:	9c 01       	movw	r18, r24
    13d4:	fc 01       	movw	r30, r24
    13d6:	44 91       	lpm	r20, Z
    13d8:	44 23       	and	r20, r20
    13da:	69 f0       	breq	.+26     	; 0x13f6 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	f9 01       	movw	r30, r18
    13e0:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    13e2:	5d 9b       	sbis	0x0b, 5	; 11
    13e4:	fe cf       	rjmp	.-4      	; 0x13e2 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    13e6:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    13e8:	5d 9b       	sbis	0x0b, 5	; 11
    13ea:	fe cf       	rjmp	.-4      	; 0x13e8 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    13ec:	9c 01       	movw	r18, r24
    13ee:	fc 01       	movw	r30, r24
    13f0:	44 91       	lpm	r20, Z
    13f2:	41 11       	cpse	r20, r1
    13f4:	f3 cf       	rjmp	.-26     	; 0x13dc <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    13f6:	08 95       	ret

000013f8 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
    13f8:	8a b1       	in	r24, 0x0a	; 10
    13fa:	88 69       	ori	r24, 0x98	; 152
    13fc:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    13fe:	e5 e9       	ldi	r30, 0x95	; 149
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	86 60       	ori	r24, 0x06	; 6
    1406:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    1408:	10 92 90 00 	sts	0x0090, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    140c:	87 e6       	ldi	r24, 0x67	; 103
    140e:	89 b9       	out	0x09, r24	; 9
    1410:	08 95       	ret

00001412 <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
    1412:	ea e9       	ldi	r30, 0x9A	; 154
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	88 61       	ori	r24, 0x18	; 24
    141a:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
    141c:	ed e9       	ldi	r30, 0x9D	; 157
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	86 60       	ori	r24, 0x06	; 6
    1424:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
    1426:	10 92 98 00 	sts	0x0098, r1
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
    142a:	87 e6       	ldi	r24, 0x67	; 103
    142c:	80 93 99 00 	sts	0x0099, r24
    1430:	08 95       	ret

00001432 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1432:	80 e8       	ldi	r24, 0x80	; 128
    1434:	9e e3       	ldi	r25, 0x3E	; 62
    1436:	02 c0       	rjmp	.+4      	; 0x143c <uart_getc+0xa>
    1438:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    143a:	21 f0       	breq	.+8      	; 0x1444 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    143c:	5f 9b       	sbis	0x0b, 7	; 11
    143e:	fc cf       	rjmp	.-8      	; 0x1438 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    1440:	8c b1       	in	r24, 0x0c	; 12
    1442:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1444:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    1446:	08 95       	ret

00001448 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    1448:	80 e8       	ldi	r24, 0x80	; 128
    144a:	9e e3       	ldi	r25, 0x3E	; 62
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <uart1_getc+0xa>
    144e:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    1450:	39 f0       	breq	.+14     	; 0x1460 <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    1452:	20 91 9b 00 	lds	r18, 0x009B
    1456:	27 ff       	sbrs	r18, 7
    1458:	fa cf       	rjmp	.-12     	; 0x144e <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
    145a:	80 91 9c 00 	lds	r24, 0x009C
    145e:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1460:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
    1462:	08 95       	ret

00001464 <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
    1464:	84 e1       	ldi	r24, 0x14	; 20
    1466:	80 93 58 03 	sts	0x0358, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	68 e5       	ldi	r22, 0x58	; 88
    146e:	73 e0       	ldi	r23, 0x03	; 3
    1470:	82 e2       	ldi	r24, 0x22	; 34
    1472:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    1476:	0e 94 88 09 	call	0x1310	; 0x1310 <twi_busy>
    147a:	81 11       	cpse	r24, r1
    147c:	fc cf       	rjmp	.-8      	; 0x1476 <get_int_status+0x12>
    147e:	8f ea       	ldi	r24, 0xAF	; 175
    1480:	94 e0       	ldi	r25, 0x04	; 4
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <get_int_status+0x1e>
    1486:	00 c0       	rjmp	.+0      	; 0x1488 <get_int_status+0x24>
    1488:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
    148a:	41 e0       	ldi	r20, 0x01	; 1
    148c:	6a e7       	ldi	r22, 0x7A	; 122
    148e:	73 e0       	ldi	r23, 0x03	; 3
    1490:	82 e2       	ldi	r24, 0x22	; 34
    1492:	0e 94 9d 09 	call	0x133a	; 0x133a <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    1496:	0e 94 88 09 	call	0x1310	; 0x1310 <twi_busy>
    149a:	81 11       	cpse	r24, r1
    149c:	fc cf       	rjmp	.-8      	; 0x1496 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
    149e:	80 91 7a 03 	lds	r24, 0x037A
    14a2:	08 95       	ret

000014a4 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
    14a4:	e8 e5       	ldi	r30, 0x58	; 88
    14a6:	f3 e0       	ldi	r31, 0x03	; 3
    14a8:	80 e2       	ldi	r24, 0x20	; 32
    14aa:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    14ac:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    14ae:	80 91 94 02 	lds	r24, 0x0294
    14b2:	90 91 95 02 	lds	r25, 0x0295
    14b6:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    14b8:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    14ba:	14 82       	std	Z+4, r1	; 0x04
  //send fm tune command
  STC_interrupt = FALSE;
    14bc:	10 92 79 03 	sts	0x0379, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    14c0:	45 e0       	ldi	r20, 0x05	; 5
    14c2:	bf 01       	movw	r22, r30
    14c4:	82 e2       	ldi	r24, 0x22	; 34
    14c6:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <twi_start_wr>

000014ca <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
    14ca:	80 e4       	ldi	r24, 0x40	; 64
    14cc:	80 93 58 03 	sts	0x0358, r24
  si4734_wr_buf[1] = 0x00;         //no FAST tune
    14d0:	10 92 59 03 	sts	0x0359, r1
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
    14d4:	80 91 92 02 	lds	r24, 0x0292
    14d8:	90 91 93 02 	lds	r25, 0x0293
    14dc:	90 93 5a 03 	sts	0x035A, r25
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
    14e0:	80 93 5b 03 	sts	0x035B, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    14e4:	10 92 5c 03 	sts	0x035C, r1
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
    14e8:	10 92 5d 03 	sts	0x035D, r1
  //send am tune command
  STC_interrupt = FALSE;
    14ec:	10 92 79 03 	sts	0x0379, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    14f0:	46 e0       	ldi	r20, 0x06	; 6
    14f2:	68 e5       	ldi	r22, 0x58	; 88
    14f4:	73 e0       	ldi	r23, 0x03	; 3
    14f6:	82 e2       	ldi	r24, 0x22	; 34
    14f8:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    14fc:	80 91 79 03 	lds	r24, 0x0379
    1500:	88 23       	and	r24, r24
    1502:	e1 f3       	breq	.-8      	; 0x14fc <am_tune_freq+0x32>
}
    1504:	08 95       	ret

00001506 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
    1506:	e8 e5       	ldi	r30, 0x58	; 88
    1508:	f3 e0       	ldi	r31, 0x03	; 3
    150a:	80 e4       	ldi	r24, 0x40	; 64
    150c:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
    150e:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
    1510:	80 91 96 02 	lds	r24, 0x0296
    1514:	90 91 97 02 	lds	r25, 0x0297
    1518:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
    151a:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    151c:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1522:	46 e0       	ldi	r20, 0x06	; 6
    1524:	bf 01       	movw	r22, r30
    1526:	82 e2       	ldi	r24, 0x22	; 34
    1528:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    152c:	2f ef       	ldi	r18, 0xFF	; 255
    152e:	87 ee       	ldi	r24, 0xE7	; 231
    1530:	93 e0       	ldi	r25, 0x03	; 3
    1532:	21 50       	subi	r18, 0x01	; 1
    1534:	80 40       	sbci	r24, 0x00	; 0
    1536:	90 40       	sbci	r25, 0x00	; 0
    1538:	e1 f7       	brne	.-8      	; 0x1532 <sw_tune_freq+0x2c>
    153a:	00 c0       	rjmp	.+0      	; 0x153c <sw_tune_freq+0x36>
    153c:	00 00       	nop
    153e:	08 95       	ret

00001540 <radio_pwr_dwn>:

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
*/

//send fm power down command
    si4734_wr_buf[0] = 0x11;
    1540:	81 e1       	ldi	r24, 0x11	; 17
    1542:	80 93 58 03 	sts	0x0358, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    1546:	41 e0       	ldi	r20, 0x01	; 1
    1548:	68 e5       	ldi	r22, 0x58	; 88
    154a:	73 e0       	ldi	r23, 0x03	; 3
    154c:	82 e2       	ldi	r24, 0x22	; 34
    154e:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1552:	87 ed       	ldi	r24, 0xD7	; 215
    1554:	94 e0       	ldi	r25, 0x04	; 4
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <radio_pwr_dwn+0x16>
    155a:	00 c0       	rjmp	.+0      	; 0x155c <radio_pwr_dwn+0x1c>
    155c:	00 00       	nop
    155e:	08 95       	ret

00001560 <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    1560:	83 e2       	ldi	r24, 0x23	; 35
    1562:	80 93 58 03 	sts	0x0358, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	80 93 59 03 	sts	0x0359, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    156c:	42 e0       	ldi	r20, 0x02	; 2
    156e:	68 e5       	ldi	r22, 0x58	; 88
    1570:	73 e0       	ldi	r23, 0x03	; 3
    1572:	82 e2       	ldi	r24, 0x22	; 34
    1574:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1578:	0e 94 88 09 	call	0x1310	; 0x1310 <twi_busy>
    157c:	81 11       	cpse	r24, r1
    157e:	fc cf       	rjmp	.-8      	; 0x1578 <fm_rsq_status+0x18>
    1580:	8f ea       	ldi	r24, 0xAF	; 175
    1582:	94 e0       	ldi	r25, 0x04	; 4
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <fm_rsq_status+0x24>
    1588:	00 c0       	rjmp	.+0      	; 0x158a <fm_rsq_status+0x2a>
    158a:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    158c:	48 e0       	ldi	r20, 0x08	; 8
    158e:	61 e6       	ldi	r22, 0x61	; 97
    1590:	73 e0       	ldi	r23, 0x03	; 3
    1592:	82 e2       	ldi	r24, 0x22	; 34
    1594:	0e 94 9d 09 	call	0x133a	; 0x133a <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1598:	0e 94 88 09 	call	0x1310	; 0x1310 <twi_busy>
    159c:	81 11       	cpse	r24, r1
    159e:	fc cf       	rjmp	.-8      	; 0x1598 <fm_rsq_status+0x38>
}
    15a0:	08 95       	ret

000015a2 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    15a2:	82 e2       	ldi	r24, 0x22	; 34
    15a4:	80 93 58 03 	sts	0x0358, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	80 93 59 03 	sts	0x0359, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    15ae:	42 e0       	ldi	r20, 0x02	; 2
    15b0:	68 e5       	ldi	r22, 0x58	; 88
    15b2:	73 e0       	ldi	r23, 0x03	; 3
    15b4:	82 e2       	ldi	r24, 0x22	; 34
    15b6:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    15ba:	0e 94 88 09 	call	0x1310	; 0x1310 <twi_busy>
    15be:	81 11       	cpse	r24, r1
    15c0:	fc cf       	rjmp	.-8      	; 0x15ba <fm_tune_status+0x18>
    15c2:	8f ea       	ldi	r24, 0xAF	; 175
    15c4:	94 e0       	ldi	r25, 0x04	; 4
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <fm_tune_status+0x24>
    15ca:	00 c0       	rjmp	.+0      	; 0x15cc <fm_tune_status+0x2a>
    15cc:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    15ce:	48 e0       	ldi	r20, 0x08	; 8
    15d0:	61 e6       	ldi	r22, 0x61	; 97
    15d2:	73 e0       	ldi	r23, 0x03	; 3
    15d4:	82 e2       	ldi	r24, 0x22	; 34
    15d6:	0e 94 9d 09 	call	0x133a	; 0x133a <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    15da:	0e 94 88 09 	call	0x1310	; 0x1310 <twi_busy>
    15de:	81 11       	cpse	r24, r1
    15e0:	fc cf       	rjmp	.-8      	; 0x15da <fm_tune_status+0x38>
}
    15e2:	08 95       	ret

000015e4 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    15e4:	82 e4       	ldi	r24, 0x42	; 66
    15e6:	80 93 58 03 	sts	0x0358, r24
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 93 59 03 	sts	0x0359, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    15f0:	42 e0       	ldi	r20, 0x02	; 2
    15f2:	68 e5       	ldi	r22, 0x58	; 88
    15f4:	73 e0       	ldi	r23, 0x03	; 3
    15f6:	82 e2       	ldi	r24, 0x22	; 34
    15f8:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    15fc:	0e 94 88 09 	call	0x1310	; 0x1310 <twi_busy>
    1600:	81 11       	cpse	r24, r1
    1602:	fc cf       	rjmp	.-8      	; 0x15fc <am_tune_status+0x18>
    1604:	8f ea       	ldi	r24, 0xAF	; 175
    1606:	94 e0       	ldi	r25, 0x04	; 4
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <am_tune_status+0x24>
    160c:	00 c0       	rjmp	.+0      	; 0x160e <am_tune_status+0x2a>
    160e:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1610:	48 e0       	ldi	r20, 0x08	; 8
    1612:	61 e6       	ldi	r22, 0x61	; 97
    1614:	73 e0       	ldi	r23, 0x03	; 3
    1616:	82 e2       	ldi	r24, 0x22	; 34
    1618:	0c 94 9d 09 	jmp	0x133a	; 0x133a <twi_start_rd>

0000161c <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    161c:	83 e4       	ldi	r24, 0x43	; 67
    161e:	80 93 58 03 	sts	0x0358, r24
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	80 93 59 03 	sts	0x0359, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1628:	42 e0       	ldi	r20, 0x02	; 2
    162a:	68 e5       	ldi	r22, 0x58	; 88
    162c:	73 e0       	ldi	r23, 0x03	; 3
    162e:	82 e2       	ldi	r24, 0x22	; 34
    1630:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1634:	0e 94 88 09 	call	0x1310	; 0x1310 <twi_busy>
    1638:	81 11       	cpse	r24, r1
    163a:	fc cf       	rjmp	.-8      	; 0x1634 <am_rsq_status+0x18>
    163c:	8f ea       	ldi	r24, 0xAF	; 175
    163e:	94 e0       	ldi	r25, 0x04	; 4
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <am_rsq_status+0x24>
    1644:	00 c0       	rjmp	.+0      	; 0x1646 <am_rsq_status+0x2a>
    1646:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1648:	48 e0       	ldi	r20, 0x08	; 8
    164a:	61 e6       	ldi	r22, 0x61	; 97
    164c:	73 e0       	ldi	r23, 0x03	; 3
    164e:	82 e2       	ldi	r24, 0x22	; 34
    1650:	0c 94 9d 09 	jmp	0x133a	; 0x133a <twi_start_rd>

00001654 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    1654:	e8 e5       	ldi	r30, 0x58	; 88
    1656:	f3 e0       	ldi	r31, 0x03	; 3
    1658:	22 e1       	ldi	r18, 0x12	; 18
    165a:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    165c:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    165e:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    1660:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    1662:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    1664:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1666:	46 e0       	ldi	r20, 0x06	; 6
    1668:	bf 01       	movw	r22, r30
    166a:	82 e2       	ldi	r24, 0x22	; 34
    166c:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1670:	8f e3       	ldi	r24, 0x3F	; 63
    1672:	9c e9       	ldi	r25, 0x9C	; 156
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <set_property+0x20>
    1678:	00 c0       	rjmp	.+0      	; 0x167a <set_property+0x26>
    167a:	00 00       	nop
    167c:	08 95       	ret

0000167e <fm_pwr_up>:
//restore the previous fm frequency  
 //current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
 //current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    167e:	e8 e5       	ldi	r30, 0x58	; 88
    1680:	f3 e0       	ldi	r31, 0x03	; 3
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    1686:	80 e5       	ldi	r24, 0x50	; 80
    1688:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    168a:	85 e0       	ldi	r24, 0x05	; 5
    168c:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    168e:	43 e0       	ldi	r20, 0x03	; 3
    1690:	bf 01       	movw	r22, r30
    1692:	82 e2       	ldi	r24, 0x22	; 34
    1694:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
    1698:	2f ef       	ldi	r18, 0xFF	; 255
    169a:	8c e4       	ldi	r24, 0x4C	; 76
    169c:	98 e0       	ldi	r25, 0x08	; 8
    169e:	21 50       	subi	r18, 0x01	; 1
    16a0:	80 40       	sbci	r24, 0x00	; 0
    16a2:	90 40       	sbci	r25, 0x00	; 0
    16a4:	e1 f7       	brne	.-8      	; 0x169e <fm_pwr_up+0x20>
    16a6:	00 c0       	rjmp	.+0      	; 0x16a8 <fm_pwr_up+0x2a>
    16a8:	00 00       	nop
  _delay_ms(170);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <set_property>

000016b6 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
    16b6:	8d e8       	ldi	r24, 0x8D	; 141
    16b8:	92 e0       	ldi	r25, 0x02	; 2
    16ba:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <eeprom_read_word>
    16be:	90 93 93 02 	sts	0x0293, r25
    16c2:	80 93 92 02 	sts	0x0292, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    16c6:	83 e6       	ldi	r24, 0x63	; 99
    16c8:	92 e0       	ldi	r25, 0x02	; 2
    16ca:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <eeprom_read_byte>
    16ce:	80 93 90 02 	sts	0x0290, r24

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    16d2:	e8 e5       	ldi	r30, 0x58	; 88
    16d4:	f3 e0       	ldi	r31, 0x03	; 3
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    16da:	81 e5       	ldi	r24, 0x51	; 81
    16dc:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    16de:	85 e0       	ldi	r24, 0x05	; 5
    16e0:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    16e2:	43 e0       	ldi	r20, 0x03	; 3
    16e4:	bf 01       	movw	r22, r30
    16e6:	82 e2       	ldi	r24, 0x22	; 34
    16e8:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
    16ec:	2f ef       	ldi	r18, 0xFF	; 255
    16ee:	8b ed       	ldi	r24, 0xDB	; 219
    16f0:	95 e0       	ldi	r25, 0x05	; 5
    16f2:	21 50       	subi	r18, 0x01	; 1
    16f4:	80 40       	sbci	r24, 0x00	; 0
    16f6:	90 40       	sbci	r25, 0x00	; 0
    16f8:	e1 f7       	brne	.-8      	; 0x16f2 <am_pwr_up+0x3c>
    16fa:	00 c0       	rjmp	.+0      	; 0x16fc <am_pwr_up+0x46>
    16fc:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <set_property>

0000170a <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    170a:	88 e9       	ldi	r24, 0x98	; 152
    170c:	92 e0       	ldi	r25, 0x02	; 2
    170e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <eeprom_read_word>
    1712:	90 93 97 02 	sts	0x0297, r25
    1716:	80 93 96 02 	sts	0x0296, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    171a:	83 e6       	ldi	r24, 0x63	; 99
    171c:	92 e0       	ldi	r25, 0x02	; 2
    171e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <eeprom_read_byte>
    1722:	80 93 90 02 	sts	0x0290, r24

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    1726:	e8 e5       	ldi	r30, 0x58	; 88
    1728:	f3 e0       	ldi	r31, 0x03	; 3
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    172e:	81 e5       	ldi	r24, 0x51	; 81
    1730:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    1732:	85 e0       	ldi	r24, 0x05	; 5
    1734:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1736:	43 e0       	ldi	r20, 0x03	; 3
    1738:	bf 01       	movw	r22, r30
    173a:	82 e2       	ldi	r24, 0x22	; 34
    173c:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
    1740:	2f ef       	ldi	r18, 0xFF	; 255
    1742:	8b ed       	ldi	r24, 0xDB	; 219
    1744:	95 e0       	ldi	r25, 0x05	; 5
    1746:	21 50       	subi	r18, 0x01	; 1
    1748:	80 40       	sbci	r24, 0x00	; 0
    174a:	90 40       	sbci	r25, 0x00	; 0
    174c:	e1 f7       	brne	.-8      	; 0x1746 <sw_pwr_up+0x3c>
    174e:	00 c0       	rjmp	.+0      	; 0x1750 <sw_pwr_up+0x46>
    1750:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	82 e0       	ldi	r24, 0x02	; 2
    1758:	93 e3       	ldi	r25, 0x33	; 51
    175a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	71 e0       	ldi	r23, 0x01	; 1
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	91 e3       	ldi	r25, 0x31	; 49
    1766:	0e 94 2a 0b 	call	0x1654	; 0x1654 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <set_property>

00001776 <get_rev>:
//TODO: UNTESTED!
//Report the chip revision info via uart1. UART1 be setup and connected to 
//a dumb terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//
void get_rev(){
    si4734_wr_buf[0] = GET_REV;                   //get rev command 
    1776:	80 e1       	ldi	r24, 0x10	; 16
    1778:	80 93 58 03 	sts	0x0358, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	68 e5       	ldi	r22, 0x58	; 88
    1780:	73 e0       	ldi	r23, 0x03	; 3
    1782:	82 e2       	ldi	r24, 0x22	; 34
    1784:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    1788:	0e 94 88 09 	call	0x1310	; 0x1310 <twi_busy>
    178c:	81 11       	cpse	r24, r1
    178e:	fc cf       	rjmp	.-8      	; 0x1788 <get_rev+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1790:	8f ea       	ldi	r24, 0xAF	; 175
    1792:	94 e0       	ldi	r25, 0x04	; 4
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	f1 f7       	brne	.-4      	; 0x1794 <get_rev+0x1e>
    1798:	00 c0       	rjmp	.+0      	; 0x179a <get_rev+0x24>
    179a:	00 00       	nop
    _delay_us(300);        //wait for processing delay
//get the revision info  
    twi_start_rd(SI4734_ADDRESS, si4734_revision_buf, 8);
    179c:	48 e0       	ldi	r20, 0x08	; 8
    179e:	69 e6       	ldi	r22, 0x69	; 105
    17a0:	73 e0       	ldi	r23, 0x03	; 3
    17a2:	82 e2       	ldi	r24, 0x22	; 34
    17a4:	0e 94 9d 09 	call	0x133a	; 0x133a <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    17a8:	0e 94 88 09 	call	0x1310	; 0x1310 <twi_busy>
    17ac:	81 11       	cpse	r24, r1
    17ae:	fc cf       	rjmp	.-8      	; 0x17a8 <get_rev+0x32>
//use TABs instead?
    uart1_puts("Si4734 Rev:  last 2 digits of part no.   chip rev     \n\r");
    17b0:	8c e4       	ldi	r24, 0x4C	; 76
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    uart1_puts("             -------------------------   --------     \n\r");
    17b8:	85 e8       	ldi	r24, 0x85	; 133
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    uart1_puts("                          "); itoa((int)si4734_revision_buf[1], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); 
    17c0:	8e eb       	ldi	r24, 0xBE	; 190
    17c2:	91 e0       	ldi	r25, 0x01	; 1
    17c4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    17c8:	80 91 6a 03 	lds	r24, 0x036A
    17cc:	4a e0       	ldi	r20, 0x0A	; 10
    17ce:	60 ee       	ldi	r22, 0xE0	; 224
    17d0:	72 e0       	ldi	r23, 0x02	; 2
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__itoa_ncheck>
    17d8:	80 ee       	ldi	r24, 0xE0	; 224
    17da:	92 e0       	ldi	r25, 0x02	; 2
    17dc:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    uart1_puts("             "); itoa((int)si4734_revision_buf[2], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    17e0:	8b ec       	ldi	r24, 0xCB	; 203
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    17e8:	80 91 6b 03 	lds	r24, 0x036B
    17ec:	4a e0       	ldi	r20, 0x0A	; 10
    17ee:	60 ee       	ldi	r22, 0xE0	; 224
    17f0:	72 e0       	ldi	r23, 0x02	; 2
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__itoa_ncheck>
    17f8:	80 ee       	ldi	r24, 0xE0	; 224
    17fa:	92 e0       	ldi	r25, 0x02	; 2
    17fc:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    1800:	8b eb       	ldi	r24, 0xBB	; 187
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <uart1_puts>

00001808 <get_fm_rsq_status>:
    1808:	ff 92       	push	r15
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	a8 97       	sbiw	r28, 0x28	; 40
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	89 ed       	ldi	r24, 0xD9	; 217
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    182a:	89 ee       	ldi	r24, 0xE9	; 233
    182c:	91 e0       	ldi	r25, 0x01	; 1
    182e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    1832:	01 e6       	ldi	r16, 0x61	; 97
    1834:	13 e0       	ldi	r17, 0x03	; 3
    1836:	f8 01       	movw	r30, r16
    1838:	80 81       	ld	r24, Z
    183a:	40 e1       	ldi	r20, 0x10	; 16
    183c:	60 ee       	ldi	r22, 0xE0	; 224
    183e:	72 e0       	ldi	r23, 0x02	; 2
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__itoa_ncheck>
    1846:	80 ee       	ldi	r24, 0xE0	; 224
    1848:	92 e0       	ldi	r25, 0x02	; 2
    184a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    184e:	8b eb       	ldi	r24, 0xBB	; 187
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    1856:	89 ef       	ldi	r24, 0xF9	; 249
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    185e:	f8 01       	movw	r30, r16
    1860:	81 81       	ldd	r24, Z+1	; 0x01
    1862:	4a e0       	ldi	r20, 0x0A	; 10
    1864:	60 ee       	ldi	r22, 0xE0	; 224
    1866:	72 e0       	ldi	r23, 0x02	; 2
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__itoa_ncheck>
    186e:	80 ee       	ldi	r24, 0xE0	; 224
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    1876:	8b eb       	ldi	r24, 0xBB	; 187
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    187e:	f8 01       	movw	r30, r16
    1880:	f3 80       	ldd	r15, Z+3	; 0x03
    1882:	89 e0       	ldi	r24, 0x09	; 9
    1884:	92 e0       	ldi	r25, 0x02	; 2
    1886:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    188a:	4a e0       	ldi	r20, 0x0A	; 10
    188c:	60 ee       	ldi	r22, 0xE0	; 224
    188e:	72 e0       	ldi	r23, 0x02	; 2
    1890:	8f 2d       	mov	r24, r15
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__itoa_ncheck>
    1898:	80 ee       	ldi	r24, 0xE0	; 224
    189a:	92 e0       	ldi	r25, 0x02	; 2
    189c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    18a0:	8b eb       	ldi	r24, 0xBB	; 187
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    18a8:	89 e1       	ldi	r24, 0x19	; 25
    18aa:	92 e0       	ldi	r25, 0x02	; 2
    18ac:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    18b0:	f8 01       	movw	r30, r16
    18b2:	82 81       	ldd	r24, Z+2	; 0x02
    18b4:	40 e1       	ldi	r20, 0x10	; 16
    18b6:	be 01       	movw	r22, r28
    18b8:	6f 5f       	subi	r22, 0xFF	; 255
    18ba:	7f 4f       	sbci	r23, 0xFF	; 255
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__itoa_ncheck>
    18c2:	ce 01       	movw	r24, r28
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    18ca:	8b eb       	ldi	r24, 0xBB	; 187
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    18d2:	89 e2       	ldi	r24, 0x29	; 41
    18d4:	92 e0       	ldi	r25, 0x02	; 2
    18d6:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    18da:	f8 01       	movw	r30, r16
    18dc:	83 81       	ldd	r24, Z+3	; 0x03
    18de:	40 e1       	ldi	r20, 0x10	; 16
    18e0:	be 01       	movw	r22, r28
    18e2:	6f 5f       	subi	r22, 0xFF	; 255
    18e4:	7f 4f       	sbci	r23, 0xFF	; 255
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__itoa_ncheck>
    18ec:	ce 01       	movw	r24, r28
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    18f4:	8b eb       	ldi	r24, 0xBB	; 187
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    18fc:	89 e3       	ldi	r24, 0x39	; 57
    18fe:	92 e0       	ldi	r25, 0x02	; 2
    1900:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    1904:	f8 01       	movw	r30, r16
    1906:	84 81       	ldd	r24, Z+4	; 0x04
    1908:	40 e1       	ldi	r20, 0x10	; 16
    190a:	60 ee       	ldi	r22, 0xE0	; 224
    190c:	72 e0       	ldi	r23, 0x02	; 2
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__itoa_ncheck>
    1914:	80 ee       	ldi	r24, 0xE0	; 224
    1916:	92 e0       	ldi	r25, 0x02	; 2
    1918:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    191c:	8b eb       	ldi	r24, 0xBB	; 187
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	0e 94 d6 09 	call	0x13ac	; 0x13ac <uart1_puts>
    1924:	a8 96       	adiw	r28, 0x28	; 40
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	ff 90       	pop	r15
    193a:	08 95       	ret

0000193c <main>:

//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(){
  DDRB   = 0xF7; //output mode for SS, MOSI, SCLK & Pins 4-7 (7Seg & Bar Graph)
    193c:	87 ef       	ldi	r24, 0xF7	; 247
    193e:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); // Enable SPI, master mode, clk low on idle, leading edge sample
    1940:	80 e5       	ldi	r24, 0x50	; 80
    1942:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (0<<SPI2X); //No double speed operation
    1944:	1e b8       	out	0x0e, r1	; 14
// Triggers a 1 sec TOV Interrupt.
//
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
    1946:	80 b7       	in	r24, 0x30	; 48
    1948:	88 60       	ori	r24, 0x08	; 8
    194a:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE0);  //TimerOverflow Interrupt Enable
    194c:	87 b7       	in	r24, 0x37	; 55
    194e:	81 60       	ori	r24, 0x01	; 1
    1950:	87 bf       	out	0x37, r24	; 55
  TCCR0 =  (1<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode, 128 prescale, OC0 Disconnected
    1952:	85 e0       	ldi	r24, 0x05	; 5
    1954:	83 bf       	out	0x33, r24	; 51
//
// setup TCNT1 in pwm mode
// set OC1A (PB5) as pwm output
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);
    1956:	8f b5       	in	r24, 0x2f	; 47
    1958:	82 60       	ori	r24, 0x02	; 2
    195a:	8f bd       	out	0x2f, r24	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10);
    195c:	8e b5       	in	r24, 0x2e	; 46
    195e:	89 61       	ori	r24, 0x19	; 25
    1960:	8e bd       	out	0x2e, r24	; 46
	//no forced compare
	TCCR1C = 0x00;
    1962:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 ec       	ldi	r25, 0xC0	; 192
    196a:	9b bd       	out	0x2b, r25	; 43
    196c:	8a bd       	out	0x2a, r24	; 42
	ICR1  = 0xF000; //clear at 0xF000
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 ef       	ldi	r25, 0xF0	; 240
    1972:	97 bd       	out	0x27, r25	; 39
    1974:	86 bd       	out	0x26, r24	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
    1976:	87 b7       	in	r24, 0x37	; 55
    1978:	80 61       	ori	r24, 0x10	; 16
    197a:	87 bf       	out	0x37, r24	; 55
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
    197c:	88 e1       	ldi	r24, 0x18	; 24
    197e:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
    1980:	87 b7       	in	r24, 0x37	; 55
    1982:	8f 7e       	andi	r24, 0xEF	; 239
    1984:	87 bf       	out	0x37, r24	; 55
//**********************************************************************
void init_tcnt2(){
// 7-Seg Brigtness PWM

  //enable interrupts for Timer/Counter2 overflow
  TIMSK |= (1<<TOIE2) | (0<<OCIE2);  //TimerOverflow Interrupt Enable
    1986:	87 b7       	in	r24, 0x37	; 55
    1988:	80 64       	ori	r24, 0x40	; 64
    198a:	87 bf       	out	0x37, r24	; 55
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (1<<CS21) | (1<<CS20);
    198c:	8b e7       	ldi	r24, 0x7B	; 123
    198e:	85 bd       	out	0x25, r24	; 37
	//Fast-PWM mode, Inverting PWM Mode, 64 prescale, OC2(PB7)(PWM) Connected
	//0-256 takes 1ms (16k CLKIO cycles)
  OCR2 =  0xF0;                   //compare at 128(50%)
    1990:	80 ef       	ldi	r24, 0xF0	; 240
    1992:	83 bd       	out	0x23, r24	; 35
//                            timer/counter3_init
//**********************************************************************
void init_tcnt3(){
// Volume PWM
// setup TCNT3 in pwm mode
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0) | (0<<WGM31) | (1<<WGM30);
    1994:	80 91 8b 00 	lds	r24, 0x008B
    1998:	81 68       	ori	r24, 0x81	; 129
    199a:	80 93 8b 00 	sts	0x008B, r24
	// Fast PWM, 8-Bit mode top 0x00FF
	// Clear OC3A on compare match, Fast PWM (non-inverting)
	//use ICR1 as source for TOP, use clk/1
	TCCR3B |= (0<<WGM33) | (1<< WGM32) | (1<<CS30);
    199e:	80 91 8a 00 	lds	r24, 0x008A
    19a2:	89 60       	ori	r24, 0x09	; 9
    19a4:	80 93 8a 00 	sts	0x008A, r24
	// No prescaling
	//no forced compare
	TCCR3C = 0x00;
    19a8:	10 92 8c 00 	sts	0x008C, r1
	//20% duty cycle, LED is a bit dimmer
	OCR3A = 0x00CD; // Initally at 50% Duty Cycle
    19ac:	8d ec       	ldi	r24, 0xCD	; 205
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	90 93 87 00 	sts	0x0087, r25
    19b4:	80 93 86 00 	sts	0x0086, r24
	disable_tcnt1(); // stop the clock
	init_tcnt2(); // initalize TIMER/COUNTER2 - 7-Seg Brigtness PWM 8-bit
	init_tcnt3(); // initalize TIMER/COUNTER3 - Audio Volume PWM 16-bit
	
//CHANGE
	init_twi();   // initialize TWI(I2C) interface - Temp Sensor
    19b8:	0e 94 ae 09 	call	0x135c	; 0x135c <init_twi>
	lm73_wr_buf[0] = 0x00; //Loads the buffer with the read only temperature pointer addr
    19bc:	10 92 af 02 	sts	0x02AF, r1
			       //The ADDR Pin is left floating for addr 0x90
	twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2); //start the TWI write process (twi_start_wr())
    19c0:	42 e0       	ldi	r20, 0x02	; 2
    19c2:	6f ea       	ldi	r22, 0xAF	; 175
    19c4:	72 e0       	ldi	r23, 0x02	; 2
    19c6:	80 e9       	ldi	r24, 0x90	; 144
    19c8:	0e 94 8c 09 	call	0x1318	; 0x1318 <twi_start_wr>
	
	//ATMega48 Functions
	//USART
	uart_init();
    19cc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_init>
//                            timer/counter0_init
//**********************************************************************
void init_DDRs(){
// Add HERE
	// Set the DDR for Ports
	DDRA = DDRA_OUTPUT; // 7-Seg Data out
    19d0:	8f ef       	ldi	r24, 0xFF	; 255
    19d2:	8a bb       	out	0x1a, r24	; 26
	DDRE = (1<<PE3) | (1<<PE5) | (1<<PE6) | (1<<PE7);
    19d4:	88 ee       	ldi	r24, 0xE8	; 232
    19d6:	82 b9       	out	0x02, r24	; 2
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
    19d8:	84 e0       	ldi	r24, 0x04	; 4
    19da:	81 bb       	out	0x11, r24	; 17
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	84 bb       	out	0x14, r24	; 20
	incdec_mode = 0x01;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	80 93 4f 02 	sts	0x024F, r24
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
    19e6:	85 e5       	ldi	r24, 0x55	; 85
    19e8:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
    19ea:	77 9b       	sbis	0x0e, 7	; 14
    19ec:	fe cf       	rjmp	.-4      	; 0x19ea <main+0xae>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
    19ee:	8f b1       	in	r24, 0x0f	; 15
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
	incdec_mode = 0x01;
	// Read the starting encoder positions
	old_encoder = spi_rw8(0x55);
    19f0:	80 93 4c 02 	sts	0x024C, r24
//                            init_adc
//**********************************************************************
void init_ADC(){
// ADC used to read brightness levels using a photoresistor
	//Initalize ADC and its ports
	DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input
    19f4:	80 91 61 00 	lds	r24, 0x0061
    19f8:	8f 77       	andi	r24, 0x7F	; 127
    19fa:	80 93 61 00 	sts	0x0061, r24
	PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
    19fe:	80 91 62 00 	lds	r24, 0x0062
    1a02:	8f 77       	andi	r24, 0x7F	; 127
    1a04:	80 93 62 00 	sts	0x0062, r24

	ADMUX = (1<<ADLAR) | (1<<REFS0) | (1<<MUX0) | (1<<MUX1) | (1<<MUX2);
    1a08:	87 e6       	ldi	r24, 0x67	; 103
    1a0a:	87 b9       	out	0x07, r24	; 7
	//ADMUX = (1<<MUX0) | (1<<MUX1) | (1<<MUX2)
	//single-ended, input PORTF bit 7, right adjusted, 10 bits

	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
    1a0c:	87 e8       	ldi	r24, 0x87	; 135
    1a0e:	86 b9       	out	0x06, r24	; 6
	//USART
	uart_init();
	
	init_DDRs(); // initalize DDRs for the display, encoders bargraph
	init_ADC();
	lcd_init(); // initialize the lcd screen
    1a10:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_init>

	//Radio code
	EIMSK |= 0x80; //Enable int 7 mask
    1a14:	89 b7       	in	r24, 0x39	; 57
    1a16:	80 68       	ori	r24, 0x80	; 128
    1a18:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1<<ISC71) | (1<<ISC70); //Set external interupt control reg B
    1a1a:	8a b7       	in	r24, 0x3a	; 58
    1a1c:	80 6c       	ori	r24, 0xC0	; 192
    1a1e:	8a bf       	out	0x3a, r24	; 58

	//radio_reset();
	radio_reset();
    1a20:	0e 94 ca 05 	call	0xb94	; 0xb94 <radio_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a24:	2f ef       	ldi	r18, 0xFF	; 255
    1a26:	81 ee       	ldi	r24, 0xE1	; 225
    1a28:	94 e0       	ldi	r25, 0x04	; 4
    1a2a:	21 50       	subi	r18, 0x01	; 1
    1a2c:	80 40       	sbci	r24, 0x00	; 0
    1a2e:	90 40       	sbci	r25, 0x00	; 0
    1a30:	e1 f7       	brne	.-8      	; 0x1a2a <main+0xee>
    1a32:	00 c0       	rjmp	.+0      	; 0x1a34 <main+0xf8>
    1a34:	00 00       	nop
	_delay_ms(100);


	sei(); // enable global interrupts
    1a36:	78 94       	sei


	fm_pwr_up(); //powerup the radio as appropriate
    1a38:	0e 94 3f 0b 	call	0x167e	; 0x167e <fm_pwr_up>
    1a3c:	2f ef       	ldi	r18, 0xFF	; 255
    1a3e:	81 ee       	ldi	r24, 0xE1	; 225
    1a40:	94 e0       	ldi	r25, 0x04	; 4
    1a42:	21 50       	subi	r18, 0x01	; 1
    1a44:	80 40       	sbci	r24, 0x00	; 0
    1a46:	90 40       	sbci	r25, 0x00	; 0
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <main+0x106>
    1a4a:	00 c0       	rjmp	.+0      	; 0x1a4c <main+0x110>
    1a4c:	00 00       	nop
	_delay_ms(100);


	current_fm_freq = 10630; //arg2, arg3: 99.9Mhz, 200khz steps
    1a4e:	86 e8       	ldi	r24, 0x86	; 134
    1a50:	99 e2       	ldi	r25, 0x29	; 41
    1a52:	90 93 95 02 	sts	0x0295, r25
    1a56:	80 93 94 02 	sts	0x0294, r24
	fm_tune_freq(); //tune radio to frequency in current_fm_freq
    1a5a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <fm_tune_freq>
    1a5e:	2f ef       	ldi	r18, 0xFF	; 255
    1a60:	81 ee       	ldi	r24, 0xE1	; 225
    1a62:	94 e0       	ldi	r25, 0x04	; 4
    1a64:	21 50       	subi	r18, 0x01	; 1
    1a66:	80 40       	sbci	r24, 0x00	; 0
    1a68:	90 40       	sbci	r25, 0x00	; 0
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <main+0x128>
    1a6c:	00 c0       	rjmp	.+0      	; 0x1a6e <main+0x132>
    1a6e:	00 00       	nop
		for(;j<10;j++){
		for(;i<5;i++){
                	PORTB = i<<4 | 0<<PB7; // Select a segment
			PORTA = segment_data[i]; // Send data to the segment
			_delay_us(10); // Hold
			PORTA = 0XFF; //Seg off to reduce flicker
    1a70:	cf ef       	ldi	r28, 0xFF	; 255
//CHANGE

	while(1){                             //main while loop
	// Send the Digits to the Display
	  //break up the disp_value to 4, BCD digits in the array: call (segsum)
		segsum(clockmode);
    1a72:	80 91 4e 02 	lds	r24, 0x024E
    1a76:	0e 94 48 01 	call	0x290	; 0x290 <segsum>
	  //bound a counter (0-4) to keep track of digit to display
		i = 0;
    1a7a:	10 92 91 02 	sts	0x0291, r1
		j = 0; //Refresh the seg data less frequently
    1a7e:	10 92 66 02 	sts	0x0266, r1
	  //send 7 segment code to LED segments
		for(;j<10;j++){
    1a82:	80 91 66 02 	lds	r24, 0x0266
    1a86:	8a 30       	cpi	r24, 0x0A	; 10
    1a88:	d8 f0       	brcs	.+54     	; 0x1ac0 <main+0x184>
    1a8a:	f3 cf       	rjmp	.-26     	; 0x1a72 <main+0x136>
		for(;i<5;i++){
                	PORTB = i<<4 | 0<<PB7; // Select a segment
    1a8c:	80 91 91 02 	lds	r24, 0x0291
    1a90:	82 95       	swap	r24
    1a92:	80 7f       	andi	r24, 0xF0	; 240
    1a94:	88 bb       	out	0x18, r24	; 24
			PORTA = segment_data[i]; // Send data to the segment
    1a96:	e0 91 91 02 	lds	r30, 0x0291
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	e6 56       	subi	r30, 0x66	; 102
    1a9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1aa4:	25 e3       	ldi	r18, 0x35	; 53
    1aa6:	2a 95       	dec	r18
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <main+0x16a>
    1aaa:	00 00       	nop
			_delay_us(10); // Hold
			PORTA = 0XFF; //Seg off to reduce flicker
    1aac:	cb bb       	out	0x1b, r28	; 27
    1aae:	85 e0       	ldi	r24, 0x05	; 5
    1ab0:	8a 95       	dec	r24
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <main+0x174>
    1ab4:	00 00       	nop
	  //bound a counter (0-4) to keep track of digit to display
		i = 0;
		j = 0; //Refresh the seg data less frequently
	  //send 7 segment code to LED segments
		for(;j<10;j++){
		for(;i<5;i++){
    1ab6:	80 91 91 02 	lds	r24, 0x0291
    1aba:	8f 5f       	subi	r24, 0xFF	; 255
    1abc:	80 93 91 02 	sts	0x0291, r24
    1ac0:	80 91 91 02 	lds	r24, 0x0291
    1ac4:	85 30       	cpi	r24, 0x05	; 5
    1ac6:	10 f3       	brcs	.-60     	; 0x1a8c <main+0x150>
		segsum(clockmode);
	  //bound a counter (0-4) to keep track of digit to display
		i = 0;
		j = 0; //Refresh the seg data less frequently
	  //send 7 segment code to LED segments
		for(;j<10;j++){
    1ac8:	80 91 66 02 	lds	r24, 0x0266
    1acc:	8f 5f       	subi	r24, 0xFF	; 255
    1ace:	80 93 66 02 	sts	0x0266, r24
    1ad2:	80 91 66 02 	lds	r24, 0x0266
    1ad6:	8a 30       	cpi	r24, 0x0A	; 10
    1ad8:	98 f3       	brcs	.-26     	; 0x1ac0 <main+0x184>
    1ada:	cb cf       	rjmp	.-106    	; 0x1a72 <main+0x136>

00001adc <__divmodhi4>:
    1adc:	97 fb       	bst	r25, 7
    1ade:	07 2e       	mov	r0, r23
    1ae0:	16 f4       	brtc	.+4      	; 0x1ae6 <__divmodhi4+0xa>
    1ae2:	00 94       	com	r0
    1ae4:	07 d0       	rcall	.+14     	; 0x1af4 <__divmodhi4_neg1>
    1ae6:	77 fd       	sbrc	r23, 7
    1ae8:	09 d0       	rcall	.+18     	; 0x1afc <__divmodhi4_neg2>
    1aea:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__udivmodhi4>
    1aee:	07 fc       	sbrc	r0, 7
    1af0:	05 d0       	rcall	.+10     	; 0x1afc <__divmodhi4_neg2>
    1af2:	3e f4       	brtc	.+14     	; 0x1b02 <__divmodhi4_exit>

00001af4 <__divmodhi4_neg1>:
    1af4:	90 95       	com	r25
    1af6:	81 95       	neg	r24
    1af8:	9f 4f       	sbci	r25, 0xFF	; 255
    1afa:	08 95       	ret

00001afc <__divmodhi4_neg2>:
    1afc:	70 95       	com	r23
    1afe:	61 95       	neg	r22
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255

00001b02 <__divmodhi4_exit>:
    1b02:	08 95       	ret

00001b04 <__divmodsi4>:
    1b04:	05 2e       	mov	r0, r21
    1b06:	97 fb       	bst	r25, 7
    1b08:	1e f4       	brtc	.+6      	; 0x1b10 <__divmodsi4+0xc>
    1b0a:	00 94       	com	r0
    1b0c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__negsi2>
    1b10:	57 fd       	sbrc	r21, 7
    1b12:	07 d0       	rcall	.+14     	; 0x1b22 <__divmodsi4_neg2>
    1b14:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__udivmodsi4>
    1b18:	07 fc       	sbrc	r0, 7
    1b1a:	03 d0       	rcall	.+6      	; 0x1b22 <__divmodsi4_neg2>
    1b1c:	4e f4       	brtc	.+18     	; 0x1b30 <__divmodsi4_exit>
    1b1e:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__negsi2>

00001b22 <__divmodsi4_neg2>:
    1b22:	50 95       	com	r21
    1b24:	40 95       	com	r20
    1b26:	30 95       	com	r19
    1b28:	21 95       	neg	r18
    1b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b2e:	5f 4f       	sbci	r21, 0xFF	; 255

00001b30 <__divmodsi4_exit>:
    1b30:	08 95       	ret

00001b32 <__negsi2>:
    1b32:	90 95       	com	r25
    1b34:	80 95       	com	r24
    1b36:	70 95       	com	r23
    1b38:	61 95       	neg	r22
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	08 95       	ret

00001b42 <__tablejump2__>:
    1b42:	ee 0f       	add	r30, r30
    1b44:	ff 1f       	adc	r31, r31
    1b46:	00 24       	eor	r0, r0
    1b48:	00 1c       	adc	r0, r0
    1b4a:	0b be       	out	0x3b, r0	; 59
    1b4c:	07 90       	elpm	r0, Z+
    1b4e:	f6 91       	elpm	r31, Z
    1b50:	e0 2d       	mov	r30, r0
    1b52:	09 94       	ijmp

00001b54 <__udivmodhi4>:
    1b54:	aa 1b       	sub	r26, r26
    1b56:	bb 1b       	sub	r27, r27
    1b58:	51 e1       	ldi	r21, 0x11	; 17
    1b5a:	07 c0       	rjmp	.+14     	; 0x1b6a <__udivmodhi4_ep>

00001b5c <__udivmodhi4_loop>:
    1b5c:	aa 1f       	adc	r26, r26
    1b5e:	bb 1f       	adc	r27, r27
    1b60:	a6 17       	cp	r26, r22
    1b62:	b7 07       	cpc	r27, r23
    1b64:	10 f0       	brcs	.+4      	; 0x1b6a <__udivmodhi4_ep>
    1b66:	a6 1b       	sub	r26, r22
    1b68:	b7 0b       	sbc	r27, r23

00001b6a <__udivmodhi4_ep>:
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	5a 95       	dec	r21
    1b70:	a9 f7       	brne	.-22     	; 0x1b5c <__udivmodhi4_loop>
    1b72:	80 95       	com	r24
    1b74:	90 95       	com	r25
    1b76:	bc 01       	movw	r22, r24
    1b78:	cd 01       	movw	r24, r26
    1b7a:	08 95       	ret

00001b7c <__udivmodsi4>:
    1b7c:	a1 e2       	ldi	r26, 0x21	; 33
    1b7e:	1a 2e       	mov	r1, r26
    1b80:	aa 1b       	sub	r26, r26
    1b82:	bb 1b       	sub	r27, r27
    1b84:	fd 01       	movw	r30, r26
    1b86:	0d c0       	rjmp	.+26     	; 0x1ba2 <__udivmodsi4_ep>

00001b88 <__udivmodsi4_loop>:
    1b88:	aa 1f       	adc	r26, r26
    1b8a:	bb 1f       	adc	r27, r27
    1b8c:	ee 1f       	adc	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	a2 17       	cp	r26, r18
    1b92:	b3 07       	cpc	r27, r19
    1b94:	e4 07       	cpc	r30, r20
    1b96:	f5 07       	cpc	r31, r21
    1b98:	20 f0       	brcs	.+8      	; 0x1ba2 <__udivmodsi4_ep>
    1b9a:	a2 1b       	sub	r26, r18
    1b9c:	b3 0b       	sbc	r27, r19
    1b9e:	e4 0b       	sbc	r30, r20
    1ba0:	f5 0b       	sbc	r31, r21

00001ba2 <__udivmodsi4_ep>:
    1ba2:	66 1f       	adc	r22, r22
    1ba4:	77 1f       	adc	r23, r23
    1ba6:	88 1f       	adc	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	1a 94       	dec	r1
    1bac:	69 f7       	brne	.-38     	; 0x1b88 <__udivmodsi4_loop>
    1bae:	60 95       	com	r22
    1bb0:	70 95       	com	r23
    1bb2:	80 95       	com	r24
    1bb4:	90 95       	com	r25
    1bb6:	9b 01       	movw	r18, r22
    1bb8:	ac 01       	movw	r20, r24
    1bba:	bd 01       	movw	r22, r26
    1bbc:	cf 01       	movw	r24, r30
    1bbe:	08 95       	ret

00001bc0 <__itoa_ncheck>:
    1bc0:	bb 27       	eor	r27, r27
    1bc2:	4a 30       	cpi	r20, 0x0A	; 10
    1bc4:	31 f4       	brne	.+12     	; 0x1bd2 <__itoa_ncheck+0x12>
    1bc6:	99 23       	and	r25, r25
    1bc8:	22 f4       	brpl	.+8      	; 0x1bd2 <__itoa_ncheck+0x12>
    1bca:	bd e2       	ldi	r27, 0x2D	; 45
    1bcc:	90 95       	com	r25
    1bce:	81 95       	neg	r24
    1bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd2:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__utoa_common>

00001bd6 <__utoa_ncheck>:
    1bd6:	bb 27       	eor	r27, r27

00001bd8 <__utoa_common>:
    1bd8:	fb 01       	movw	r30, r22
    1bda:	55 27       	eor	r21, r21
    1bdc:	aa 27       	eor	r26, r26
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	aa 1f       	adc	r26, r26
    1be4:	a4 17       	cp	r26, r20
    1be6:	10 f0       	brcs	.+4      	; 0x1bec <__utoa_common+0x14>
    1be8:	a4 1b       	sub	r26, r20
    1bea:	83 95       	inc	r24
    1bec:	50 51       	subi	r21, 0x10	; 16
    1bee:	b9 f7       	brne	.-18     	; 0x1bde <__utoa_common+0x6>
    1bf0:	a0 5d       	subi	r26, 0xD0	; 208
    1bf2:	aa 33       	cpi	r26, 0x3A	; 58
    1bf4:	08 f0       	brcs	.+2      	; 0x1bf8 <__utoa_common+0x20>
    1bf6:	a9 5d       	subi	r26, 0xD9	; 217
    1bf8:	a1 93       	st	Z+, r26
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	79 f7       	brne	.-34     	; 0x1bdc <__utoa_common+0x4>
    1bfe:	b1 11       	cpse	r27, r1
    1c00:	b1 93       	st	Z+, r27
    1c02:	11 92       	st	Z+, r1
    1c04:	cb 01       	movw	r24, r22
    1c06:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <strrev>

00001c0a <strrev>:
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	67 2f       	mov	r22, r23
    1c10:	71 91       	ld	r23, Z+
    1c12:	77 23       	and	r23, r23
    1c14:	e1 f7       	brne	.-8      	; 0x1c0e <strrev+0x4>
    1c16:	32 97       	sbiw	r30, 0x02	; 2
    1c18:	04 c0       	rjmp	.+8      	; 0x1c22 <strrev+0x18>
    1c1a:	7c 91       	ld	r23, X
    1c1c:	6d 93       	st	X+, r22
    1c1e:	70 83       	st	Z, r23
    1c20:	62 91       	ld	r22, -Z
    1c22:	ae 17       	cp	r26, r30
    1c24:	bf 07       	cpc	r27, r31
    1c26:	c8 f3       	brcs	.-14     	; 0x1c1a <strrev+0x10>
    1c28:	08 95       	ret

00001c2a <eeprom_read_byte>:
    1c2a:	e1 99       	sbic	0x1c, 1	; 28
    1c2c:	fe cf       	rjmp	.-4      	; 0x1c2a <eeprom_read_byte>
    1c2e:	9f bb       	out	0x1f, r25	; 31
    1c30:	8e bb       	out	0x1e, r24	; 30
    1c32:	e0 9a       	sbi	0x1c, 0	; 28
    1c34:	99 27       	eor	r25, r25
    1c36:	8d b3       	in	r24, 0x1d	; 29
    1c38:	08 95       	ret

00001c3a <eeprom_read_word>:
    1c3a:	a8 e1       	ldi	r26, 0x18	; 24
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	42 e0       	ldi	r20, 0x02	; 2
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <eeprom_read_blraw>

00001c46 <eeprom_read_block>:
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22

00001c4a <eeprom_read_blraw>:
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	e1 99       	sbic	0x1c, 1	; 28
    1c4e:	fe cf       	rjmp	.-4      	; 0x1c4c <eeprom_read_blraw+0x2>
    1c50:	06 c0       	rjmp	.+12     	; 0x1c5e <eeprom_read_blraw+0x14>
    1c52:	ff bb       	out	0x1f, r31	; 31
    1c54:	ee bb       	out	0x1e, r30	; 30
    1c56:	e0 9a       	sbi	0x1c, 0	; 28
    1c58:	31 96       	adiw	r30, 0x01	; 1
    1c5a:	0d b2       	in	r0, 0x1d	; 29
    1c5c:	0d 92       	st	X+, r0
    1c5e:	41 50       	subi	r20, 0x01	; 1
    1c60:	50 40       	sbci	r21, 0x00	; 0
    1c62:	b8 f7       	brcc	.-18     	; 0x1c52 <eeprom_read_blraw+0x8>
    1c64:	08 95       	ret

00001c66 <_exit>:
    1c66:	f8 94       	cli

00001c68 <__stop_program>:
    1c68:	ff cf       	rjmp	.-2      	; 0x1c68 <__stop_program>
