
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800100  00001d2a  00001dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013f  0080024a  0080024a  00001f08  2**0
                  ALLOC
  3 .stab         00004ff8  00000000  00000000  00001f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c8b  00000000  00000000  00006f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008b8b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008b9c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__vector_8>
      24:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_9>
      28:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__vector_10>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__vector_18>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	9a 09       	sbc	r25, r10
      8e:	71 09       	sbc	r23, r1
      90:	71 09       	sbc	r23, r1
      92:	71 09       	sbc	r23, r1
      94:	71 09       	sbc	r23, r1
      96:	71 09       	sbc	r23, r1
      98:	71 09       	sbc	r23, r1
      9a:	71 09       	sbc	r23, r1
      9c:	9a 09       	sbc	r25, r10
      9e:	71 09       	sbc	r23, r1
      a0:	71 09       	sbc	r23, r1
      a2:	71 09       	sbc	r23, r1
      a4:	71 09       	sbc	r23, r1
      a6:	71 09       	sbc	r23, r1
      a8:	71 09       	sbc	r23, r1
      aa:	71 09       	sbc	r23, r1
      ac:	a4 09       	sbc	r26, r4
      ae:	71 09       	sbc	r23, r1
      b0:	71 09       	sbc	r23, r1
      b2:	71 09       	sbc	r23, r1
      b4:	71 09       	sbc	r23, r1
      b6:	71 09       	sbc	r23, r1
      b8:	71 09       	sbc	r23, r1
      ba:	71 09       	sbc	r23, r1
      bc:	71 09       	sbc	r23, r1
      be:	71 09       	sbc	r23, r1
      c0:	71 09       	sbc	r23, r1
      c2:	71 09       	sbc	r23, r1
      c4:	71 09       	sbc	r23, r1
      c6:	71 09       	sbc	r23, r1
      c8:	71 09       	sbc	r23, r1
      ca:	71 09       	sbc	r23, r1
      cc:	a4 09       	sbc	r26, r4
      ce:	71 09       	sbc	r23, r1
      d0:	71 09       	sbc	r23, r1
      d2:	71 09       	sbc	r23, r1
      d4:	71 09       	sbc	r23, r1
      d6:	71 09       	sbc	r23, r1
      d8:	71 09       	sbc	r23, r1
      da:	71 09       	sbc	r23, r1
      dc:	71 09       	sbc	r23, r1
      de:	71 09       	sbc	r23, r1
      e0:	71 09       	sbc	r23, r1
      e2:	71 09       	sbc	r23, r1
      e4:	71 09       	sbc	r23, r1
      e6:	71 09       	sbc	r23, r1
      e8:	71 09       	sbc	r23, r1
      ea:	71 09       	sbc	r23, r1
      ec:	bb 09       	sbc	r27, r11
      ee:	71 09       	sbc	r23, r1
      f0:	71 09       	sbc	r23, r1
      f2:	71 09       	sbc	r23, r1
      f4:	71 09       	sbc	r23, r1
      f6:	71 09       	sbc	r23, r1
      f8:	71 09       	sbc	r23, r1
      fa:	71 09       	sbc	r23, r1
      fc:	bf 09       	sbc	r27, r15
      fe:	71 09       	sbc	r23, r1
     100:	71 09       	sbc	r23, r1
     102:	71 09       	sbc	r23, r1
     104:	71 09       	sbc	r23, r1
     106:	71 09       	sbc	r23, r1
     108:	71 09       	sbc	r23, r1
     10a:	71 09       	sbc	r23, r1
     10c:	71 09       	sbc	r23, r1
     10e:	71 09       	sbc	r23, r1
     110:	71 09       	sbc	r23, r1
     112:	71 09       	sbc	r23, r1
     114:	71 09       	sbc	r23, r1
     116:	71 09       	sbc	r23, r1
     118:	71 09       	sbc	r23, r1
     11a:	71 09       	sbc	r23, r1
     11c:	cd 09       	sbc	r28, r13
     11e:	71 09       	sbc	r23, r1
     120:	71 09       	sbc	r23, r1
     122:	71 09       	sbc	r23, r1
     124:	71 09       	sbc	r23, r1
     126:	71 09       	sbc	r23, r1
     128:	71 09       	sbc	r23, r1
     12a:	71 09       	sbc	r23, r1
     12c:	8b 09       	sbc	r24, r11

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	ea e2       	ldi	r30, 0x2A	; 42
     142:	fd e1       	ldi	r31, 0x1D	; 29
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	aa 34       	cpi	r26, 0x4A	; 74
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e0       	ldi	r18, 0x03	; 3
     156:	aa e4       	ldi	r26, 0x4A	; 74
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a9 38       	cpi	r26, 0x89	; 137
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <main>
     168:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <spi_init>:

//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(){
  DDRB   = 0xF7; //output mode for SS, MOSI, SCLK & Pins 4-7 (7Seg & Bar Graph)
     170:	87 ef       	ldi	r24, 0xF7	; 247
     172:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); // Enable SPI, master mode, clk low on idle, leading edge sample
     174:	80 e5       	ldi	r24, 0x50	; 80
     176:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (0<<SPI2X); //No double speed operation
     178:	1e b8       	out	0x0e, r1	; 14
     17a:	08 95       	ret

0000017c <init_tcnt0>:
// Triggers a 1 sec TOV Interrupt.
//
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
     17c:	80 b7       	in	r24, 0x30	; 48
     17e:	88 60       	ori	r24, 0x08	; 8
     180:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE0);  //TimerOverflow Interrupt Enable
     182:	87 b7       	in	r24, 0x37	; 55
     184:	81 60       	ori	r24, 0x01	; 1
     186:	87 bf       	out	0x37, r24	; 55
  TCCR0 =  (1<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode, 128 prescale, OC0 Disconnected
     188:	85 e0       	ldi	r24, 0x05	; 5
     18a:	83 bf       	out	0x33, r24	; 51
     18c:	08 95       	ret

0000018e <init_tcnt1>:
//
// setup TCNT1 in pwm mode
// set OC1A (PB5) as pwm output
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);
     18e:	8f b5       	in	r24, 0x2f	; 47
     190:	82 60       	ori	r24, 0x02	; 2
     192:	8f bd       	out	0x2f, r24	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10);
     194:	8e b5       	in	r24, 0x2e	; 46
     196:	89 61       	ori	r24, 0x19	; 25
     198:	8e bd       	out	0x2e, r24	; 46
	//no forced compare
	TCCR1C = 0x00;
     19a:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 ec       	ldi	r25, 0xC0	; 192
     1a2:	9b bd       	out	0x2b, r25	; 43
     1a4:	8a bd       	out	0x2a, r24	; 42
	ICR1  = 0xF000; //clear at 0xF000
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 ef       	ldi	r25, 0xF0	; 240
     1aa:	97 bd       	out	0x27, r25	; 39
     1ac:	86 bd       	out	0x26, r24	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
     1ae:	87 b7       	in	r24, 0x37	; 55
     1b0:	80 61       	ori	r24, 0x10	; 16
     1b2:	87 bf       	out	0x37, r24	; 55
     1b4:	08 95       	ret

000001b6 <init_tcnt2>:
//**********************************************************************
void init_tcnt2(){
// 7-Seg Brigtness PWM

  //enable interrupts for Timer/Counter2 overflow
  TIMSK |= (1<<TOIE2) | (0<<OCIE2);  //TimerOverflow Interrupt Enable
     1b6:	87 b7       	in	r24, 0x37	; 55
     1b8:	80 64       	ori	r24, 0x40	; 64
     1ba:	87 bf       	out	0x37, r24	; 55
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (1<<CS21) | (1<<CS20);
     1bc:	8b e7       	ldi	r24, 0x7B	; 123
     1be:	85 bd       	out	0x25, r24	; 37
	//Fast-PWM mode, Inverting PWM Mode, 64 prescale, OC2(PB7)(PWM) Connected
	//0-256 takes 1ms (16k CLKIO cycles)
  OCR2 =  0xF0;                   //compare at 128(50%)
     1c0:	80 ef       	ldi	r24, 0xF0	; 240
     1c2:	83 bd       	out	0x23, r24	; 35
     1c4:	08 95       	ret

000001c6 <init_tcnt3>:
//                            timer/counter3_init
//**********************************************************************
void init_tcnt3(){
// Volume PWM
// setup TCNT3 in pwm mode
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0) | (0<<WGM31) | (1<<WGM30);
     1c6:	eb e8       	ldi	r30, 0x8B	; 139
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	81 68       	ori	r24, 0x81	; 129
     1ce:	80 83       	st	Z, r24
	// Fast PWM, 8-Bit mode top 0x00FF
	// Clear OC3A on compare match, Fast PWM (non-inverting)
	//use ICR1 as source for TOP, use clk/1
	TCCR3B |= (0<<WGM33) | (1<< WGM32) | (1<<CS30);
     1d0:	ea e8       	ldi	r30, 0x8A	; 138
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	89 60       	ori	r24, 0x09	; 9
     1d8:	80 83       	st	Z, r24
	// No prescaling
	//no forced compare
	TCCR3C = 0x00;
     1da:	10 92 8c 00 	sts	0x008C, r1
	//20% duty cycle, LED is a bit dimmer
	OCR3A = 0x00CD; // Initally at 50% Duty Cycle
     1de:	8d ec       	ldi	r24, 0xCD	; 205
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	90 93 87 00 	sts	0x0087, r25
     1e6:	80 93 86 00 	sts	0x0086, r24
     1ea:	08 95       	ret

000001ec <init_DDRs>:
//                            timer/counter0_init
//**********************************************************************
void init_DDRs(){
// Add HERE
	// Set the DDR for Ports
	DDRA = DDRA_OUTPUT; // 7-Seg Data out
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	8a bb       	out	0x1a, r24	; 26
	DDRE = (1<<PE3) | (1<<PE5) | (1<<PE6) | (1<<PE7);
     1f0:	88 ee       	ldi	r24, 0xE8	; 232
     1f2:	82 b9       	out	0x02, r24	; 2
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
     1f4:	84 e0       	ldi	r24, 0x04	; 4
     1f6:	81 bb       	out	0x11, r24	; 17
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	84 bb       	out	0x14, r24	; 20
	incdec_mode = 0x01;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 4f 02 	sts	0x024F, r24
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
     202:	85 e5       	ldi	r24, 0x55	; 85
     204:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
     206:	77 9b       	sbis	0x0e, 7	; 14
     208:	fe cf       	rjmp	.-4      	; 0x206 <init_DDRs+0x1a>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
     20a:	8f b1       	in	r24, 0x0f	; 15
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
	incdec_mode = 0x01;
	// Read the starting encoder positions
	old_encoder = spi_rw8(0x55);
     20c:	80 93 4c 02 	sts	0x024C, r24
     210:	08 95       	ret

00000212 <init_ADC>:
//                            init_adc
//**********************************************************************
void init_ADC(){
// ADC used to read brightness levels using a photoresistor
	//Initalize ADC and its ports
	DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input
     212:	e1 e6       	ldi	r30, 0x61	; 97
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	8f 77       	andi	r24, 0x7F	; 127
     21a:	80 83       	st	Z, r24
	PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
     21c:	e2 e6       	ldi	r30, 0x62	; 98
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	8f 77       	andi	r24, 0x7F	; 127
     224:	80 83       	st	Z, r24

	ADMUX = (1<<ADLAR) | (1<<REFS0) | (1<<MUX0) | (1<<MUX1) | (1<<MUX2);
     226:	87 e6       	ldi	r24, 0x67	; 103
     228:	87 b9       	out	0x07, r24	; 7
	//ADMUX = (1<<MUX0) | (1<<MUX1) | (1<<MUX2)
	//single-ended, input PORTF bit 7, right adjusted, 10 bits

	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     22a:	87 e8       	ldi	r24, 0x87	; 135
     22c:	86 b9       	out	0x06, r24	; 6
     22e:	08 95       	ret

00000230 <disable_tcnt1>:
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
     230:	88 e1       	ldi	r24, 0x18	; 24
     232:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
     234:	87 b7       	in	r24, 0x37	; 55
     236:	8f 7e       	andi	r24, 0xEF	; 239
     238:	87 bf       	out	0x37, r24	; 55
     23a:	08 95       	ret

0000023c <disable_timer2>:
// Add HERE
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  //enable interrupts for output compare match 0
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (0<<CS21) | (0<<CS20);
     23c:	88 e7       	ldi	r24, 0x78	; 120
     23e:	85 bd       	out	0x25, r24	; 37
     240:	08 95       	ret

00000242 <spi_rw8>:
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
     242:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
     244:	77 9b       	sbis	0x0e, 7	; 14
     246:	fe cf       	rjmp	.-4      	; 0x244 <spi_rw8+0x2>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
     248:	8f b1       	in	r24, 0x0f	; 15
	return(data);
}
     24a:	08 95       	ret

0000024c <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
     24c:	48 2f       	mov	r20, r24
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     24e:	e8 2f       	mov	r30, r24
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	99 b3       	in	r25, 0x19	; 25
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	ef 5a       	subi	r30, 0xAF	; 175
     25a:	fd 4f       	sbci	r31, 0xFD	; 253
     25c:	20 81       	ld	r18, Z
     25e:	31 81       	ldd	r19, Z+1	; 0x01
     260:	22 0f       	add	r18, r18
     262:	33 1f       	adc	r19, r19
     264:	30 6e       	ori	r19, 0xE0	; 224
     266:	89 2f       	mov	r24, r25
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <chk_buttons+0x24>
     26c:	95 95       	asr	r25
     26e:	87 95       	ror	r24
     270:	4a 95       	dec	r20
     272:	e2 f7       	brpl	.-8      	; 0x26c <chk_buttons+0x20>
     274:	81 70       	andi	r24, 0x01	; 1
     276:	99 27       	eor	r25, r25
     278:	28 2b       	or	r18, r24
     27a:	39 2b       	or	r19, r25
     27c:	31 83       	std	Z+1, r19	; 0x01
     27e:	20 83       	st	Z, r18
        if(state[button] == 0xF000) return 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	21 15       	cp	r18, r1
     284:	30 4f       	sbci	r19, 0xF0	; 240
     286:	09 f0       	breq	.+2      	; 0x28a <chk_buttons+0x3e>
     288:	80 e0       	ldi	r24, 0x00	; 0
        return 0;

//******************************************************************************
}
     28a:	08 95       	ret

0000028c <volume_up>:


//***********************************************************************
//                            volume_up
//**********************************************************************
void volume_up(){
     28c:	08 95       	ret

0000028e <volume_down>:


//***********************************************************************
//                            volume_down
//**********************************************************************
void volume_down(){
     28e:	08 95       	ret

00000290 <segsum>:
        //if(sum >= 1)(no_digits = 1);
        //if(sum >= 10)(no_digits = 2);
        //if(sum >= 100)(no_digits = 3);
        //if(sum >= 1000)(no_digits = 4);

	switch(xmode){
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	09 f4       	brne	.+2      	; 0x296 <segsum+0x6>
     294:	4e c0       	rjmp	.+156    	; 0x332 <segsum+0xa2>
     296:	08 f4       	brcc	.+2      	; 0x29a <segsum+0xa>
     298:	ac c0       	rjmp	.+344    	; 0x3f2 <segsum+0x162>
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	19 f0       	breq	.+6      	; 0x2a4 <segsum+0x14>
     29e:	83 30       	cpi	r24, 0x03	; 3
     2a0:	c1 f1       	breq	.+112    	; 0x312 <segsum+0x82>
     2a2:	08 95       	ret
			// Alarm armed bit into same position as L3 on 7Seg
			segment_data[3] = dec_to_7seg[((alarm_hours)/1) %10];
			segment_data[4] = dec_to_7seg[((alarm_hours)/10) %10];
			break;
		case Clock_set_mode:
			if((seconds % 2) == 1){
     2a4:	80 91 04 01 	lds	r24, 0x0104
     2a8:	80 ff       	sbrs	r24, 0
     2aa:	37 c0       	rjmp	.+110    	; 0x31a <segsum+0x8a>
				segment_data[0] = dec_to_7seg[(mins/1) %10];
     2ac:	e0 91 05 01 	lds	r30, 0x0105
     2b0:	8d ec       	ldi	r24, 0xCD	; 205
     2b2:	e8 9f       	mul	r30, r24
     2b4:	91 2d       	mov	r25, r1
     2b6:	11 24       	eor	r1, r1
     2b8:	96 95       	lsr	r25
     2ba:	96 95       	lsr	r25
     2bc:	96 95       	lsr	r25
     2be:	2a e0       	ldi	r18, 0x0A	; 10
     2c0:	92 9f       	mul	r25, r18
     2c2:	e0 19       	sub	r30, r0
     2c4:	11 24       	eor	r1, r1
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	ef 5b       	subi	r30, 0xBF	; 191
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	90 81       	ld	r25, Z
     2ce:	90 93 9a 02 	sts	0x029A, r25
				segment_data[1] = dec_to_7seg[(mins/10) %10];
     2d2:	e0 91 05 01 	lds	r30, 0x0105
     2d6:	e8 9f       	mul	r30, r24
     2d8:	e1 2d       	mov	r30, r1
     2da:	11 24       	eor	r1, r1
     2dc:	e6 95       	lsr	r30
     2de:	e6 95       	lsr	r30
     2e0:	e6 95       	lsr	r30
     2e2:	e8 9f       	mul	r30, r24
     2e4:	91 2d       	mov	r25, r1
     2e6:	11 24       	eor	r1, r1
     2e8:	96 95       	lsr	r25
     2ea:	96 95       	lsr	r25
     2ec:	96 95       	lsr	r25
     2ee:	2a e0       	ldi	r18, 0x0A	; 10
     2f0:	92 9f       	mul	r25, r18
     2f2:	e0 19       	sub	r30, r0
     2f4:	11 24       	eor	r1, r1
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	ef 5b       	subi	r30, 0xBF	; 191
     2fa:	fe 4f       	sbci	r31, 0xFE	; 254
     2fc:	90 81       	ld	r25, Z
     2fe:	90 93 9b 02 	sts	0x029B, r25
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
     302:	90 91 07 01 	lds	r25, 0x0107
     306:	99 0f       	add	r25, r25
     308:	99 0f       	add	r25, r25
     30a:	90 95       	com	r25
     30c:	20 91 4c 01 	lds	r18, 0x014C
     310:	a9 c0       	rjmp	.+338    	; 0x464 <segsum+0x1d4>
				segment_data[3] = SEG_OFF;
				segment_data[4] = SEG_OFF;
			break;
			}
		case Alarm_set_mode:
			if((seconds % 2) == 1){
     312:	80 91 04 01 	lds	r24, 0x0104
     316:	80 fd       	sbrc	r24, 0
     318:	0c c0       	rjmp	.+24     	; 0x332 <segsum+0xa2>
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((hours)/1) %10];
				segment_data[4] = dec_to_7seg[((hours)/10) %10];
				break;
			}else{
				segment_data[0] = SEG_OFF;
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	80 93 9a 02 	sts	0x029A, r24
				segment_data[1] = SEG_OFF;
     320:	80 93 9b 02 	sts	0x029B, r24
				segment_data[2] = SEG_OFF;
     324:	80 93 9c 02 	sts	0x029C, r24
				segment_data[3] = SEG_OFF;
     328:	80 93 9d 02 	sts	0x029D, r24
				segment_data[4] = SEG_OFF;
     32c:	80 93 9e 02 	sts	0x029E, r24
			break;
     330:	08 95       	ret
			}
		case Alarm_set_mode:
			if((seconds % 2) == 1){
				segment_data[0] = dec_to_7seg[(alarm_mins/1) %10];
     332:	e0 91 02 01 	lds	r30, 0x0102
     336:	8d ec       	ldi	r24, 0xCD	; 205
     338:	e8 9f       	mul	r30, r24
     33a:	91 2d       	mov	r25, r1
     33c:	11 24       	eor	r1, r1
     33e:	96 95       	lsr	r25
     340:	96 95       	lsr	r25
     342:	96 95       	lsr	r25
     344:	2a e0       	ldi	r18, 0x0A	; 10
     346:	92 9f       	mul	r25, r18
     348:	e0 19       	sub	r30, r0
     34a:	11 24       	eor	r1, r1
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	ef 5b       	subi	r30, 0xBF	; 191
     350:	fe 4f       	sbci	r31, 0xFE	; 254
     352:	90 81       	ld	r25, Z
     354:	90 93 9a 02 	sts	0x029A, r25
				segment_data[1] = dec_to_7seg[(alarm_mins/10) %10];
     358:	e0 91 02 01 	lds	r30, 0x0102
     35c:	e8 9f       	mul	r30, r24
     35e:	e1 2d       	mov	r30, r1
     360:	11 24       	eor	r1, r1
     362:	e6 95       	lsr	r30
     364:	e6 95       	lsr	r30
     366:	e6 95       	lsr	r30
     368:	e8 9f       	mul	r30, r24
     36a:	91 2d       	mov	r25, r1
     36c:	11 24       	eor	r1, r1
     36e:	96 95       	lsr	r25
     370:	96 95       	lsr	r25
     372:	96 95       	lsr	r25
     374:	2a e0       	ldi	r18, 0x0A	; 10
     376:	92 9f       	mul	r25, r18
     378:	e0 19       	sub	r30, r0
     37a:	11 24       	eor	r1, r1
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	ef 5b       	subi	r30, 0xBF	; 191
     380:	fe 4f       	sbci	r31, 0xFE	; 254
     382:	90 81       	ld	r25, Z
     384:	90 93 9b 02 	sts	0x029B, r25
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
     388:	90 91 07 01 	lds	r25, 0x0107
     38c:	99 0f       	add	r25, r25
     38e:	99 0f       	add	r25, r25
     390:	90 95       	com	r25
     392:	20 91 4c 01 	lds	r18, 0x014C
     396:	92 23       	and	r25, r18
     398:	90 93 9c 02 	sts	0x029C, r25
				//in dec_to_7seg index 11 = OFF, index 12 = Colon
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((alarm_hours)/1) %10];
     39c:	e0 91 03 01 	lds	r30, 0x0103
     3a0:	e8 9f       	mul	r30, r24
     3a2:	91 2d       	mov	r25, r1
     3a4:	11 24       	eor	r1, r1
     3a6:	96 95       	lsr	r25
     3a8:	96 95       	lsr	r25
     3aa:	96 95       	lsr	r25
     3ac:	2a e0       	ldi	r18, 0x0A	; 10
     3ae:	92 9f       	mul	r25, r18
     3b0:	e0 19       	sub	r30, r0
     3b2:	11 24       	eor	r1, r1
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	ef 5b       	subi	r30, 0xBF	; 191
     3b8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ba:	90 81       	ld	r25, Z
     3bc:	90 93 9d 02 	sts	0x029D, r25
				segment_data[4] = dec_to_7seg[((alarm_hours)/10) %10];
     3c0:	e0 91 03 01 	lds	r30, 0x0103
     3c4:	e8 9f       	mul	r30, r24
     3c6:	e1 2d       	mov	r30, r1
     3c8:	11 24       	eor	r1, r1
     3ca:	e6 95       	lsr	r30
     3cc:	e6 95       	lsr	r30
     3ce:	e6 95       	lsr	r30
     3d0:	e8 9f       	mul	r30, r24
     3d2:	81 2d       	mov	r24, r1
     3d4:	11 24       	eor	r1, r1
     3d6:	86 95       	lsr	r24
     3d8:	86 95       	lsr	r24
     3da:	86 95       	lsr	r24
     3dc:	9a e0       	ldi	r25, 0x0A	; 10
     3de:	89 9f       	mul	r24, r25
     3e0:	e0 19       	sub	r30, r0
     3e2:	11 24       	eor	r1, r1
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	ef 5b       	subi	r30, 0xBF	; 191
     3e8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ea:	80 81       	ld	r24, Z
     3ec:	80 93 9e 02 	sts	0x029E, r24
     3f0:	08 95       	ret

	switch(xmode){
		case Clock_mode:
		  	//break up decimal sum into 4 digit-segment
			//The digits (0-9) are used as the index for the seven segment representation
			segment_data[0] = dec_to_7seg[(mins/1) %10];
     3f2:	e0 91 05 01 	lds	r30, 0x0105
     3f6:	8d ec       	ldi	r24, 0xCD	; 205
     3f8:	e8 9f       	mul	r30, r24
     3fa:	91 2d       	mov	r25, r1
     3fc:	11 24       	eor	r1, r1
     3fe:	96 95       	lsr	r25
     400:	96 95       	lsr	r25
     402:	96 95       	lsr	r25
     404:	2a e0       	ldi	r18, 0x0A	; 10
     406:	92 9f       	mul	r25, r18
     408:	e0 19       	sub	r30, r0
     40a:	11 24       	eor	r1, r1
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	ef 5b       	subi	r30, 0xBF	; 191
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	90 81       	ld	r25, Z
     414:	90 93 9a 02 	sts	0x029A, r25
			segment_data[1] = dec_to_7seg[(mins/10) %10];
     418:	e0 91 05 01 	lds	r30, 0x0105
     41c:	e8 9f       	mul	r30, r24
     41e:	e1 2d       	mov	r30, r1
     420:	11 24       	eor	r1, r1
     422:	e6 95       	lsr	r30
     424:	e6 95       	lsr	r30
     426:	e6 95       	lsr	r30
     428:	e8 9f       	mul	r30, r24
     42a:	91 2d       	mov	r25, r1
     42c:	11 24       	eor	r1, r1
     42e:	96 95       	lsr	r25
     430:	96 95       	lsr	r25
     432:	96 95       	lsr	r25
     434:	2a e0       	ldi	r18, 0x0A	; 10
     436:	92 9f       	mul	r25, r18
     438:	e0 19       	sub	r30, r0
     43a:	11 24       	eor	r1, r1
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	ef 5b       	subi	r30, 0xBF	; 191
     440:	fe 4f       	sbci	r31, 0xFE	; 254
     442:	90 81       	ld	r25, Z
     444:	90 93 9b 02 	sts	0x029B, r25
			if((xmode == Clock_mode)){
				segment_data[2] = dec_to_7seg[10 + (seconds % 2)] & (~(alarm_armed<<2));
     448:	40 91 04 01 	lds	r20, 0x0104
     44c:	90 91 07 01 	lds	r25, 0x0107
     450:	24 2f       	mov	r18, r20
     452:	21 70       	andi	r18, 0x01	; 1
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	f9 01       	movw	r30, r18
     458:	ef 5b       	subi	r30, 0xBF	; 191
     45a:	fe 4f       	sbci	r31, 0xFE	; 254
     45c:	99 0f       	add	r25, r25
     45e:	99 0f       	add	r25, r25
     460:	90 95       	com	r25
     462:	22 85       	ldd	r18, Z+10	; 0x0a
			break;
		case Clock_set_mode:
			if((seconds % 2) == 1){
				segment_data[0] = dec_to_7seg[(mins/1) %10];
				segment_data[1] = dec_to_7seg[(mins/10) %10];
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
     464:	92 23       	and	r25, r18
     466:	90 93 9c 02 	sts	0x029C, r25
				//in dec_to_7seg index 11 = OFF, index 12 = Colon
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((hours)/1) %10];
     46a:	e0 91 06 01 	lds	r30, 0x0106
     46e:	e8 9f       	mul	r30, r24
     470:	91 2d       	mov	r25, r1
     472:	11 24       	eor	r1, r1
     474:	96 95       	lsr	r25
     476:	96 95       	lsr	r25
     478:	96 95       	lsr	r25
     47a:	2a e0       	ldi	r18, 0x0A	; 10
     47c:	92 9f       	mul	r25, r18
     47e:	e0 19       	sub	r30, r0
     480:	11 24       	eor	r1, r1
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	ef 5b       	subi	r30, 0xBF	; 191
     486:	fe 4f       	sbci	r31, 0xFE	; 254
     488:	90 81       	ld	r25, Z
     48a:	90 93 9d 02 	sts	0x029D, r25
				segment_data[4] = dec_to_7seg[((hours)/10) %10];
     48e:	e0 91 06 01 	lds	r30, 0x0106
     492:	98 cf       	rjmp	.-208    	; 0x3c4 <segsum+0x134>

00000494 <encoders>:
	// The direction is determined by a state machine look up table 0=no change
	// 1=CCW, 2=CW
	//The old encoder value is place in posistion in b2 b3, 0x03 masks out other 1's

	uint8_t direction = 0;
	switch(clockmode){
     494:	80 91 4e 02 	lds	r24, 0x024E
     498:	82 30       	cpi	r24, 0x02	; 2
     49a:	09 f4       	brne	.+2      	; 0x49e <encoders+0xa>
     49c:	88 c0       	rjmp	.+272    	; 0x5ae <encoders+0x11a>
     49e:	83 30       	cpi	r24, 0x03	; 3
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <encoders+0x10>
     4a2:	4a c0       	rjmp	.+148    	; 0x538 <encoders+0xa4>
     4a4:	88 23       	and	r24, r24
     4a6:	29 f0       	breq	.+10     	; 0x4b2 <encoders+0x1e>
			break;
		default:
			break;
	}
	//Replace the old encoder value
	old_encoder = encoder;
     4a8:	80 91 4d 02 	lds	r24, 0x024D
     4ac:	80 93 4c 02 	sts	0x024C, r24
     4b0:	08 95       	ret
	uint8_t direction = 0;
	switch(clockmode){
		case Clock_mode:
					// Do Nothing
					//Check encoder 1
					direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
     4b2:	e0 91 4c 02 	lds	r30, 0x024C
     4b6:	80 91 4d 02 	lds	r24, 0x024D
     4ba:	e3 70       	andi	r30, 0x03	; 3
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	ee 0f       	add	r30, r30
     4c0:	ff 1f       	adc	r31, r31
     4c2:	ee 0f       	add	r30, r30
     4c4:	ff 1f       	adc	r31, r31
     4c6:	83 70       	andi	r24, 0x03	; 3
     4c8:	e8 2b       	or	r30, r24
     4ca:	e8 5d       	subi	r30, 0xD8	; 216
     4cc:	fe 4f       	sbci	r31, 0xFE	; 254
					switch(direction){
     4ce:	80 81       	ld	r24, Z
     4d0:	81 30       	cpi	r24, 0x01	; 1
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <encoders+0x42>
     4d4:	a0 c0       	rjmp	.+320    	; 0x616 <encoders+0x182>
     4d6:	82 30       	cpi	r24, 0x02	; 2
     4d8:	81 f4       	brne	.+32     	; 0x4fa <encoders+0x66>
								current_fm_freq = 10790;
								fm_tune_freq();
							}
							break;
						case 2:
							if(current_fm_freq < 10790){
     4da:	80 91 94 02 	lds	r24, 0x0294
     4de:	90 91 95 02 	lds	r25, 0x0295
     4e2:	86 32       	cpi	r24, 0x26	; 38
     4e4:	2a e2       	ldi	r18, 0x2A	; 42
     4e6:	92 07       	cpc	r25, r18
     4e8:	08 f0       	brcs	.+2      	; 0x4ec <encoders+0x58>
     4ea:	d5 c0       	rjmp	.+426    	; 0x696 <encoders+0x202>
								current_fm_freq = current_fm_freq + 20;
     4ec:	44 96       	adiw	r24, 0x14	; 20
     4ee:	90 93 95 02 	sts	0x0295, r25
     4f2:	80 93 94 02 	sts	0x0294, r24
								fm_tune_freq();
     4f6:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fm_tune_freq>
					break;
			}


			//Check encoder 2
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
     4fa:	80 91 4c 02 	lds	r24, 0x024C
     4fe:	e0 91 4d 02 	lds	r30, 0x024D
     502:	ec 70       	andi	r30, 0x0C	; 12
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	f5 95       	asr	r31
     508:	e7 95       	ror	r30
     50a:	f5 95       	asr	r31
     50c:	e7 95       	ror	r30
     50e:	8c 70       	andi	r24, 0x0C	; 12
     510:	e8 2b       	or	r30, r24
     512:	e8 5d       	subi	r30, 0xD8	; 216
     514:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     516:	80 81       	ld	r24, Z
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	09 f4       	brne	.+2      	; 0x51e <encoders+0x8a>
     51c:	8c c0       	rjmp	.+280    	; 0x636 <encoders+0x1a2>
     51e:	82 30       	cpi	r24, 0x02	; 2
     520:	19 f6       	brne	.-122    	; 0x4a8 <encoders+0x14>
					}else{
						hours = 23;
					}
					break;
				case 2:
					if(hours < 23){
     522:	80 91 06 01 	lds	r24, 0x0106
     526:	87 31       	cpi	r24, 0x17	; 23
     528:	08 f0       	brcs	.+2      	; 0x52c <encoders+0x98>
     52a:	8f c0       	rjmp	.+286    	; 0x64a <encoders+0x1b6>
						hours = hours + 1;
     52c:	80 91 06 01 	lds	r24, 0x0106
     530:	8f 5f       	subi	r24, 0xFF	; 255
     532:	80 93 06 01 	sts	0x0106, r24
     536:	b8 cf       	rjmp	.-144    	; 0x4a8 <encoders+0x14>
					break;
			}
			break;
		case Alarm_set_mode:
			//Check encoder 1
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
     538:	e0 91 4c 02 	lds	r30, 0x024C
     53c:	80 91 4d 02 	lds	r24, 0x024D
     540:	e3 70       	andi	r30, 0x03	; 3
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	ee 0f       	add	r30, r30
     546:	ff 1f       	adc	r31, r31
     548:	ee 0f       	add	r30, r30
     54a:	ff 1f       	adc	r31, r31
     54c:	83 70       	andi	r24, 0x03	; 3
     54e:	e8 2b       	or	r30, r24
     550:	e8 5d       	subi	r30, 0xD8	; 216
     552:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     554:	80 81       	ld	r24, Z
     556:	81 30       	cpi	r24, 0x01	; 1
     558:	09 f4       	brne	.+2      	; 0x55c <encoders+0xc8>
     55a:	53 c0       	rjmp	.+166    	; 0x602 <encoders+0x16e>
     55c:	82 30       	cpi	r24, 0x02	; 2
     55e:	51 f4       	brne	.+20     	; 0x574 <encoders+0xe0>
					}else{
						alarm_mins = 59;
					}
					break;
				case 2:
					if(alarm_mins < 59){
     560:	80 91 02 01 	lds	r24, 0x0102
     564:	8b 33       	cpi	r24, 0x3B	; 59
     566:	08 f0       	brcs	.+2      	; 0x56a <encoders+0xd6>
     568:	9f c0       	rjmp	.+318    	; 0x6a8 <encoders+0x214>
						alarm_mins = alarm_mins + 1;
     56a:	80 91 02 01 	lds	r24, 0x0102
     56e:	8f 5f       	subi	r24, 0xFF	; 255
     570:	80 93 02 01 	sts	0x0102, r24
				default:
					break;
			}

			//Check encoder 2
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
     574:	80 91 4c 02 	lds	r24, 0x024C
     578:	e0 91 4d 02 	lds	r30, 0x024D
     57c:	ec 70       	andi	r30, 0x0C	; 12
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	f5 95       	asr	r31
     582:	e7 95       	ror	r30
     584:	f5 95       	asr	r31
     586:	e7 95       	ror	r30
     588:	8c 70       	andi	r24, 0x0C	; 12
     58a:	e8 2b       	or	r30, r24
     58c:	e8 5d       	subi	r30, 0xD8	; 216
     58e:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     590:	80 81       	ld	r24, Z
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	09 f4       	brne	.+2      	; 0x598 <encoders+0x104>
     596:	60 c0       	rjmp	.+192    	; 0x658 <encoders+0x1c4>
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	09 f0       	breq	.+2      	; 0x59e <encoders+0x10a>
     59c:	85 cf       	rjmp	.-246    	; 0x4a8 <encoders+0x14>
					}else{
						alarm_hours = 23;
					}
					break;
				case 2:
					if(alarm_hours < 23){
     59e:	80 91 03 01 	lds	r24, 0x0103
     5a2:	87 31       	cpi	r24, 0x17	; 23
     5a4:	08 f4       	brcc	.+2      	; 0x5a8 <encoders+0x114>
     5a6:	86 c0       	rjmp	.+268    	; 0x6b4 <encoders+0x220>
						alarm_hours = alarm_hours + 1;
					}else{
						alarm_hours = 0;
     5a8:	10 92 03 01 	sts	0x0103, r1
     5ac:	7d cf       	rjmp	.-262    	; 0x4a8 <encoders+0x14>
		case Alarm_mode:
			// Do Nothing
			break;
		case Clock_set_mode:
			//Check encoder 1
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
     5ae:	e0 91 4c 02 	lds	r30, 0x024C
     5b2:	80 91 4d 02 	lds	r24, 0x024D
     5b6:	e3 70       	andi	r30, 0x03	; 3
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	83 70       	andi	r24, 0x03	; 3
     5c4:	e8 2b       	or	r30, r24
     5c6:	e8 5d       	subi	r30, 0xD8	; 216
     5c8:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     5ca:	80 81       	ld	r24, Z
     5cc:	81 30       	cpi	r24, 0x01	; 1
     5ce:	71 f0       	breq	.+28     	; 0x5ec <encoders+0x158>
     5d0:	82 30       	cpi	r24, 0x02	; 2
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <encoders+0x142>
     5d4:	92 cf       	rjmp	.-220    	; 0x4fa <encoders+0x66>
					}else{
						mins = 59;
					}
					break;
				case 2:
					if(mins < 59){
     5d6:	80 91 05 01 	lds	r24, 0x0105
     5da:	8b 33       	cpi	r24, 0x3B	; 59
     5dc:	08 f0       	brcs	.+2      	; 0x5e0 <encoders+0x14c>
     5de:	67 c0       	rjmp	.+206    	; 0x6ae <encoders+0x21a>
						mins = mins + 1;
     5e0:	80 91 05 01 	lds	r24, 0x0105
     5e4:	8f 5f       	subi	r24, 0xFF	; 255
     5e6:	80 93 05 01 	sts	0x0105, r24
     5ea:	87 cf       	rjmp	.-242    	; 0x4fa <encoders+0x66>
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(mins > 0){
     5ec:	80 91 05 01 	lds	r24, 0x0105
     5f0:	88 23       	and	r24, r24
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <encoders+0x162>
     5f4:	4c c0       	rjmp	.+152    	; 0x68e <encoders+0x1fa>
						mins = mins - 1;
     5f6:	80 91 05 01 	lds	r24, 0x0105
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	80 93 05 01 	sts	0x0105, r24
     600:	7c cf       	rjmp	.-264    	; 0x4fa <encoders+0x66>
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(alarm_mins > 0){
     602:	80 91 02 01 	lds	r24, 0x0102
     606:	88 23       	and	r24, r24
     608:	f1 f1       	breq	.+124    	; 0x686 <encoders+0x1f2>
						alarm_mins = alarm_mins - 1;
     60a:	80 91 02 01 	lds	r24, 0x0102
     60e:	81 50       	subi	r24, 0x01	; 1
     610:	80 93 02 01 	sts	0x0102, r24
     614:	af cf       	rjmp	.-162    	; 0x574 <encoders+0xe0>
					direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
					switch(direction){
						case 0:
							break;
						case 1:
							if(mins > 0){
     616:	80 91 05 01 	lds	r24, 0x0105
     61a:	88 23       	and	r24, r24
     61c:	59 f1       	breq	.+86     	; 0x674 <encoders+0x1e0>
								current_fm_freq = current_fm_freq - 20;
     61e:	80 91 94 02 	lds	r24, 0x0294
     622:	90 91 95 02 	lds	r25, 0x0295
     626:	44 97       	sbiw	r24, 0x14	; 20
     628:	90 93 95 02 	sts	0x0295, r25
     62c:	80 93 94 02 	sts	0x0294, r24
								fm_tune_freq();
     630:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fm_tune_freq>
     634:	62 cf       	rjmp	.-316    	; 0x4fa <encoders+0x66>
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(hours > 0){
     636:	80 91 06 01 	lds	r24, 0x0106
     63a:	88 23       	and	r24, r24
     63c:	49 f0       	breq	.+18     	; 0x650 <encoders+0x1bc>
						hours = hours - 1;
     63e:	80 91 06 01 	lds	r24, 0x0106
     642:	81 50       	subi	r24, 0x01	; 1
     644:	80 93 06 01 	sts	0x0106, r24
     648:	2f cf       	rjmp	.-418    	; 0x4a8 <encoders+0x14>
					break;
				case 2:
					if(hours < 23){
						hours = hours + 1;
					}else{
						hours = 0;
     64a:	10 92 06 01 	sts	0x0106, r1
     64e:	2c cf       	rjmp	.-424    	; 0x4a8 <encoders+0x14>
					break;
				case 1:
					if(hours > 0){
						hours = hours - 1;
					}else{
						hours = 23;
     650:	87 e1       	ldi	r24, 0x17	; 23
     652:	80 93 06 01 	sts	0x0106, r24
     656:	28 cf       	rjmp	.-432    	; 0x4a8 <encoders+0x14>
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(alarm_hours > 0){
     658:	80 91 03 01 	lds	r24, 0x0103
     65c:	88 23       	and	r24, r24
     65e:	31 f0       	breq	.+12     	; 0x66c <encoders+0x1d8>
						alarm_hours = alarm_hours - 1;
     660:	80 91 03 01 	lds	r24, 0x0103
     664:	81 50       	subi	r24, 0x01	; 1
     666:	80 93 03 01 	sts	0x0103, r24
     66a:	1e cf       	rjmp	.-452    	; 0x4a8 <encoders+0x14>
					}else{
						alarm_hours = 23;
     66c:	87 e1       	ldi	r24, 0x17	; 23
     66e:	80 93 03 01 	sts	0x0103, r24
     672:	1a cf       	rjmp	.-460    	; 0x4a8 <encoders+0x14>
						case 1:
							if(mins > 0){
								current_fm_freq = current_fm_freq - 20;
								fm_tune_freq();
							}else{
								current_fm_freq = 10790;
     674:	86 e2       	ldi	r24, 0x26	; 38
     676:	9a e2       	ldi	r25, 0x2A	; 42
     678:	90 93 95 02 	sts	0x0295, r25
     67c:	80 93 94 02 	sts	0x0294, r24
								fm_tune_freq();
     680:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fm_tune_freq>
     684:	3a cf       	rjmp	.-396    	; 0x4fa <encoders+0x66>
					break;
				case 1:
					if(alarm_mins > 0){
						alarm_mins = alarm_mins - 1;
					}else{
						alarm_mins = 59;
     686:	8b e3       	ldi	r24, 0x3B	; 59
     688:	80 93 02 01 	sts	0x0102, r24
     68c:	73 cf       	rjmp	.-282    	; 0x574 <encoders+0xe0>
					break;
				case 1:
					if(mins > 0){
						mins = mins - 1;
					}else{
						mins = 59;
     68e:	8b e3       	ldi	r24, 0x3B	; 59
     690:	80 93 05 01 	sts	0x0105, r24
     694:	32 cf       	rjmp	.-412    	; 0x4fa <encoders+0x66>
						case 2:
							if(current_fm_freq < 10790){
								current_fm_freq = current_fm_freq + 20;
								fm_tune_freq();
							}else{
								current_fm_freq = 8890;
     696:	8a eb       	ldi	r24, 0xBA	; 186
     698:	92 e2       	ldi	r25, 0x22	; 34
     69a:	90 93 95 02 	sts	0x0295, r25
     69e:	80 93 94 02 	sts	0x0294, r24
								fm_tune_freq();
     6a2:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fm_tune_freq>
     6a6:	29 cf       	rjmp	.-430    	; 0x4fa <encoders+0x66>
					break;
				case 2:
					if(alarm_mins < 59){
						alarm_mins = alarm_mins + 1;
					}else{
						alarm_mins = 0;
     6a8:	10 92 02 01 	sts	0x0102, r1
     6ac:	63 cf       	rjmp	.-314    	; 0x574 <encoders+0xe0>
					break;
				case 2:
					if(mins < 59){
						mins = mins + 1;
					}else{
						mins = 0;
     6ae:	10 92 05 01 	sts	0x0105, r1
     6b2:	23 cf       	rjmp	.-442    	; 0x4fa <encoders+0x66>
						alarm_hours = 23;
					}
					break;
				case 2:
					if(alarm_hours < 23){
						alarm_hours = alarm_hours + 1;
     6b4:	80 91 03 01 	lds	r24, 0x0103
     6b8:	8f 5f       	subi	r24, 0xFF	; 255
     6ba:	80 93 03 01 	sts	0x0103, r24
     6be:	f4 ce       	rjmp	.-536    	; 0x4a8 <encoders+0x14>

000006c0 <check_alarm>:

//***********************************************************************
//                            check_alarm
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
     6c0:	80 91 07 01 	lds	r24, 0x0107
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	b9 f0       	breq	.+46     	; 0x6f6 <check_alarm+0x36>
			lcd_string_array[4] = 'M';
		}
	}

	// Keeps alarm on while the alarm is armed
	if((alarm_armed == 0x00)){
     6c8:	80 91 07 01 	lds	r24, 0x0107
     6cc:	81 11       	cpse	r24, r1
     6ce:	12 c0       	rjmp	.+36     	; 0x6f4 <check_alarm+0x34>
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
     6d0:	88 e1       	ldi	r24, 0x18	; 24
     6d2:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
     6d4:	87 b7       	in	r24, 0x37	; 55
     6d6:	8f 7e       	andi	r24, 0xEF	; 239
     6d8:	87 bf       	out	0x37, r24	; 55
	}

	// Keeps alarm on while the alarm is armed
	if((alarm_armed == 0x00)){
		disable_tcnt1();
		alarm_buzz = 0x00;
     6da:	10 92 4a 02 	sts	0x024A, r1
		//send_lcd(0x00, 0x08); //Turn off LCD
		lcd_string_array[0] = ' ';
     6de:	80 e2       	ldi	r24, 0x20	; 32
     6e0:	80 93 08 01 	sts	0x0108, r24
		lcd_string_array[1] = ' ';
     6e4:	80 93 09 01 	sts	0x0109, r24
		lcd_string_array[2] = ' ';
     6e8:	80 93 0a 01 	sts	0x010A, r24
		lcd_string_array[3] = ' ';
     6ec:	80 93 0b 01 	sts	0x010B, r24
		lcd_string_array[4] = ' ';
     6f0:	80 93 0c 01 	sts	0x010C, r24
     6f4:	08 95       	ret

//***********************************************************************
//                            check_alarm
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
     6f6:	20 91 06 01 	lds	r18, 0x0106
     6fa:	90 91 03 01 	lds	r25, 0x0103
     6fe:	29 13       	cpse	r18, r25
     700:	e3 cf       	rjmp	.-58     	; 0x6c8 <check_alarm+0x8>
     702:	20 91 05 01 	lds	r18, 0x0105
     706:	90 91 02 01 	lds	r25, 0x0102
     70a:	29 13       	cpse	r18, r25
     70c:	dd cf       	rjmp	.-70     	; 0x6c8 <check_alarm+0x8>
		if((seconds == alarm_seconds)){
     70e:	20 91 04 01 	lds	r18, 0x0104
     712:	90 91 4b 02 	lds	r25, 0x024B
     716:	29 13       	cpse	r18, r25
     718:	d7 cf       	rjmp	.-82     	; 0x6c8 <check_alarm+0x8>
//
// setup TCNT1 in pwm mode
// set OC1A (PB5) as pwm output
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);
     71a:	9f b5       	in	r25, 0x2f	; 47
     71c:	92 60       	ori	r25, 0x02	; 2
     71e:	9f bd       	out	0x2f, r25	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10);
     720:	9e b5       	in	r25, 0x2e	; 46
     722:	99 61       	ori	r25, 0x19	; 25
     724:	9e bd       	out	0x2e, r25	; 46
	//no forced compare
	TCCR1C = 0x00;
     726:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 ec       	ldi	r19, 0xC0	; 192
     72e:	3b bd       	out	0x2b, r19	; 43
     730:	2a bd       	out	0x2a, r18	; 42
	ICR1  = 0xF000; //clear at 0xF000
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 ef       	ldi	r19, 0xF0	; 240
     736:	37 bd       	out	0x27, r19	; 39
     738:	26 bd       	out	0x26, r18	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
     73a:	97 b7       	in	r25, 0x37	; 55
     73c:	90 61       	ori	r25, 0x10	; 16
     73e:	97 bf       	out	0x37, r25	; 55
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
		if((seconds == alarm_seconds)){
			init_tcnt1();
			alarm_buzz = 0x01;
     740:	80 93 4a 02 	sts	0x024A, r24
			//send_lcd(0x00, 0x0C);
			lcd_string_array[0] = 'A';
     744:	81 e4       	ldi	r24, 0x41	; 65
     746:	80 93 08 01 	sts	0x0108, r24
			lcd_string_array[1] = 'L';
     74a:	9c e4       	ldi	r25, 0x4C	; 76
     74c:	90 93 09 01 	sts	0x0109, r25
			lcd_string_array[2] = 'A';
     750:	80 93 0a 01 	sts	0x010A, r24
			lcd_string_array[3] = 'R';
     754:	82 e5       	ldi	r24, 0x52	; 82
     756:	80 93 0b 01 	sts	0x010B, r24
			lcd_string_array[4] = 'M';
     75a:	8d e4       	ldi	r24, 0x4D	; 77
     75c:	80 93 0c 01 	sts	0x010C, r24
     760:	b3 cf       	rjmp	.-154    	; 0x6c8 <check_alarm+0x8>

00000762 <snooze>:
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
     762:	88 e1       	ldi	r24, 0x18	; 24
     764:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
     766:	87 b7       	in	r24, 0x37	; 55
     768:	8f 7e       	andi	r24, 0xEF	; 239
     76a:	87 bf       	out	0x37, r24	; 55
//                            snooze_alarm
//**********************************************************************
void snooze(){
	//Turn off the alarm
	disable_tcnt1();
	alarm_buzz = 0x00;
     76c:	10 92 4a 02 	sts	0x024A, r1

	if(alarm_seconds < 50){
     770:	80 91 4b 02 	lds	r24, 0x024B
     774:	82 33       	cpi	r24, 0x32	; 50
     776:	30 f5       	brcc	.+76     	; 0x7c4 <snooze+0x62>
		alarm_hours = hours;
     778:	80 91 06 01 	lds	r24, 0x0106
     77c:	80 93 03 01 	sts	0x0103, r24
		alarm_mins = mins;
     780:	80 91 05 01 	lds	r24, 0x0105
     784:	80 93 02 01 	sts	0x0102, r24
		alarm_seconds  = seconds;
     788:	80 91 04 01 	lds	r24, 0x0104
     78c:	80 93 4b 02 	sts	0x024B, r24

		if(alarm_seconds < 50){
     790:	80 91 4b 02 	lds	r24, 0x024B
     794:	82 33       	cpi	r24, 0x32	; 50
     796:	b8 f0       	brcs	.+46     	; 0x7c6 <snooze+0x64>
			alarm_seconds = alarm_seconds + 10;
			return;
		}else{
			alarm_seconds = 60-alarm_seconds;
     798:	90 91 4b 02 	lds	r25, 0x024B
     79c:	8c e3       	ldi	r24, 0x3C	; 60
     79e:	89 1b       	sub	r24, r25
     7a0:	80 93 4b 02 	sts	0x024B, r24
			alarm_mins++;
     7a4:	80 91 02 01 	lds	r24, 0x0102
     7a8:	8f 5f       	subi	r24, 0xFF	; 255
     7aa:	80 93 02 01 	sts	0x0102, r24
		}

		if(alarm_mins > 59){
     7ae:	80 91 02 01 	lds	r24, 0x0102
     7b2:	8c 33       	cpi	r24, 0x3C	; 60
     7b4:	38 f0       	brcs	.+14     	; 0x7c4 <snooze+0x62>
			alarm_mins = 0;
     7b6:	10 92 02 01 	sts	0x0102, r1
			alarm_hours++;
     7ba:	80 91 03 01 	lds	r24, 0x0103
     7be:	8f 5f       	subi	r24, 0xFF	; 255
     7c0:	80 93 03 01 	sts	0x0103, r24
     7c4:	08 95       	ret
		alarm_hours = hours;
		alarm_mins = mins;
		alarm_seconds  = seconds;

		if(alarm_seconds < 50){
			alarm_seconds = alarm_seconds + 10;
     7c6:	80 91 4b 02 	lds	r24, 0x024B
     7ca:	86 5f       	subi	r24, 0xF6	; 246
     7cc:	80 93 4b 02 	sts	0x024B, r24
			return;
     7d0:	08 95       	ret

000007d2 <check_user_input>:


//***********************************************************************
//                            Check Buttons/Encoders
//**********************************************************************
void check_user_input(){
     7d2:	af 92       	push	r10
     7d4:	bf 92       	push	r11
     7d6:	cf 92       	push	r12
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
	//Checks the state of the buttons and encoders
	//Output
  //Read the buttons
        PORTB = PORTB | (1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7);
     7e6:	88 b3       	in	r24, 0x18	; 24
     7e8:	80 6f       	ori	r24, 0xF0	; 240
     7ea:	88 bb       	out	0x18, r24	; 24
	// Select 7 - Enable Tristates on Button Board

	DDRA = 0x00; // PortA as an input from buttons
     7ec:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; // PortA enable Pull Ups
     7ee:	8f ef       	ldi	r24, 0xFF	; 255
     7f0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f2:	25 e0       	ldi	r18, 0x05	; 5
     7f4:	2a 95       	dec	r18
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <check_user_input+0x22>
     7f8:	00 00       	nop
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     7fa:	69 b3       	in	r22, 0x19	; 25
     7fc:	80 91 51 02 	lds	r24, 0x0251
     800:	90 91 52 02 	lds	r25, 0x0252
     804:	88 0f       	add	r24, r24
     806:	99 1f       	adc	r25, r25
     808:	90 6e       	ori	r25, 0xE0	; 224
     80a:	26 2f       	mov	r18, r22
     80c:	21 70       	andi	r18, 0x01	; 1
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	82 2b       	or	r24, r18
     812:	93 2b       	or	r25, r19
     814:	90 93 52 02 	sts	0x0252, r25
     818:	80 93 51 02 	sts	0x0251, r24
        if(state[button] == 0xF000) return 1;
     81c:	81 15       	cp	r24, r1
     81e:	90 4f       	sbci	r25, 0xF0	; 240
     820:	09 f4       	brne	.+2      	; 0x824 <check_user_input+0x52>
     822:	ac c0       	rjmp	.+344    	; 0x97c <check_user_input+0x1aa>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     824:	89 b3       	in	r24, 0x19	; 25
     826:	20 91 53 02 	lds	r18, 0x0253
     82a:	30 91 54 02 	lds	r19, 0x0254
     82e:	22 0f       	add	r18, r18
     830:	33 1f       	adc	r19, r19
     832:	30 6e       	ori	r19, 0xE0	; 224
     834:	81 fb       	bst	r24, 1
     836:	44 27       	eor	r20, r20
     838:	40 f9       	bld	r20, 0
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	24 2b       	or	r18, r20
     83e:	35 2b       	or	r19, r21
     840:	30 93 54 02 	sts	0x0254, r19
     844:	20 93 53 02 	sts	0x0253, r18
        if(state[button] == 0xF000) return 1;
     848:	21 15       	cp	r18, r1
     84a:	30 4f       	sbci	r19, 0xF0	; 240
     84c:	09 f4       	brne	.+2      	; 0x850 <check_user_input+0x7e>
     84e:	b4 c0       	rjmp	.+360    	; 0x9b8 <check_user_input+0x1e6>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     850:	29 b3       	in	r18, 0x19	; 25
     852:	80 91 55 02 	lds	r24, 0x0255
     856:	90 91 56 02 	lds	r25, 0x0256
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	90 6e       	ori	r25, 0xE0	; 224
     860:	22 fb       	bst	r18, 2
     862:	cc 24       	eor	r12, r12
     864:	c0 f8       	bld	r12, 0
     866:	d1 2c       	mov	r13, r1
     868:	c8 2a       	or	r12, r24
     86a:	d9 2a       	or	r13, r25
     86c:	d0 92 56 02 	sts	0x0256, r13
     870:	c0 92 55 02 	sts	0x0255, r12
     874:	29 b3       	in	r18, 0x19	; 25
     876:	80 91 57 02 	lds	r24, 0x0257
     87a:	90 91 58 02 	lds	r25, 0x0258
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	90 6e       	ori	r25, 0xE0	; 224
     884:	23 fb       	bst	r18, 3
     886:	aa 24       	eor	r10, r10
     888:	a0 f8       	bld	r10, 0
     88a:	b1 2c       	mov	r11, r1
     88c:	a8 2a       	or	r10, r24
     88e:	b9 2a       	or	r11, r25
     890:	b0 92 58 02 	sts	0x0258, r11
     894:	a0 92 57 02 	sts	0x0257, r10
     898:	29 b3       	in	r18, 0x19	; 25
     89a:	80 91 59 02 	lds	r24, 0x0259
     89e:	90 91 5a 02 	lds	r25, 0x025A
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	90 6e       	ori	r25, 0xE0	; 224
     8a8:	24 fb       	bst	r18, 4
     8aa:	ee 24       	eor	r14, r14
     8ac:	e0 f8       	bld	r14, 0
     8ae:	f1 2c       	mov	r15, r1
     8b0:	8e 29       	or	r24, r14
     8b2:	9f 29       	or	r25, r15
     8b4:	90 93 5a 02 	sts	0x025A, r25
     8b8:	80 93 59 02 	sts	0x0259, r24
        if(state[button] == 0xF000) return 1;
     8bc:	81 15       	cp	r24, r1
     8be:	90 4f       	sbci	r25, 0xF0	; 240
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <check_user_input+0xf2>
     8c2:	76 c0       	rjmp	.+236    	; 0x9b0 <check_user_input+0x1de>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     8c4:	89 b3       	in	r24, 0x19	; 25
     8c6:	20 91 5b 02 	lds	r18, 0x025B
     8ca:	30 91 5c 02 	lds	r19, 0x025C
     8ce:	22 0f       	add	r18, r18
     8d0:	33 1f       	adc	r19, r19
     8d2:	30 6e       	ori	r19, 0xE0	; 224
     8d4:	85 fb       	bst	r24, 5
     8d6:	00 27       	eor	r16, r16
     8d8:	00 f9       	bld	r16, 0
     8da:	10 e0       	ldi	r17, 0x00	; 0
     8dc:	20 2b       	or	r18, r16
     8de:	31 2b       	or	r19, r17
     8e0:	30 93 5c 02 	sts	0x025C, r19
     8e4:	20 93 5b 02 	sts	0x025B, r18
        if(state[button] == 0xF000) return 1;
     8e8:	21 15       	cp	r18, r1
     8ea:	30 4f       	sbci	r19, 0xF0	; 240
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <check_user_input+0x11e>
     8ee:	54 c0       	rjmp	.+168    	; 0x998 <check_user_input+0x1c6>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     8f0:	29 b3       	in	r18, 0x19	; 25
     8f2:	80 91 5d 02 	lds	r24, 0x025D
     8f6:	90 91 5e 02 	lds	r25, 0x025E
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	90 6e       	ori	r25, 0xE0	; 224
     900:	26 fb       	bst	r18, 6
     902:	22 27       	eor	r18, r18
     904:	20 f9       	bld	r18, 0
     906:	c2 2f       	mov	r28, r18
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	d2 2f       	mov	r29, r18
     90c:	8c 2b       	or	r24, r28
     90e:	9d 2b       	or	r25, r29
     910:	90 93 5e 02 	sts	0x025E, r25
     914:	80 93 5d 02 	sts	0x025D, r24
        if(state[button] == 0xF000) return 1;
     918:	81 15       	cp	r24, r1
     91a:	90 4f       	sbci	r25, 0xF0	; 240
     91c:	b1 f1       	breq	.+108    	; 0x98a <check_user_input+0x1b8>
                if((alarm_buzz == 0x01)){
			snooze();
		}
        }
	// Turn off the button board PWM high
	PORTB &= ~((1<<PB4) | (1<<PB5) | (1<<PB6) | (0<<PB7));
     91e:	88 b3       	in	r24, 0x18	; 24
     920:	8f 78       	andi	r24, 0x8F	; 143
     922:	88 bb       	out	0x18, r24	; 24

	DDRA = 0xFF; //DDRA Output
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //Turn Off The 7Seg
     928:	8b bb       	out	0x1b, r24	; 27

  // Send info to the bargraph (Sending info will read in encoders)
	PORTD &= ~(1<<PD2); //Storage Reg for HC595 low
     92a:	92 98       	cbi	0x12, 2	; 18
	PORTE &= ~((1<<PE6) |  (1<<PE5)); //Encoder Shift Reg Clk en Low, Load Mode
     92c:	83 b1       	in	r24, 0x03	; 3
     92e:	8f 79       	andi	r24, 0x9F	; 159
     930:	83 b9       	out	0x03, r24	; 3
	PORTC &= ~(1<<PC1);
     932:	a9 98       	cbi	0x15, 1	; 21
	PORTC |= (1<<PC1);//Shift Mode
     934:	a9 9a       	sbi	0x15, 1	; 21

	//PORTE |= (1<<PE7);
	encoder = spi_rw8(incdec_to_bargraph[clockmode]); // Send SPI_8bit
     936:	e0 91 4e 02 	lds	r30, 0x024E
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	e4 5c       	subi	r30, 0xC4	; 196
     93e:	fe 4f       	sbci	r31, 0xFE	; 254
     940:	80 81       	ld	r24, Z
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
     942:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
     944:	77 9b       	sbis	0x0e, 7	; 14
     946:	fe cf       	rjmp	.-4      	; 0x944 <check_user_input+0x172>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
     948:	8f b1       	in	r24, 0x0f	; 15
	PORTE &= ~((1<<PE6) |  (1<<PE5)); //Encoder Shift Reg Clk en Low, Load Mode
	PORTC &= ~(1<<PC1);
	PORTC |= (1<<PC1);//Shift Mode

	//PORTE |= (1<<PE7);
	encoder = spi_rw8(incdec_to_bargraph[clockmode]); // Send SPI_8bit
     94a:	80 93 4d 02 	sts	0x024D, r24
	//spi_rw8(0xF0); 			//Test line

  // Check the encoders
	if(encoder != old_encoder){
     94e:	90 91 4d 02 	lds	r25, 0x024D
     952:	80 91 4c 02 	lds	r24, 0x024C
     956:	98 13       	cpse	r25, r24
		// Change in the encoder position
		encoders();
     958:	0e 94 4a 02 	call	0x494	; 0x494 <encoders>
	}
  // Return the to original states
	PORTD |= (1<<PD2); //SS_Bar Low
     95c:	92 9a       	sbi	0x12, 2	; 18
	PORTE |= (1<<PE6) | (0<<PE5); //Clk enable high, Shift mode
     95e:	1e 9a       	sbi	0x03, 6	; 3
	PORTB &= ~((1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7)); // Sel 0
     960:	88 b3       	in	r24, 0x18	; 24
     962:	8f 70       	andi	r24, 0x0F	; 15
     964:	88 bb       	out	0x18, r24	; 24
  // Disable the button board tristates
}
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	bf 90       	pop	r11
     978:	af 90       	pop	r10
     97a:	08 95       	ret
	DDRA = 0x00; // PortA as an input from buttons
	PORTA = 0xFF; // PortA enable Pull Ups

	_delay_us(1); 				//Test Wait
        if(chk_buttons(0)){
		clockmode = (clockmode ^ 0X01) & 0x01; // Toggle bit 0
     97c:	80 91 4e 02 	lds	r24, 0x024E
     980:	80 95       	com	r24
     982:	81 70       	andi	r24, 0x01	; 1
     984:	80 93 4e 02 	sts	0x024E, r24
     988:	4d cf       	rjmp	.-358    	; 0x824 <check_user_input+0x52>
		alarm_seconds = 0;
		// Toggle the arming of the alarm
        }

	if(chk_buttons(6)){
                if((alarm_buzz == 0x01)){
     98a:	80 91 4a 02 	lds	r24, 0x024A
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	31 f6       	brne	.-116    	; 0x91e <check_user_input+0x14c>
			snooze();
     992:	0e 94 b1 03 	call	0x762	; 0x762 <snooze>
     996:	c3 cf       	rjmp	.-122    	; 0x91e <check_user_input+0x14c>
	if(chk_buttons(4)){
                clockmode = Clock_set_mode;
        }

	if(chk_buttons(5)){
                clockmode = Alarm_set_mode;
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	80 93 4e 02 	sts	0x024E, r24
		alarm_armed ^= 0x01;
     99e:	90 91 07 01 	lds	r25, 0x0107
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	89 27       	eor	r24, r25
     9a6:	80 93 07 01 	sts	0x0107, r24
		alarm_seconds = 0;
     9aa:	10 92 4b 02 	sts	0x024B, r1
     9ae:	a0 cf       	rjmp	.-192    	; 0x8f0 <check_user_input+0x11e>
	if(chk_buttons(3)){
                volume_down();
        }

	if(chk_buttons(4)){
                clockmode = Clock_set_mode;
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	80 93 4e 02 	sts	0x024E, r24
     9b6:	86 cf       	rjmp	.-244    	; 0x8c4 <check_user_input+0xf2>
		clockmode = (clockmode ^ 0X01) & 0x01; // Toggle bit 0
		// Toggles between clock and alarm views
	}

	if(chk_buttons(1)){
		if(radio_onoff_toggle == TRUE){
     9b8:	80 91 00 01 	lds	r24, 0x0100
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	51 f0       	breq	.+20     	; 0x9d4 <check_user_input+0x202>
			set_property(RX_HARD_MUTE, 0x0000);
			radio_onoff_toggle = FALSE;
		}else{
			set_property(RX_HARD_MUTE, 0x0003);
     9c0:	63 e0       	ldi	r22, 0x03	; 3
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e4       	ldi	r25, 0x40	; 64
     9c8:	0e 94 8a 0b 	call	0x1714	; 0x1714 <set_property>
			radio_onoff_toggle = TRUE;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 00 01 	sts	0x0100, r24
     9d2:	3e cf       	rjmp	.-388    	; 0x850 <check_user_input+0x7e>
		// Toggles between clock and alarm views
	}

	if(chk_buttons(1)){
		if(radio_onoff_toggle == TRUE){
			set_property(RX_HARD_MUTE, 0x0000);
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e4       	ldi	r25, 0x40	; 64
     9dc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <set_property>
			radio_onoff_toggle = FALSE;
     9e0:	10 92 00 01 	sts	0x0100, r1
     9e4:	35 cf       	rjmp	.-406    	; 0x850 <check_user_input+0x7e>

000009e6 <check_ADCs>:
//                            check_ADCs
//**********************************************************************
void check_ADCs(){
	// Reads the ADC
	uint8_t adc_result = 0;
	ADCSRA |= (1<<ADSC); //poke ADSC and start conversion
     9e6:	36 9a       	sbi	0x06, 6	; 6

	while(bit_is_clear(ADCSRA,ADIF)); //spin while interrupt flag not set
     9e8:	34 9b       	sbis	0x06, 4	; 6
     9ea:	fe cf       	rjmp	.-4      	; 0x9e8 <check_ADCs+0x2>

	ADCSRA |= (1<<ADIF); //its done, clear flag by writing a one
     9ec:	34 9a       	sbi	0x06, 4	; 6

	adc_result = ADCH; //read the ADC output as 16 bits
     9ee:	85 b1       	in	r24, 0x05	; 5
	OCR2 = adc_result; //0x10; //adc_result; //adc_result;
     9f0:	83 bd       	out	0x23, r24	; 35
     9f2:	08 95       	ret

000009f4 <__vector_16>:


//***********************************************************************
//                            Timer0_overflow_interrupt
//**********************************************************************
ISR(TIMER0_OVF_vect){
     9f4:	1f 92       	push	r1
     9f6:	0f 92       	push	r0
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	0f 92       	push	r0
     9fc:	11 24       	eor	r1, r1
     9fe:	0b b6       	in	r0, 0x3b	; 59
     a00:	0f 92       	push	r0
     a02:	2f 93       	push	r18
     a04:	3f 93       	push	r19
     a06:	4f 93       	push	r20
     a08:	5f 93       	push	r21
     a0a:	6f 93       	push	r22
     a0c:	7f 93       	push	r23
     a0e:	8f 93       	push	r24
     a10:	9f 93       	push	r25
     a12:	af 93       	push	r26
     a14:	bf 93       	push	r27
     a16:	ef 93       	push	r30
     a18:	ff 93       	push	r31
	//This intterupt should occur every second
	//static uint8_t seconds = 0; //Holds the seconds between interupts
	check_alarm();
     a1a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <check_alarm>
	seconds++;
     a1e:	80 91 04 01 	lds	r24, 0x0104
     a22:	8f 5f       	subi	r24, 0xFF	; 255
     a24:	80 93 04 01 	sts	0x0104, r24
	if((seconds % 60) == 0){
     a28:	90 91 04 01 	lds	r25, 0x0104
     a2c:	89 e8       	ldi	r24, 0x89	; 137
     a2e:	98 9f       	mul	r25, r24
     a30:	81 2d       	mov	r24, r1
     a32:	11 24       	eor	r1, r1
     a34:	82 95       	swap	r24
     a36:	86 95       	lsr	r24
     a38:	87 70       	andi	r24, 0x07	; 7
     a3a:	2c e3       	ldi	r18, 0x3C	; 60
     a3c:	82 9f       	mul	r24, r18
     a3e:	90 19       	sub	r25, r0
     a40:	11 24       	eor	r1, r1
     a42:	91 11       	cpse	r25, r1
     a44:	07 c0       	rjmp	.+14     	; 0xa54 <__vector_16+0x60>
		mins++;
     a46:	80 91 05 01 	lds	r24, 0x0105
     a4a:	8f 5f       	subi	r24, 0xFF	; 255
     a4c:	80 93 05 01 	sts	0x0105, r24
		seconds = 0;
     a50:	10 92 04 01 	sts	0x0104, r1
		//check_alarm();
	}
	if(((mins % 60) == 0) & ((seconds % 60) == 0)){
     a54:	30 91 05 01 	lds	r19, 0x0105
     a58:	90 91 04 01 	lds	r25, 0x0104
     a5c:	89 e8       	ldi	r24, 0x89	; 137
     a5e:	98 9f       	mul	r25, r24
     a60:	21 2d       	mov	r18, r1
     a62:	11 24       	eor	r1, r1
     a64:	22 95       	swap	r18
     a66:	26 95       	lsr	r18
     a68:	27 70       	andi	r18, 0x07	; 7
     a6a:	4c e3       	ldi	r20, 0x3C	; 60
     a6c:	24 9f       	mul	r18, r20
     a6e:	90 19       	sub	r25, r0
     a70:	11 24       	eor	r1, r1
     a72:	91 11       	cpse	r25, r1
     a74:	0c c0       	rjmp	.+24     	; 0xa8e <__vector_16+0x9a>
     a76:	38 9f       	mul	r19, r24
     a78:	81 2d       	mov	r24, r1
     a7a:	11 24       	eor	r1, r1
     a7c:	82 95       	swap	r24
     a7e:	86 95       	lsr	r24
     a80:	87 70       	andi	r24, 0x07	; 7
     a82:	84 9f       	mul	r24, r20
     a84:	30 19       	sub	r19, r0
     a86:	11 24       	eor	r1, r1
     a88:	33 23       	and	r19, r19
     a8a:	09 f4       	brne	.+2      	; 0xa8e <__vector_16+0x9a>
     a8c:	4b c0       	rjmp	.+150    	; 0xb24 <__vector_16+0x130>
		hours++;
		mins = 0;
	}
	if((hours % 24) == 0){
     a8e:	90 91 06 01 	lds	r25, 0x0106
     a92:	8b ea       	ldi	r24, 0xAB	; 171
     a94:	98 9f       	mul	r25, r24
     a96:	81 2d       	mov	r24, r1
     a98:	11 24       	eor	r1, r1
     a9a:	82 95       	swap	r24
     a9c:	8f 70       	andi	r24, 0x0F	; 15
     a9e:	28 e1       	ldi	r18, 0x18	; 24
     aa0:	82 9f       	mul	r24, r18
     aa2:	90 19       	sub	r25, r0
     aa4:	11 24       	eor	r1, r1
     aa6:	91 11       	cpse	r25, r1
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <__vector_16+0xba>
		hours = 0;
     aaa:	10 92 06 01 	sts	0x0106, r1
	}
	
    //Request the temp
	twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2);
     aae:	42 e0       	ldi	r20, 0x02	; 2
     ab0:	61 eb       	ldi	r22, 0xB1	; 177
     ab2:	72 e0       	ldi	r23, 0x02	; 2
     ab4:	80 e9       	ldi	r24, 0x90	; 144
     ab6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <twi_start_rd>
	//Format the local temp data
    lm73_temp = (lm73_rd_buf[0] << 8) | (lm73_rd_buf[1]);
     aba:	80 91 b1 02 	lds	r24, 0x02B1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	98 2f       	mov	r25, r24
     ac2:	88 27       	eor	r24, r24
     ac4:	20 91 b2 02 	lds	r18, 0x02B2
     ac8:	82 2b       	or	r24, r18
    lm73_temp = lm73_temp >> 7;
     aca:	88 0f       	add	r24, r24
     acc:	89 2f       	mov	r24, r25
     ace:	88 1f       	adc	r24, r24
     ad0:	99 0b       	sbc	r25, r25
     ad2:	91 95       	neg	r25
     ad4:	90 93 8c 02 	sts	0x028C, r25
     ad8:	80 93 8b 02 	sts	0x028B, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     adc:	4a e0       	ldi	r20, 0x0A	; 10
     ade:	69 e8       	ldi	r22, 0x89	; 137
     ae0:	72 e0       	ldi	r23, 0x02	; 2
     ae2:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__itoa_ncheck>
    itoa(lm73_temp, tempsensor_string, 10);
    //Send the local data to the LCD array
    lcd_string_array[19] = tempsensor_string[0];
     ae6:	80 91 89 02 	lds	r24, 0x0289
     aea:	80 93 1b 01 	sts	0x011B, r24
    lcd_string_array[20] = tempsensor_string[1];
     aee:	80 91 8a 02 	lds	r24, 0x028A
     af2:	80 93 1c 01 	sts	0x011C, r24


    //Request the ATmega48 data
    while(!(UCSR0A & (1 << UDRE0)));
     af6:	5d 9b       	sbis	0x0b, 5	; 11
     af8:	fe cf       	rjmp	.-4      	; 0xaf6 <__vector_16+0x102>
    UDR0 = 0xF0;
     afa:	80 ef       	ldi	r24, 0xF0	; 240
     afc:	8c b9       	out	0x0c, r24	; 12

	
}
     afe:	ff 91       	pop	r31
     b00:	ef 91       	pop	r30
     b02:	bf 91       	pop	r27
     b04:	af 91       	pop	r26
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	7f 91       	pop	r23
     b0c:	6f 91       	pop	r22
     b0e:	5f 91       	pop	r21
     b10:	4f 91       	pop	r20
     b12:	3f 91       	pop	r19
     b14:	2f 91       	pop	r18
     b16:	0f 90       	pop	r0
     b18:	0b be       	out	0x3b, r0	; 59
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti
		mins++;
		seconds = 0;
		//check_alarm();
	}
	if(((mins % 60) == 0) & ((seconds % 60) == 0)){
		hours++;
     b24:	80 91 06 01 	lds	r24, 0x0106
     b28:	8f 5f       	subi	r24, 0xFF	; 255
     b2a:	80 93 06 01 	sts	0x0106, r24
		mins = 0;
     b2e:	10 92 05 01 	sts	0x0105, r1
     b32:	ad cf       	rjmp	.-166    	; 0xa8e <__vector_16+0x9a>

00000b34 <__vector_12>:


//***********************************************************************
//                            Timer1_OCR1A_Match
//**********************************************************************
ISR(TIMER1_COMPA_vect){
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	8f 93       	push	r24
     b40:	9f 93       	push	r25
	// Port C must be used for Alarm PWM as OCR1X is used for 7Seg
	PORTC ^= 0X03; //Toggle Bit 0 & 1
     b42:	95 b3       	in	r25, 0x15	; 21
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	89 27       	eor	r24, r25
     b48:	85 bb       	out	0x15, r24	; 21

}
     b4a:	9f 91       	pop	r25
     b4c:	8f 91       	pop	r24
     b4e:	0f 90       	pop	r0
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	0f 90       	pop	r0
     b54:	1f 90       	pop	r1
     b56:	18 95       	reti

00000b58 <__vector_10>:


//***********************************************************************
//                            Timer2_overflow_interrupt
//**********************************************************************
ISR(TIMER2_OVF_vect){
     b58:	1f 92       	push	r1
     b5a:	0f 92       	push	r0
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	0f 92       	push	r0
     b60:	11 24       	eor	r1, r1
     b62:	0b b6       	in	r0, 0x3b	; 59
     b64:	0f 92       	push	r0
     b66:	2f 93       	push	r18
     b68:	3f 93       	push	r19
     b6a:	4f 93       	push	r20
     b6c:	5f 93       	push	r21
     b6e:	6f 93       	push	r22
     b70:	7f 93       	push	r23
     b72:	8f 93       	push	r24
     b74:	9f 93       	push	r25
     b76:	af 93       	push	r26
     b78:	bf 93       	push	r27
     b7a:	ef 93       	push	r30
     b7c:	ff 93       	push	r31
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
     b7e:	80 91 50 02 	lds	r24, 0x0250
     b82:	8f 5f       	subi	r24, 0xFF	; 255
		if((timer_tick > 10)){
     b84:	8b 30       	cpi	r24, 0x0B	; 11
     b86:	a8 f4       	brcc	.+42     	; 0xbb2 <__vector_10+0x5a>
//**********************************************************************
ISR(TIMER2_OVF_vect){
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
     b88:	80 93 50 02 	sts	0x0250, r24
		
			
		refresh_lcd(lcd_string_array);

	}
}
     b8c:	ff 91       	pop	r31
     b8e:	ef 91       	pop	r30
     b90:	bf 91       	pop	r27
     b92:	af 91       	pop	r26
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	7f 91       	pop	r23
     b9a:	6f 91       	pop	r22
     b9c:	5f 91       	pop	r21
     b9e:	4f 91       	pop	r20
     ba0:	3f 91       	pop	r19
     ba2:	2f 91       	pop	r18
     ba4:	0f 90       	pop	r0
     ba6:	0b be       	out	0x3b, r0	; 59
     ba8:	0f 90       	pop	r0
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	0f 90       	pop	r0
     bae:	1f 90       	pop	r1
     bb0:	18 95       	reti
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
		if((timer_tick > 10)){
		timer_tick = 0;
     bb2:	10 92 50 02 	sts	0x0250, r1
		check_user_input();
     bb6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <check_user_input>
//                            check_ADCs
//**********************************************************************
void check_ADCs(){
	// Reads the ADC
	uint8_t adc_result = 0;
	ADCSRA |= (1<<ADSC); //poke ADSC and start conversion
     bba:	36 9a       	sbi	0x06, 6	; 6

	while(bit_is_clear(ADCSRA,ADIF)); //spin while interrupt flag not set
     bbc:	34 9b       	sbis	0x06, 4	; 6
     bbe:	fe cf       	rjmp	.-4      	; 0xbbc <__vector_10+0x64>

	ADCSRA |= (1<<ADIF); //its done, clear flag by writing a one
     bc0:	34 9a       	sbi	0x06, 4	; 6

	adc_result = ADCH; //read the ADC output as 16 bits
     bc2:	85 b1       	in	r24, 0x05	; 5
	OCR2 = adc_result; //0x10; //adc_result; //adc_result;
     bc4:	83 bd       	out	0x23, r24	; 35
		timer_tick = 0;
		check_user_input();
		check_ADCs();
		
			
		refresh_lcd(lcd_string_array);
     bc6:	88 e0       	ldi	r24, 0x08	; 8
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	0e 94 5f 06 	call	0xcbe	; 0xcbe <refresh_lcd>
     bce:	de cf       	rjmp	.-68     	; 0xb8c <__vector_10+0x34>

00000bd0 <__vector_9>:
	}
}



ISR(TIMER2_COMP_vect){
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
        //TO DO
}
     bda:	0f 90       	pop	r0
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	0f 90       	pop	r0
     be0:	1f 90       	pop	r1
     be2:	18 95       	reti

00000be4 <__vector_18>:

//***********************************************************************
//                            USART0_recieve_interrupt
//**********************************************************************
//Get the temp from the ATMega48
ISR(USART0_RX_vect) {
     be4:	1f 92       	push	r1
     be6:	0f 92       	push	r0
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	0f 92       	push	r0
     bec:	11 24       	eor	r1, r1
     bee:	0b b6       	in	r0, 0x3b	; 59
     bf0:	0f 92       	push	r0
     bf2:	2f 93       	push	r18
     bf4:	3f 93       	push	r19
     bf6:	4f 93       	push	r20
     bf8:	5f 93       	push	r21
     bfa:	6f 93       	push	r22
     bfc:	7f 93       	push	r23
     bfe:	8f 93       	push	r24
     c00:	9f 93       	push	r25
     c02:	af 93       	push	r26
     c04:	bf 93       	push	r27
     c06:	ef 93       	push	r30
     c08:	ff 93       	push	r31

	//Process the recieved ATmega48 data to the LCD
    if(first_byte == TRUE){
     c0a:	80 91 01 01 	lds	r24, 0x0101
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	d1 f0       	breq	.+52     	; 0xc46 <__vector_18+0x62>
    	lcd_string_array[25] = uart_getc();
    	first_byte = FALSE;
    }else{
    	lcd_string_array[26] = uart_getc();
     c12:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <uart_getc>
     c16:	80 93 22 01 	sts	0x0122, r24
    	first_byte = TRUE;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 01 01 	sts	0x0101, r24
    }
}
     c20:	ff 91       	pop	r31
     c22:	ef 91       	pop	r30
     c24:	bf 91       	pop	r27
     c26:	af 91       	pop	r26
     c28:	9f 91       	pop	r25
     c2a:	8f 91       	pop	r24
     c2c:	7f 91       	pop	r23
     c2e:	6f 91       	pop	r22
     c30:	5f 91       	pop	r21
     c32:	4f 91       	pop	r20
     c34:	3f 91       	pop	r19
     c36:	2f 91       	pop	r18
     c38:	0f 90       	pop	r0
     c3a:	0b be       	out	0x3b, r0	; 59
     c3c:	0f 90       	pop	r0
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	0f 90       	pop	r0
     c42:	1f 90       	pop	r1
     c44:	18 95       	reti
//Get the temp from the ATMega48
ISR(USART0_RX_vect) {

	//Process the recieved ATmega48 data to the LCD
    if(first_byte == TRUE){
    	lcd_string_array[25] = uart_getc();
     c46:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <uart_getc>
     c4a:	80 93 21 01 	sts	0x0121, r24
    	first_byte = FALSE;
     c4e:	10 92 01 01 	sts	0x0101, r1
     c52:	e6 cf       	rjmp	.-52     	; 0xc20 <__vector_18+0x3c>

00000c54 <radio_reset>:
}


void radio_reset(){
	//Code given by rodger
	DDRE  |= 0x04; //Port E bit 2 is active high reset for radio
     c54:	12 9a       	sbi	0x02, 2	; 2
	PORTE |= 0x04; //radio reset is on at powerup (active high)
     c56:	1a 9a       	sbi	0x03, 2	; 3

	//hardware reset of Si4734
	 PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
     c58:	1f 98       	cbi	0x03, 7	; 3
	 DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
     c5a:	17 9a       	sbi	0x02, 7	; 2
	 PORTE |=  (1<<PE2); //hardware reset Si4734
     c5c:	1a 9a       	sbi	0x03, 2	; 3
     c5e:	8f e1       	ldi	r24, 0x1F	; 31
     c60:	93 e0       	ldi	r25, 0x03	; 3
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <radio_reset+0xe>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <radio_reset+0x14>
     c68:	00 00       	nop
	 _delay_us(200);     //hold for 200us, 100us by spec
	 PORTE &= ~(1<<PE2); //release reset
     c6a:	1a 98       	cbi	0x03, 2	; 3
     c6c:	90 ea       	ldi	r25, 0xA0	; 160
     c6e:	9a 95       	dec	r25
     c70:	f1 f7       	brne	.-4      	; 0xc6e <radio_reset+0x1a>
	 _delay_us(30);      //5us required because of my slow I2C translators I suspect
							//Si code in "low" has 30us delay...no explaination
	 DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
     c72:	17 98       	cbi	0x02, 7	; 2
     c74:	08 95       	ret

00000c76 <__vector_8>:
//******************************************************************************
// External interrupt 7 is on Port E bit 7. The interrupt is triggered on the
// rising edge of Port E bit 7.  The i/o clock must be running to detect the
// edge (not asynchronouslly triggered)
//******************************************************************************
ISR(INT7_vect){STC_interrupt = TRUE;}
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	8f 93       	push	r24
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	80 93 79 03 	sts	0x0379, r24
     c88:	8f 91       	pop	r24
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	0f 90       	pop	r0
     c90:	1f 90       	pop	r1
     c92:	18 95       	reti

00000c94 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	81 11       	cpse	r24, r1
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <send_lcd+0x8>
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c9e:	77 9b       	sbis	0x0e, 7	; 14
     ca0:	fe cf       	rjmp	.-4      	; 0xc9e <send_lcd+0xa>
  SPDR = byte;                        //send payload
     ca2:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ca4:	77 9b       	sbis	0x0e, 7	; 14
     ca6:	fe cf       	rjmp	.-4      	; 0xca4 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ca8:	80 91 62 00 	lds	r24, 0x0062
     cac:	88 60       	ori	r24, 0x08	; 8
     cae:	80 93 62 00 	sts	0x0062, r24
     cb2:	80 91 62 00 	lds	r24, 0x0062
     cb6:	87 7f       	andi	r24, 0xF7	; 247
     cb8:	80 93 62 00 	sts	0x0062, r24
     cbc:	08 95       	ret

00000cbe <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
     cbe:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     cc0:	c0 91 61 02 	lds	r28, 0x0261
     cc4:	8c 0f       	add	r24, r28
     cc6:	91 1d       	adc	r25, r1
     cc8:	fc 01       	movw	r30, r24
     cca:	60 81       	ld	r22, Z
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
 i++;   //increment to next character
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	8c 0f       	add	r24, r28
     cd6:	80 93 61 02 	sts	0x0261, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     cda:	80 31       	cpi	r24, 0x10	; 16
     cdc:	81 f0       	breq	.+32     	; 0xcfe <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     cde:	80 32       	cpi	r24, 0x20	; 32
     ce0:	11 f0       	breq	.+4      	; 0xce6 <refresh_lcd+0x28>
}//refresh_lcd
     ce2:	cf 91       	pop	r28
     ce4:	08 95       	ret
     ce6:	85 ed       	ldi	r24, 0xD5	; 213
     ce8:	8a 95       	dec	r24
     cea:	f1 f7       	brne	.-4      	; 0xce8 <refresh_lcd+0x2a>
     cec:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     cee:	60 e8       	ldi	r22, 0x80	; 128
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     cf6:	10 92 61 02 	sts	0x0261, r1
}//refresh_lcd
     cfa:	cf 91       	pop	r28
     cfc:	08 95       	ret
     cfe:	f5 ed       	ldi	r31, 0xD5	; 213
     d00:	fa 95       	dec	r31
     d02:	f1 f7       	brne	.-4      	; 0xd00 <refresh_lcd+0x42>
     d04:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     d06:	60 ec       	ldi	r22, 0xC0	; 192
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     d0e:	80 91 61 02 	lds	r24, 0x0261
     d12:	e5 cf       	rjmp	.-54     	; 0xcde <refresh_lcd+0x20>

00000d14 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	1f 92       	push	r1
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     d28:	66 0f       	add	r22, r22
     d2a:	66 0f       	add	r22, r22
     d2c:	66 0f       	add	r22, r22
     d2e:	60 5c       	subi	r22, 0xC0	; 192
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	99 83       	std	Y+1, r25	; 0x01
     d34:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     d38:	85 ed       	ldi	r24, 0xD5	; 213
     d3a:	8a 95       	dec	r24
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <set_custom_character+0x26>
     d3e:	00 00       	nop
     d40:	e1 2e       	mov	r14, r17
     d42:	99 81       	ldd	r25, Y+1	; 0x01
     d44:	f9 2e       	mov	r15, r25
     d46:	87 01       	movw	r16, r14
     d48:	08 5f       	subi	r16, 0xF8	; 248
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     d4c:	f7 01       	movw	r30, r14
     d4e:	61 91       	ld	r22, Z+
     d50:	7f 01       	movw	r14, r30
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     d58:	f5 ed       	ldi	r31, 0xD5	; 213
     d5a:	fa 95       	dec	r31
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <set_custom_character+0x46>
     d5e:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     d60:	e0 16       	cp	r14, r16
     d62:	f1 06       	cpc	r15, r17
     d64:	99 f7       	brne	.-26     	; 0xd4c <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     d66:	0f 90       	pop	r0
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	08 95       	ret

00000d76 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     d76:	90 e4       	ldi	r25, 0x40	; 64
     d78:	89 9f       	mul	r24, r25
     d7a:	60 0d       	add	r22, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	60 5c       	subi	r22, 0xC0	; 192
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <send_lcd>

00000d86 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
     d86:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     d88:	88 23       	and	r24, r24
     d8a:	b9 f1       	breq	.+110    	; 0xdfa <uint2lcd+0x74>
     d8c:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     d8e:	84 36       	cpi	r24, 0x64	; 100
     d90:	98 f4       	brcc	.+38     	; 0xdb8 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     d92:	8a 30       	cpi	r24, 0x0A	; 10
     d94:	d8 f4       	brcc	.+54     	; 0xdcc <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     d96:	8d ec       	ldi	r24, 0xCD	; 205
     d98:	c8 9f       	mul	r28, r24
     d9a:	81 2d       	mov	r24, r1
     d9c:	11 24       	eor	r1, r1
     d9e:	86 95       	lsr	r24
     da0:	86 95       	lsr	r24
     da2:	86 95       	lsr	r24
     da4:	6c 2f       	mov	r22, r28
     da6:	2a e0       	ldi	r18, 0x0A	; 10
     da8:	82 9f       	mul	r24, r18
     daa:	60 19       	sub	r22, r0
     dac:	11 24       	eor	r1, r1
     dae:	60 5d       	subi	r22, 0xD0	; 208
     db0:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     db2:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     db4:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     db8:	69 e2       	ldi	r22, 0x29	; 41
     dba:	86 9f       	mul	r24, r22
     dbc:	61 2d       	mov	r22, r1
     dbe:	11 24       	eor	r1, r1
     dc0:	62 95       	swap	r22
     dc2:	6f 70       	andi	r22, 0x0F	; 15
     dc4:	60 5d       	subi	r22, 0xD0	; 208
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     dcc:	89 e2       	ldi	r24, 0x29	; 41
     dce:	c8 9f       	mul	r28, r24
     dd0:	81 2d       	mov	r24, r1
     dd2:	11 24       	eor	r1, r1
     dd4:	82 95       	swap	r24
     dd6:	8f 70       	andi	r24, 0x0F	; 15
     dd8:	9c 2f       	mov	r25, r28
     dda:	24 e6       	ldi	r18, 0x64	; 100
     ddc:	82 9f       	mul	r24, r18
     dde:	90 19       	sub	r25, r0
     de0:	11 24       	eor	r1, r1
     de2:	6d ec       	ldi	r22, 0xCD	; 205
     de4:	96 9f       	mul	r25, r22
     de6:	61 2d       	mov	r22, r1
     de8:	11 24       	eor	r1, r1
     dea:	66 95       	lsr	r22
     dec:	66 95       	lsr	r22
     dee:	66 95       	lsr	r22
     df0:	60 5d       	subi	r22, 0xD0	; 208
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     df8:	ce cf       	rjmp	.-100    	; 0xd96 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     dfa:	60 e3       	ldi	r22, 0x30	; 48
     dfc:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
     dfe:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     e00:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <send_lcd>

00000e04 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
     e04:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     e06:	87 fd       	sbrc	r24, 7
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
     e0a:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
     e0c:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <uint2lcd>
     e10:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     e12:	6d e2       	ldi	r22, 0x2D	; 45
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     e1a:	85 ed       	ldi	r24, 0xD5	; 213
     e1c:	8a 95       	dec	r24
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <int2lcd+0x18>
     e20:	00 00       	nop
     e22:	8c 2f       	mov	r24, r28
     e24:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
     e26:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     e28:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <uint2lcd>

00000e2c <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
     e2c:	6e e0       	ldi	r22, 0x0E	; 14
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <send_lcd>

00000e34 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
     e34:	6c e0       	ldi	r22, 0x0C	; 12
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <send_lcd>

00000e3c <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
     e3c:	6e e1       	ldi	r22, 0x1E	; 30
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <send_lcd>

00000e44 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
     e44:	68 e1       	ldi	r22, 0x18	; 24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <send_lcd>

00000e4c <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e4c:	e2 e6       	ldi	r30, 0x62	; 98
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	88 60       	ori	r24, 0x08	; 8
     e54:	80 83       	st	Z, r24
     e56:	80 81       	ld	r24, Z
     e58:	87 7f       	andi	r24, 0xF7	; 247
     e5a:	80 83       	st	Z, r24
     e5c:	08 95       	ret

00000e5e <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
     e5e:	61 e0       	ldi	r22, 0x01	; 1
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     e66:	8f e1       	ldi	r24, 0x1F	; 31
     e68:	9c e1       	ldi	r25, 0x1C	; 28
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <clear_display+0xc>
     e6e:	00 c0       	rjmp	.+0      	; 0xe70 <clear_display+0x12>
     e70:	00 00       	nop
     e72:	08 95       	ret

00000e74 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
     e74:	62 e0       	ldi	r22, 0x02	; 2
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     e7c:	8f e6       	ldi	r24, 0x6F	; 111
     e7e:	97 e1       	ldi	r25, 0x17	; 23
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <cursor_home+0xc>
     e84:	00 c0       	rjmp	.+0      	; 0xe86 <cursor_home+0x12>
     e86:	00 00       	nop
     e88:	08 95       	ret

00000e8a <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     e8a:	60 ec       	ldi	r22, 0xC0	; 192
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <send_lcd>

00000e92 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     e92:	60 e8       	ldi	r22, 0x80	; 128
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <send_lcd>

00000e9a <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     e9a:	cf 93       	push	r28
     e9c:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
     e9e:	60 e2       	ldi	r22, 0x20	; 32
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     ea6:	85 ed       	ldi	r24, 0xD5	; 213
     ea8:	8a 95       	dec	r24
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <fill_spaces+0xe>
     eac:	00 00       	nop
     eae:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     eb0:	b1 f7       	brne	.-20     	; 0xe9e <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
     eb6:	68 2f       	mov	r22, r24
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <send_lcd>

00000ebe <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	c0 e0       	ldi	r28, 0x00	; 0
     ecc:	f8 01       	movw	r30, r16
     ece:	e4 0f       	add	r30, r20
     ed0:	f5 1f       	adc	r31, r21
     ed2:	60 81       	ld	r22, Z
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     eda:	85 ed       	ldi	r24, 0xD5	; 213
     edc:	8a 95       	dec	r24
     ede:	f1 f7       	brne	.-4      	; 0xedc <string2lcd+0x1e>
     ee0:	00 00       	nop
     ee2:	cf 5f       	subi	r28, 0xFF	; 255
     ee4:	4c 2f       	mov	r20, r28
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	f8 01       	movw	r30, r16
     eea:	01 90       	ld	r0, Z+
     eec:	00 20       	and	r0, r0
     eee:	e9 f7       	brne	.-6      	; 0xeea <string2lcd+0x2c>
     ef0:	9f 01       	movw	r18, r30
     ef2:	20 1b       	sub	r18, r16
     ef4:	31 0b       	sbc	r19, r17
     ef6:	22 50       	subi	r18, 0x02	; 2
     ef8:	31 09       	sbc	r19, r1
     efa:	24 17       	cp	r18, r20
     efc:	35 07       	cpc	r19, r21
     efe:	30 f7       	brcc	.-52     	; 0xecc <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	08 95       	ret

00000f08 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	99 ef       	ldi	r25, 0xF9	; 249
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <lcd_init+0x4>
     f10:	00 c0       	rjmp	.+0      	; 0xf12 <lcd_init+0xa>
     f12:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     f14:	88 e0       	ldi	r24, 0x08	; 8
     f16:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
     f1a:	60 e3       	ldi	r22, 0x30	; 48
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     f22:	8f e5       	ldi	r24, 0x5F	; 95
     f24:	9d e6       	ldi	r25, 0x6D	; 109
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <lcd_init+0x1e>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <lcd_init+0x24>
     f2c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     f2e:	60 e3       	ldi	r22, 0x30	; 48
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     f36:	8f e5       	ldi	r24, 0x5F	; 95
     f38:	9d e6       	ldi	r25, 0x6D	; 109
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <lcd_init+0x32>
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <lcd_init+0x38>
     f40:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     f42:	60 e3       	ldi	r22, 0x30	; 48
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     f4a:	8f e5       	ldi	r24, 0x5F	; 95
     f4c:	9d e6       	ldi	r25, 0x6D	; 109
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <lcd_init+0x46>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <lcd_init+0x4c>
     f54:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
     f56:	68 e3       	ldi	r22, 0x38	; 56
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     f5e:	8f e1       	ldi	r24, 0x1F	; 31
     f60:	9e e4       	ldi	r25, 0x4E	; 78
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <lcd_init+0x5a>
     f66:	00 c0       	rjmp	.+0      	; 0xf68 <lcd_init+0x60>
     f68:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
     f6a:	68 e0       	ldi	r22, 0x08	; 8
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     f72:	8f e1       	ldi	r24, 0x1F	; 31
     f74:	9e e4       	ldi	r25, 0x4E	; 78
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <lcd_init+0x6e>
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <lcd_init+0x74>
     f7c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     f86:	8f e1       	ldi	r24, 0x1F	; 31
     f88:	9e e4       	ldi	r25, 0x4E	; 78
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <lcd_init+0x82>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <lcd_init+0x88>
     f90:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
     f92:	66 e0       	ldi	r22, 0x06	; 6
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     f9a:	8f e1       	ldi	r24, 0x1F	; 31
     f9c:	9e e4       	ldi	r25, 0x4E	; 78
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <lcd_init+0x96>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <lcd_init+0x9c>
     fa4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
     fa6:	6c e0       	ldi	r22, 0x0C	; 12
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
     fae:	8f e1       	ldi	r24, 0x1F	; 31
     fb0:	9e e4       	ldi	r25, 0x4E	; 78
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <lcd_init+0xaa>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <lcd_init+0xb0>
     fb8:	00 00       	nop
     fba:	08 95       	ret

00000fbc <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     fbc:	8f 92       	push	r8
     fbe:	9f 92       	push	r9
     fc0:	af 92       	push	r10
     fc2:	bf 92       	push	r11
     fc4:	cf 92       	push	r12
     fc6:	df 92       	push	r13
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	69 97       	sbiw	r28, 0x19	; 25
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	f4 2e       	mov	r15, r20
     fe6:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
     fe8:	00 23       	and	r16, r16
     fea:	59 f0       	breq	.+22     	; 0x1002 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
     fec:	4b 01       	movw	r8, r22
     fee:	5c 01       	movw	r10, r24
     ff0:	88 24       	eor	r8, r8
     ff2:	b7 fc       	sbrc	r11, 7
     ff4:	83 94       	inc	r8
     ff6:	99 24       	eor	r9, r9
     ff8:	aa 24       	eor	r10, r10
     ffa:	bb 24       	eor	r11, r11
     ffc:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
     ffe:	97 fd       	sbrc	r25, 7
    1000:	8f c0       	rjmp	.+286    	; 0x1120 <__stack+0x21>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    1002:	11 23       	and	r17, r17
    1004:	09 f4       	brne	.+2      	; 0x1008 <lcd_int32+0x4c>
    1006:	84 c0       	rjmp	.+264    	; 0x1110 <__stack+0x11>
    1008:	9e 01       	movw	r18, r28
    100a:	2f 5f       	subi	r18, 0xFF	; 255
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	69 01       	movw	r12, r18
    1010:	59 01       	movw	r10, r18
    1012:	88 24       	eor	r8, r8
    1014:	8a 94       	dec	r8
    1016:	81 0e       	add	r8, r17
    1018:	91 2c       	mov	r9, r1
    101a:	3f ef       	ldi	r19, 0xFF	; 255
    101c:	83 1a       	sub	r8, r19
    101e:	93 0a       	sbc	r9, r19
    1020:	8c 0c       	add	r8, r12
    1022:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    1024:	2a e0       	ldi	r18, 0x0A	; 10
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__divmodsi4>
    1030:	e6 2f       	mov	r30, r22
    1032:	2a 8b       	std	Y+18, r18	; 0x12
    1034:	3b 8b       	std	Y+19, r19	; 0x13
    1036:	4c 8b       	std	Y+20, r20	; 0x14
    1038:	5d 8b       	std	Y+21, r21	; 0x15
    103a:	6a 89       	ldd	r22, Y+18	; 0x12
    103c:	7b 89       	ldd	r23, Y+19	; 0x13
    103e:	8c 89       	ldd	r24, Y+20	; 0x14
    1040:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1042:	20 e3       	ldi	r18, 0x30	; 48
    1044:	2e 0f       	add	r18, r30
    1046:	f5 01       	movw	r30, r10
    1048:	21 93       	st	Z+, r18
    104a:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    104c:	e8 15       	cp	r30, r8
    104e:	f9 05       	cpc	r31, r9
    1050:	49 f7       	brne	.-46     	; 0x1024 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    1052:	bb 24       	eor	r11, r11
    1054:	b3 94       	inc	r11
    1056:	b1 0e       	add	r11, r17
    1058:	f6 01       	movw	r30, r12
    105a:	e1 0f       	add	r30, r17
    105c:	f1 1d       	adc	r31, r1
    105e:	2e e2       	ldi	r18, 0x2E	; 46
    1060:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    1062:	2a e0       	ldi	r18, 0x0A	; 10
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__divmodsi4>
    106e:	e6 2f       	mov	r30, r22
    1070:	2a 8b       	std	Y+18, r18	; 0x12
    1072:	3b 8b       	std	Y+19, r19	; 0x13
    1074:	4c 8b       	std	Y+20, r20	; 0x14
    1076:	5d 8b       	std	Y+21, r21	; 0x15
    1078:	6e 8b       	std	Y+22, r22	; 0x16
    107a:	7f 8b       	std	Y+23, r23	; 0x17
    107c:	88 8f       	std	Y+24, r24	; 0x18
    107e:	99 8f       	std	Y+25, r25	; 0x19
    1080:	6a 89       	ldd	r22, Y+18	; 0x12
    1082:	7b 89       	ldd	r23, Y+19	; 0x13
    1084:	8c 89       	ldd	r24, Y+20	; 0x14
    1086:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1088:	11 e0       	ldi	r17, 0x01	; 1
    108a:	1b 0d       	add	r17, r11
    108c:	d6 01       	movw	r26, r12
    108e:	ab 0d       	add	r26, r11
    1090:	b1 1d       	adc	r27, r1
    1092:	e0 5d       	subi	r30, 0xD0	; 208
    1094:	ec 93       	st	X, r30
    1096:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    1098:	61 15       	cp	r22, r1
    109a:	71 05       	cpc	r23, r1
    109c:	81 05       	cpc	r24, r1
    109e:	91 05       	cpc	r25, r1
    10a0:	01 f7       	brne	.-64     	; 0x1062 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    10a2:	ff 20       	and	r15, r15
    10a4:	61 f0       	breq	.+24     	; 0x10be <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    10a6:	e1 10       	cpse	r14, r1
    10a8:	39 c0       	rjmp	.+114    	; 0x111c <__stack+0x1d>
    10aa:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    10ac:	1f 15       	cp	r17, r15
    10ae:	38 f4       	brcc	.+14     	; 0x10be <lcd_int32+0x102>
    10b0:	f6 01       	movw	r30, r12
    10b2:	e1 0f       	add	r30, r17
    10b4:	f1 1d       	adc	r31, r1
    10b6:	80 83       	st	Z, r24
    10b8:	1f 5f       	subi	r17, 0xFF	; 255
    10ba:	1f 11       	cpse	r17, r15
    10bc:	f9 cf       	rjmp	.-14     	; 0x10b0 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    10be:	00 23       	and	r16, r16
    10c0:	31 f0       	breq	.+12     	; 0x10ce <lcd_int32+0x112>
    10c2:	f6 01       	movw	r30, r12
    10c4:	e1 0f       	add	r30, r17
    10c6:	f1 1d       	adc	r31, r1
    10c8:	8d e2       	ldi	r24, 0x2D	; 45
    10ca:	80 83       	st	Z, r24
    10cc:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    10ce:	11 50       	subi	r17, 0x01	; 1
    10d0:	f6 01       	movw	r30, r12
    10d2:	e1 0f       	add	r30, r17
    10d4:	f1 1d       	adc	r31, r1
    10d6:	60 81       	ld	r22, Z
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10de:	35 ed       	ldi	r19, 0xD5	; 213
    10e0:	3a 95       	dec	r19
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <lcd_int32+0x124>
    10e4:	00 00       	nop
    10e6:	11 11       	cpse	r17, r1
    10e8:	f2 cf       	rjmp	.-28     	; 0x10ce <lcd_int32+0x112>

}
    10ea:	69 96       	adiw	r28, 0x19	; 25
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	af 90       	pop	r10
    110a:	9f 90       	pop	r9
    110c:	8f 90       	pop	r8
    110e:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    1110:	b1 2c       	mov	r11, r1
    1112:	9e 01       	movw	r18, r28
    1114:	2f 5f       	subi	r18, 0xFF	; 255
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	69 01       	movw	r12, r18
    111a:	a3 cf       	rjmp	.-186    	; 0x1062 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    111c:	80 e3       	ldi	r24, 0x30	; 48
    111e:	c6 cf       	rjmp	.-116    	; 0x10ac <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    1120:	90 95       	com	r25
    1122:	80 95       	com	r24
    1124:	70 95       	com	r23
    1126:	61 95       	neg	r22
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	8f 4f       	sbci	r24, 0xFF	; 255
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	69 cf       	rjmp	.-302    	; 0x1002 <lcd_int32+0x46>

00001130 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
    1130:	5f 92       	push	r5
    1132:	6f 92       	push	r6
    1134:	7f 92       	push	r7
    1136:	8f 92       	push	r8
    1138:	9f 92       	push	r9
    113a:	af 92       	push	r10
    113c:	bf 92       	push	r11
    113e:	cf 92       	push	r12
    1140:	df 92       	push	r13
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	61 97       	sbiw	r28, 0x11	; 17
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	a6 2e       	mov	r10, r22
    1160:	54 2e       	mov	r5, r20
    1162:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    1164:	79 2e       	mov	r7, r25
    1166:	77 1c       	adc	r7, r7
    1168:	77 24       	eor	r7, r7
    116a:	77 1c       	adc	r7, r7
    116c:	b7 2c       	mov	r11, r7
    116e:	c7 2c       	mov	r12, r7
    1170:	d1 2c       	mov	r13, r1
    1172:	ee 27       	eor	r30, r30
    1174:	ff 27       	eor	r31, r31
    1176:	ec 19       	sub	r30, r12
    1178:	fd 09       	sbc	r31, r13
    117a:	8e 27       	eor	r24, r30
    117c:	9f 27       	eor	r25, r31
    117e:	fc 01       	movw	r30, r24
    1180:	ec 0d       	add	r30, r12
    1182:	fd 1d       	adc	r31, r13
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
    1184:	44 23       	and	r20, r20
    1186:	09 f4       	brne	.+2      	; 0x118a <lcd_int16+0x5a>
    1188:	8e c0       	rjmp	.+284    	; 0x12a6 <lcd_int16+0x176>
    118a:	ce 01       	movw	r24, r28
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	7c 01       	movw	r14, r24
    1190:	8c 01       	movw	r16, r24
    1192:	88 24       	eor	r8, r8
    1194:	8a 94       	dec	r8
    1196:	84 0e       	add	r8, r20
    1198:	91 2c       	mov	r9, r1
    119a:	9f ef       	ldi	r25, 0xFF	; 255
    119c:	89 1a       	sub	r8, r25
    119e:	99 0a       	sbc	r9, r25
    11a0:	8e 0c       	add	r8, r14
    11a2:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    11a4:	6a e0       	ldi	r22, 0x0A	; 10
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	cf 01       	movw	r24, r30
    11aa:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__divmodhi4>
    11ae:	26 2f       	mov	r18, r22
    11b0:	e2 2f       	mov	r30, r18
    11b2:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
    11b4:	80 5d       	subi	r24, 0xD0	; 208
    11b6:	d8 01       	movw	r26, r16
    11b8:	8d 93       	st	X+, r24
    11ba:	8d 01       	movw	r16, r26
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
    11bc:	a8 15       	cp	r26, r8
    11be:	b9 05       	cpc	r27, r9
    11c0:	89 f7       	brne	.-30     	; 0x11a4 <lcd_int16+0x74>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    11c2:	01 e0       	ldi	r16, 0x01	; 1
    11c4:	05 0d       	add	r16, r5
    11c6:	d7 01       	movw	r26, r14
    11c8:	a5 0d       	add	r26, r5
    11ca:	b1 1d       	adc	r27, r1
    11cc:	8e e2       	ldi	r24, 0x2E	; 46
    11ce:	8c 93       	st	X, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
    11d0:	6a e0       	ldi	r22, 0x0A	; 10
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	cf 01       	movw	r24, r30
    11d6:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__divmodhi4>
    11da:	26 2f       	mov	r18, r22
    11dc:	e2 2f       	mov	r30, r18
    11de:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
    11e0:	11 e0       	ldi	r17, 0x01	; 1
    11e2:	10 0f       	add	r17, r16
    11e4:	d7 01       	movw	r26, r14
    11e6:	a0 0f       	add	r26, r16
    11e8:	b1 1d       	adc	r27, r1
    11ea:	80 5d       	subi	r24, 0xD0	; 208
    11ec:	8c 93       	st	X, r24
    11ee:	01 2f       	mov	r16, r17
        }
        while(qr.quot);
    11f0:	30 97       	sbiw	r30, 0x00	; 0
    11f2:	71 f7       	brne	.-36     	; 0x11d0 <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
    11f4:	61 10       	cpse	r6, r1
    11f6:	15 c0       	rjmp	.+42     	; 0x1222 <lcd_int16+0xf2>
    11f8:	77 20       	and	r7, r7
    11fa:	39 f0       	breq	.+14     	; 0x120a <lcd_int16+0xda>
        {
                sline[i++] = '-';
    11fc:	11 e0       	ldi	r17, 0x01	; 1
    11fe:	10 0f       	add	r17, r16
    1200:	f7 01       	movw	r30, r14
    1202:	e0 0f       	add	r30, r16
    1204:	f1 1d       	adc	r31, r1
    1206:	8d e2       	ldi	r24, 0x2D	; 45
    1208:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    120a:	aa 20       	and	r10, r10
    120c:	41 f1       	breq	.+80     	; 0x125e <lcd_int16+0x12e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    120e:	81 2f       	mov	r24, r17
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	2a 2d       	mov	r18, r10
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	82 17       	cp	r24, r18
    1218:	93 07       	cpc	r25, r19
    121a:	0c f5       	brge	.+66     	; 0x125e <lcd_int16+0x12e>
    121c:	b1 2c       	mov	r11, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	0c c0       	rjmp	.+24     	; 0x123a <lcd_int16+0x10a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    1222:	aa 20       	and	r10, r10
    1224:	a1 f0       	breq	.+40     	; 0x124e <lcd_int16+0x11e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1226:	81 2f       	mov	r24, r17
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	2a 2d       	mov	r18, r10
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	2c 19       	sub	r18, r12
    1230:	3d 09       	sbc	r19, r13
    1232:	82 17       	cp	r24, r18
    1234:	93 07       	cpc	r25, r19
    1236:	5c f4       	brge	.+22     	; 0x124e <lcd_int16+0x11e>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1238:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    123a:	1f 5f       	subi	r17, 0xFF	; 255
    123c:	f7 01       	movw	r30, r14
    123e:	e8 0f       	add	r30, r24
    1240:	f9 1f       	adc	r31, r25
    1242:	40 83       	st	Z, r20
    1244:	81 2f       	mov	r24, r17
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	82 17       	cp	r24, r18
    124a:	93 07       	cpc	r25, r19
    124c:	b4 f3       	brlt	.-20     	; 0x123a <lcd_int16+0x10a>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
    124e:	bb 20       	and	r11, r11
    1250:	31 f0       	breq	.+12     	; 0x125e <lcd_int16+0x12e>
    1252:	f7 01       	movw	r30, r14
    1254:	e1 0f       	add	r30, r17
    1256:	f1 1d       	adc	r31, r1
    1258:	8d e2       	ldi	r24, 0x2D	; 45
    125a:	80 83       	st	Z, r24
    125c:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    125e:	11 50       	subi	r17, 0x01	; 1
    1260:	f7 01       	movw	r30, r14
    1262:	e1 0f       	add	r30, r17
    1264:	f1 1d       	adc	r31, r1
    1266:	60 81       	ld	r22, Z
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	0e 94 4a 06 	call	0xc94	; 0xc94 <send_lcd>
    126e:	95 ed       	ldi	r25, 0xD5	; 213
    1270:	9a 95       	dec	r25
    1272:	f1 f7       	brne	.-4      	; 0x1270 <lcd_int16+0x140>
    1274:	00 00       	nop
    1276:	11 11       	cpse	r17, r1
    1278:	f2 cf       	rjmp	.-28     	; 0x125e <lcd_int16+0x12e>
}
    127a:	61 96       	adiw	r28, 0x11	; 17
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	df 90       	pop	r13
    1294:	cf 90       	pop	r12
    1296:	bf 90       	pop	r11
    1298:	af 90       	pop	r10
    129a:	9f 90       	pop	r9
    129c:	8f 90       	pop	r8
    129e:	7f 90       	pop	r7
    12a0:	6f 90       	pop	r6
    12a2:	5f 90       	pop	r5
    12a4:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    12a6:	00 e0       	ldi	r16, 0x00	; 0
    12a8:	ce 01       	movw	r24, r28
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	7c 01       	movw	r14, r24
    12ae:	90 cf       	rjmp	.-224    	; 0x11d0 <lcd_int16+0xa0>

000012b0 <lm73_temp_convert>:
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

//Yeah, this is for you to do! ;^)

}//lm73_temp_convert
    12b0:	08 95       	ret

000012b2 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    12b2:	1f 92       	push	r1
    12b4:	0f 92       	push	r0
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	0f 92       	push	r0
    12ba:	11 24       	eor	r1, r1
    12bc:	0b b6       	in	r0, 0x3b	; 59
    12be:	0f 92       	push	r0
    12c0:	2f 93       	push	r18
    12c2:	3f 93       	push	r19
    12c4:	8f 93       	push	r24
    12c6:	9f 93       	push	r25
    12c8:	af 93       	push	r26
    12ca:	bf 93       	push	r27
    12cc:	ef 93       	push	r30
    12ce:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    12d0:	e0 91 71 00 	lds	r30, 0x0071
    12d4:	8e 2f       	mov	r24, r30
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	fc 01       	movw	r30, r24
    12da:	38 97       	sbiw	r30, 0x08	; 8
    12dc:	e1 35       	cpi	r30, 0x51	; 81
    12de:	f1 05       	cpc	r31, r1
    12e0:	b0 f0       	brcs	.+44     	; 0x130e <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    12e2:	80 91 71 00 	lds	r24, 0x0071
    12e6:	80 93 b3 02 	sts	0x02B3, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    12ea:	84 e0       	ldi	r24, 0x04	; 4
    12ec:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    12f0:	ff 91       	pop	r31
    12f2:	ef 91       	pop	r30
    12f4:	bf 91       	pop	r27
    12f6:	af 91       	pop	r26
    12f8:	9f 91       	pop	r25
    12fa:	8f 91       	pop	r24
    12fc:	3f 91       	pop	r19
    12fe:	2f 91       	pop	r18
    1300:	0f 90       	pop	r0
    1302:	0b be       	out	0x3b, r0	; 59
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    130e:	ea 5b       	subi	r30, 0xBA	; 186
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1316:	80 91 62 02 	lds	r24, 0x0262
    131a:	e0 91 b4 02 	lds	r30, 0x02B4
    131e:	f0 91 b5 02 	lds	r31, 0x02B5
    1322:	e8 0f       	add	r30, r24
    1324:	f1 1d       	adc	r31, r1
    1326:	80 91 73 00 	lds	r24, 0x0073
    132a:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    132c:	84 e9       	ldi	r24, 0x94	; 148
    132e:	80 93 74 00 	sts	0x0074, r24
      break;      
    1332:	de cf       	rjmp	.-68     	; 0x12f0 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    1334:	80 91 b6 02 	lds	r24, 0x02B6
    1338:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    133c:	10 92 62 02 	sts	0x0262, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    1340:	85 e8       	ldi	r24, 0x85	; 133
    1342:	80 93 74 00 	sts	0x0074, r24
      break;
    1346:	d4 cf       	rjmp	.-88     	; 0x12f0 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    1348:	80 91 62 02 	lds	r24, 0x0262
    134c:	90 91 b7 02 	lds	r25, 0x02B7
    1350:	89 17       	cp	r24, r25
    1352:	60 f7       	brcc	.-40     	; 0x132c <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    1354:	e0 91 b4 02 	lds	r30, 0x02B4
    1358:	f0 91 b5 02 	lds	r31, 0x02B5
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	98 0f       	add	r25, r24
    1360:	90 93 62 02 	sts	0x0262, r25
    1364:	e8 0f       	add	r30, r24
    1366:	f1 1d       	adc	r31, r1
    1368:	80 81       	ld	r24, Z
    136a:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
    136e:	85 e8       	ldi	r24, 0x85	; 133
    1370:	80 93 74 00 	sts	0x0074, r24
    1374:	bd cf       	rjmp	.-134    	; 0x12f0 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    1376:	85 ea       	ldi	r24, 0xA5	; 165
    1378:	80 93 74 00 	sts	0x0074, r24
      break;
    137c:	b9 cf       	rjmp	.-142    	; 0x12f0 <__vector_33+0x3e>
    137e:	20 91 62 02 	lds	r18, 0x0262
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1382:	80 91 b7 02 	lds	r24, 0x02B7
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	28 17       	cp	r18, r24
    138e:	39 07       	cpc	r19, r25
    1390:	dc f4       	brge	.+54     	; 0x13c8 <__vector_33+0x116>
    1392:	85 ec       	ldi	r24, 0xC5	; 197
    1394:	80 93 74 00 	sts	0x0074, r24
    1398:	ab cf       	rjmp	.-170    	; 0x12f0 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    139a:	e0 91 b4 02 	lds	r30, 0x02B4
    139e:	f0 91 b5 02 	lds	r31, 0x02B5
    13a2:	80 91 62 02 	lds	r24, 0x0262
    13a6:	21 e0       	ldi	r18, 0x01	; 1
    13a8:	28 0f       	add	r18, r24
    13aa:	20 93 62 02 	sts	0x0262, r18
    13ae:	e8 0f       	add	r30, r24
    13b0:	f1 1d       	adc	r31, r1
    13b2:	80 91 73 00 	lds	r24, 0x0073
    13b6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    13b8:	80 91 b7 02 	lds	r24, 0x02B7
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	28 17       	cp	r18, r24
    13c4:	39 07       	cpc	r19, r25
    13c6:	2c f3       	brlt	.-54     	; 0x1392 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    13c8:	85 e8       	ldi	r24, 0x85	; 133
    13ca:	80 93 74 00 	sts	0x0074, r24
    13ce:	90 cf       	rjmp	.-224    	; 0x12f0 <__vector_33+0x3e>

000013d0 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    13d0:	80 91 74 00 	lds	r24, 0x0074
}
    13d4:	81 70       	andi	r24, 0x01	; 1
    13d6:	08 95       	ret

000013d8 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    13d8:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    13dc:	90 fd       	sbrc	r25, 0
    13de:	fc cf       	rjmp	.-8      	; 0x13d8 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    13e0:	8e 7f       	andi	r24, 0xFE	; 254
    13e2:	80 93 b6 02 	sts	0x02B6, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    13e6:	70 93 b5 02 	sts	0x02B5, r23
    13ea:	60 93 b4 02 	sts	0x02B4, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    13ee:	40 93 b7 02 	sts	0x02B7, r20
  TWCR = TWCR_START;                    //initiate START
    13f2:	85 ea       	ldi	r24, 0xA5	; 165
    13f4:	80 93 74 00 	sts	0x0074, r24
    13f8:	08 95       	ret

000013fa <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    13fa:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    13fe:	90 fd       	sbrc	r25, 0
    1400:	fc cf       	rjmp	.-8      	; 0x13fa <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1402:	81 60       	ori	r24, 0x01	; 1
    1404:	80 93 b6 02 	sts	0x02B6, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    1408:	70 93 b5 02 	sts	0x02B5, r23
    140c:	60 93 b4 02 	sts	0x02B4, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    1410:	40 93 b7 02 	sts	0x02B7, r20
  TWCR = TWCR_START;                   //initiate START
    1414:	85 ea       	ldi	r24, 0xA5	; 165
    1416:	80 93 74 00 	sts	0x0074, r24
    141a:	08 95       	ret

0000141c <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    141c:	8f ef       	ldi	r24, 0xFF	; 255
    141e:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
    1422:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
    1426:	8c e0       	ldi	r24, 0x0C	; 12
    1428:	80 93 70 00 	sts	0x0070, r24
    142c:	08 95       	ret

0000142e <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    142e:	5d 9b       	sbis	0x0b, 5	; 11
    1430:	fe cf       	rjmp	.-4      	; 0x142e <uart_putc>
    UDR0 = data;    // Send data byte
    1432:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1434:	5d 9b       	sbis	0x0b, 5	; 11
    1436:	fe cf       	rjmp	.-4      	; 0x1434 <uart_putc+0x6>
}
    1438:	08 95       	ret

0000143a <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    143a:	90 91 9b 00 	lds	r25, 0x009B
    143e:	95 ff       	sbrs	r25, 5
    1440:	fc cf       	rjmp	.-8      	; 0x143a <uart1_putc>
    UDR1 = data;    // Send data byte
    1442:	80 93 9c 00 	sts	0x009C, r24
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1446:	80 91 9b 00 	lds	r24, 0x009B
    144a:	85 ff       	sbrs	r24, 5
    144c:	fc cf       	rjmp	.-8      	; 0x1446 <uart1_putc+0xc>
}
    144e:	08 95       	ret

00001450 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    1450:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1452:	90 81       	ld	r25, Z
    1454:	99 23       	and	r25, r25
    1456:	49 f0       	breq	.+18     	; 0x146a <uart_puts+0x1a>
    1458:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    145a:	5d 9b       	sbis	0x0b, 5	; 11
    145c:	fe cf       	rjmp	.-4      	; 0x145a <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    145e:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1460:	5d 9b       	sbis	0x0b, 5	; 11
    1462:	fe cf       	rjmp	.-4      	; 0x1460 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1464:	91 91       	ld	r25, Z+
    1466:	91 11       	cpse	r25, r1
    1468:	f8 cf       	rjmp	.-16     	; 0x145a <uart_puts+0xa>
    146a:	08 95       	ret

0000146c <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    146c:	fc 01       	movw	r30, r24
    146e:	20 81       	ld	r18, Z
    1470:	22 23       	and	r18, r18
    1472:	71 f0       	breq	.+28     	; 0x1490 <uart1_puts+0x24>
    1474:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1476:	90 91 9b 00 	lds	r25, 0x009B
    147a:	95 ff       	sbrs	r25, 5
    147c:	fc cf       	rjmp	.-8      	; 0x1476 <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
    147e:	20 93 9c 00 	sts	0x009C, r18
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1482:	90 91 9b 00 	lds	r25, 0x009B
    1486:	95 ff       	sbrs	r25, 5
    1488:	fc cf       	rjmp	.-8      	; 0x1482 <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    148a:	21 91       	ld	r18, Z+
    148c:	21 11       	cpse	r18, r1
    148e:	f3 cf       	rjmp	.-26     	; 0x1476 <uart1_puts+0xa>
    1490:	08 95       	ret

00001492 <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    1492:	9c 01       	movw	r18, r24
    1494:	fc 01       	movw	r30, r24
    1496:	44 91       	lpm	r20, Z
    1498:	44 23       	and	r20, r20
    149a:	69 f0       	breq	.+26     	; 0x14b6 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	f9 01       	movw	r30, r18
    14a0:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    14a2:	5d 9b       	sbis	0x0b, 5	; 11
    14a4:	fe cf       	rjmp	.-4      	; 0x14a2 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    14a6:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    14a8:	5d 9b       	sbis	0x0b, 5	; 11
    14aa:	fe cf       	rjmp	.-4      	; 0x14a8 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    14ac:	9c 01       	movw	r18, r24
    14ae:	fc 01       	movw	r30, r24
    14b0:	44 91       	lpm	r20, Z
    14b2:	41 11       	cpse	r20, r1
    14b4:	f3 cf       	rjmp	.-26     	; 0x149c <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    14b6:	08 95       	ret

000014b8 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
    14b8:	8a b1       	in	r24, 0x0a	; 10
    14ba:	88 69       	ori	r24, 0x98	; 152
    14bc:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    14be:	e5 e9       	ldi	r30, 0x95	; 149
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	86 60       	ori	r24, 0x06	; 6
    14c6:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    14c8:	10 92 90 00 	sts	0x0090, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    14cc:	87 e6       	ldi	r24, 0x67	; 103
    14ce:	89 b9       	out	0x09, r24	; 9
    14d0:	08 95       	ret

000014d2 <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
    14d2:	ea e9       	ldi	r30, 0x9A	; 154
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	88 61       	ori	r24, 0x18	; 24
    14da:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
    14dc:	ed e9       	ldi	r30, 0x9D	; 157
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	86 60       	ori	r24, 0x06	; 6
    14e4:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
    14e6:	10 92 98 00 	sts	0x0098, r1
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
    14ea:	87 e6       	ldi	r24, 0x67	; 103
    14ec:	80 93 99 00 	sts	0x0099, r24
    14f0:	08 95       	ret

000014f2 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    14f2:	80 e8       	ldi	r24, 0x80	; 128
    14f4:	9e e3       	ldi	r25, 0x3E	; 62
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <uart_getc+0xa>
    14f8:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    14fa:	21 f0       	breq	.+8      	; 0x1504 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    14fc:	5f 9b       	sbis	0x0b, 7	; 11
    14fe:	fc cf       	rjmp	.-8      	; 0x14f8 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    1500:	8c b1       	in	r24, 0x0c	; 12
    1502:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1504:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    1506:	08 95       	ret

00001508 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    1508:	80 e8       	ldi	r24, 0x80	; 128
    150a:	9e e3       	ldi	r25, 0x3E	; 62
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <uart1_getc+0xa>
    150e:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    1510:	39 f0       	breq	.+14     	; 0x1520 <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    1512:	20 91 9b 00 	lds	r18, 0x009B
    1516:	27 ff       	sbrs	r18, 7
    1518:	fa cf       	rjmp	.-12     	; 0x150e <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
    151a:	80 91 9c 00 	lds	r24, 0x009C
    151e:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1520:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
    1522:	08 95       	ret

00001524 <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
    1524:	84 e1       	ldi	r24, 0x14	; 20
    1526:	80 93 58 03 	sts	0x0358, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
    152a:	41 e0       	ldi	r20, 0x01	; 1
    152c:	68 e5       	ldi	r22, 0x58	; 88
    152e:	73 e0       	ldi	r23, 0x03	; 3
    1530:	82 e2       	ldi	r24, 0x22	; 34
    1532:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    1536:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <twi_busy>
    153a:	81 11       	cpse	r24, r1
    153c:	fc cf       	rjmp	.-8      	; 0x1536 <get_int_status+0x12>
    153e:	8f ea       	ldi	r24, 0xAF	; 175
    1540:	94 e0       	ldi	r25, 0x04	; 4
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <get_int_status+0x1e>
    1546:	00 c0       	rjmp	.+0      	; 0x1548 <get_int_status+0x24>
    1548:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
    154a:	41 e0       	ldi	r20, 0x01	; 1
    154c:	6a e7       	ldi	r22, 0x7A	; 122
    154e:	73 e0       	ldi	r23, 0x03	; 3
    1550:	82 e2       	ldi	r24, 0x22	; 34
    1552:	0e 94 fd 09 	call	0x13fa	; 0x13fa <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    1556:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <twi_busy>
    155a:	81 11       	cpse	r24, r1
    155c:	fc cf       	rjmp	.-8      	; 0x1556 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
    155e:	80 91 7a 03 	lds	r24, 0x037A
    1562:	08 95       	ret

00001564 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
    1564:	e8 e5       	ldi	r30, 0x58	; 88
    1566:	f3 e0       	ldi	r31, 0x03	; 3
    1568:	80 e2       	ldi	r24, 0x20	; 32
    156a:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    156c:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    156e:	80 91 94 02 	lds	r24, 0x0294
    1572:	90 91 95 02 	lds	r25, 0x0295
    1576:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    1578:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    157a:	14 82       	std	Z+4, r1	; 0x04
  //send fm tune command
  STC_interrupt = FALSE;
    157c:	10 92 79 03 	sts	0x0379, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    1580:	45 e0       	ldi	r20, 0x05	; 5
    1582:	bf 01       	movw	r22, r30
    1584:	82 e2       	ldi	r24, 0x22	; 34
    1586:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <twi_start_wr>

0000158a <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
    158a:	80 e4       	ldi	r24, 0x40	; 64
    158c:	80 93 58 03 	sts	0x0358, r24
  si4734_wr_buf[1] = 0x00;         //no FAST tune
    1590:	10 92 59 03 	sts	0x0359, r1
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
    1594:	80 91 92 02 	lds	r24, 0x0292
    1598:	90 91 93 02 	lds	r25, 0x0293
    159c:	90 93 5a 03 	sts	0x035A, r25
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
    15a0:	80 93 5b 03 	sts	0x035B, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    15a4:	10 92 5c 03 	sts	0x035C, r1
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
    15a8:	10 92 5d 03 	sts	0x035D, r1
  //send am tune command
  STC_interrupt = FALSE;
    15ac:	10 92 79 03 	sts	0x0379, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    15b0:	46 e0       	ldi	r20, 0x06	; 6
    15b2:	68 e5       	ldi	r22, 0x58	; 88
    15b4:	73 e0       	ldi	r23, 0x03	; 3
    15b6:	82 e2       	ldi	r24, 0x22	; 34
    15b8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    15bc:	80 91 79 03 	lds	r24, 0x0379
    15c0:	88 23       	and	r24, r24
    15c2:	e1 f3       	breq	.-8      	; 0x15bc <am_tune_freq+0x32>
}
    15c4:	08 95       	ret

000015c6 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
    15c6:	e8 e5       	ldi	r30, 0x58	; 88
    15c8:	f3 e0       	ldi	r31, 0x03	; 3
    15ca:	80 e4       	ldi	r24, 0x40	; 64
    15cc:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
    15ce:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
    15d0:	80 91 96 02 	lds	r24, 0x0296
    15d4:	90 91 97 02 	lds	r25, 0x0297
    15d8:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
    15da:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    15dc:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    15e2:	46 e0       	ldi	r20, 0x06	; 6
    15e4:	bf 01       	movw	r22, r30
    15e6:	82 e2       	ldi	r24, 0x22	; 34
    15e8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15ec:	2f ef       	ldi	r18, 0xFF	; 255
    15ee:	87 ee       	ldi	r24, 0xE7	; 231
    15f0:	93 e0       	ldi	r25, 0x03	; 3
    15f2:	21 50       	subi	r18, 0x01	; 1
    15f4:	80 40       	sbci	r24, 0x00	; 0
    15f6:	90 40       	sbci	r25, 0x00	; 0
    15f8:	e1 f7       	brne	.-8      	; 0x15f2 <sw_tune_freq+0x2c>
    15fa:	00 c0       	rjmp	.+0      	; 0x15fc <sw_tune_freq+0x36>
    15fc:	00 00       	nop
    15fe:	08 95       	ret

00001600 <radio_pwr_dwn>:

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
*/

//send fm power down command
    si4734_wr_buf[0] = 0x11;
    1600:	81 e1       	ldi	r24, 0x11	; 17
    1602:	80 93 58 03 	sts	0x0358, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    1606:	41 e0       	ldi	r20, 0x01	; 1
    1608:	68 e5       	ldi	r22, 0x58	; 88
    160a:	73 e0       	ldi	r23, 0x03	; 3
    160c:	82 e2       	ldi	r24, 0x22	; 34
    160e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1612:	87 ed       	ldi	r24, 0xD7	; 215
    1614:	94 e0       	ldi	r25, 0x04	; 4
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <radio_pwr_dwn+0x16>
    161a:	00 c0       	rjmp	.+0      	; 0x161c <radio_pwr_dwn+0x1c>
    161c:	00 00       	nop
    161e:	08 95       	ret

00001620 <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    1620:	83 e2       	ldi	r24, 0x23	; 35
    1622:	80 93 58 03 	sts	0x0358, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	80 93 59 03 	sts	0x0359, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    162c:	42 e0       	ldi	r20, 0x02	; 2
    162e:	68 e5       	ldi	r22, 0x58	; 88
    1630:	73 e0       	ldi	r23, 0x03	; 3
    1632:	82 e2       	ldi	r24, 0x22	; 34
    1634:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1638:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <twi_busy>
    163c:	81 11       	cpse	r24, r1
    163e:	fc cf       	rjmp	.-8      	; 0x1638 <fm_rsq_status+0x18>
    1640:	8f ea       	ldi	r24, 0xAF	; 175
    1642:	94 e0       	ldi	r25, 0x04	; 4
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <fm_rsq_status+0x24>
    1648:	00 c0       	rjmp	.+0      	; 0x164a <fm_rsq_status+0x2a>
    164a:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    164c:	48 e0       	ldi	r20, 0x08	; 8
    164e:	61 e6       	ldi	r22, 0x61	; 97
    1650:	73 e0       	ldi	r23, 0x03	; 3
    1652:	82 e2       	ldi	r24, 0x22	; 34
    1654:	0e 94 fd 09 	call	0x13fa	; 0x13fa <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1658:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <twi_busy>
    165c:	81 11       	cpse	r24, r1
    165e:	fc cf       	rjmp	.-8      	; 0x1658 <fm_rsq_status+0x38>
}
    1660:	08 95       	ret

00001662 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    1662:	82 e2       	ldi	r24, 0x22	; 34
    1664:	80 93 58 03 	sts	0x0358, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	80 93 59 03 	sts	0x0359, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    166e:	42 e0       	ldi	r20, 0x02	; 2
    1670:	68 e5       	ldi	r22, 0x58	; 88
    1672:	73 e0       	ldi	r23, 0x03	; 3
    1674:	82 e2       	ldi	r24, 0x22	; 34
    1676:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    167a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <twi_busy>
    167e:	81 11       	cpse	r24, r1
    1680:	fc cf       	rjmp	.-8      	; 0x167a <fm_tune_status+0x18>
    1682:	8f ea       	ldi	r24, 0xAF	; 175
    1684:	94 e0       	ldi	r25, 0x04	; 4
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <fm_tune_status+0x24>
    168a:	00 c0       	rjmp	.+0      	; 0x168c <fm_tune_status+0x2a>
    168c:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    168e:	48 e0       	ldi	r20, 0x08	; 8
    1690:	61 e6       	ldi	r22, 0x61	; 97
    1692:	73 e0       	ldi	r23, 0x03	; 3
    1694:	82 e2       	ldi	r24, 0x22	; 34
    1696:	0e 94 fd 09 	call	0x13fa	; 0x13fa <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    169a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <twi_busy>
    169e:	81 11       	cpse	r24, r1
    16a0:	fc cf       	rjmp	.-8      	; 0x169a <fm_tune_status+0x38>
}
    16a2:	08 95       	ret

000016a4 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    16a4:	82 e4       	ldi	r24, 0x42	; 66
    16a6:	80 93 58 03 	sts	0x0358, r24
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	80 93 59 03 	sts	0x0359, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    16b0:	42 e0       	ldi	r20, 0x02	; 2
    16b2:	68 e5       	ldi	r22, 0x58	; 88
    16b4:	73 e0       	ldi	r23, 0x03	; 3
    16b6:	82 e2       	ldi	r24, 0x22	; 34
    16b8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    16bc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <twi_busy>
    16c0:	81 11       	cpse	r24, r1
    16c2:	fc cf       	rjmp	.-8      	; 0x16bc <am_tune_status+0x18>
    16c4:	8f ea       	ldi	r24, 0xAF	; 175
    16c6:	94 e0       	ldi	r25, 0x04	; 4
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <am_tune_status+0x24>
    16cc:	00 c0       	rjmp	.+0      	; 0x16ce <am_tune_status+0x2a>
    16ce:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    16d0:	48 e0       	ldi	r20, 0x08	; 8
    16d2:	61 e6       	ldi	r22, 0x61	; 97
    16d4:	73 e0       	ldi	r23, 0x03	; 3
    16d6:	82 e2       	ldi	r24, 0x22	; 34
    16d8:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <twi_start_rd>

000016dc <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    16dc:	83 e4       	ldi	r24, 0x43	; 67
    16de:	80 93 58 03 	sts	0x0358, r24
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	80 93 59 03 	sts	0x0359, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    16e8:	42 e0       	ldi	r20, 0x02	; 2
    16ea:	68 e5       	ldi	r22, 0x58	; 88
    16ec:	73 e0       	ldi	r23, 0x03	; 3
    16ee:	82 e2       	ldi	r24, 0x22	; 34
    16f0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    16f4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <twi_busy>
    16f8:	81 11       	cpse	r24, r1
    16fa:	fc cf       	rjmp	.-8      	; 0x16f4 <am_rsq_status+0x18>
    16fc:	8f ea       	ldi	r24, 0xAF	; 175
    16fe:	94 e0       	ldi	r25, 0x04	; 4
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <am_rsq_status+0x24>
    1704:	00 c0       	rjmp	.+0      	; 0x1706 <am_rsq_status+0x2a>
    1706:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1708:	48 e0       	ldi	r20, 0x08	; 8
    170a:	61 e6       	ldi	r22, 0x61	; 97
    170c:	73 e0       	ldi	r23, 0x03	; 3
    170e:	82 e2       	ldi	r24, 0x22	; 34
    1710:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <twi_start_rd>

00001714 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    1714:	e8 e5       	ldi	r30, 0x58	; 88
    1716:	f3 e0       	ldi	r31, 0x03	; 3
    1718:	22 e1       	ldi	r18, 0x12	; 18
    171a:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    171c:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    171e:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    1720:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    1722:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    1724:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1726:	46 e0       	ldi	r20, 0x06	; 6
    1728:	bf 01       	movw	r22, r30
    172a:	82 e2       	ldi	r24, 0x22	; 34
    172c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1730:	8f e3       	ldi	r24, 0x3F	; 63
    1732:	9c e9       	ldi	r25, 0x9C	; 156
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <set_property+0x20>
    1738:	00 c0       	rjmp	.+0      	; 0x173a <set_property+0x26>
    173a:	00 00       	nop
    173c:	08 95       	ret

0000173e <fm_pwr_up>:
//restore the previous fm frequency  
 //current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
 //current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    173e:	e8 e5       	ldi	r30, 0x58	; 88
    1740:	f3 e0       	ldi	r31, 0x03	; 3
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    1746:	80 e5       	ldi	r24, 0x50	; 80
    1748:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    174a:	85 e0       	ldi	r24, 0x05	; 5
    174c:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    174e:	43 e0       	ldi	r20, 0x03	; 3
    1750:	bf 01       	movw	r22, r30
    1752:	82 e2       	ldi	r24, 0x22	; 34
    1754:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
    1758:	2f ef       	ldi	r18, 0xFF	; 255
    175a:	8c e4       	ldi	r24, 0x4C	; 76
    175c:	98 e0       	ldi	r25, 0x08	; 8
    175e:	21 50       	subi	r18, 0x01	; 1
    1760:	80 40       	sbci	r24, 0x00	; 0
    1762:	90 40       	sbci	r25, 0x00	; 0
    1764:	e1 f7       	brne	.-8      	; 0x175e <fm_pwr_up+0x20>
    1766:	00 c0       	rjmp	.+0      	; 0x1768 <fm_pwr_up+0x2a>
    1768:	00 00       	nop
  _delay_ms(170);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <set_property>

00001776 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
    1776:	8d e8       	ldi	r24, 0x8D	; 141
    1778:	92 e0       	ldi	r25, 0x02	; 2
    177a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <eeprom_read_word>
    177e:	90 93 93 02 	sts	0x0293, r25
    1782:	80 93 92 02 	sts	0x0292, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1786:	83 e6       	ldi	r24, 0x63	; 99
    1788:	92 e0       	ldi	r25, 0x02	; 2
    178a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <eeprom_read_byte>
    178e:	80 93 90 02 	sts	0x0290, r24

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    1792:	e8 e5       	ldi	r30, 0x58	; 88
    1794:	f3 e0       	ldi	r31, 0x03	; 3
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    179a:	81 e5       	ldi	r24, 0x51	; 81
    179c:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    179e:	85 e0       	ldi	r24, 0x05	; 5
    17a0:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    17a2:	43 e0       	ldi	r20, 0x03	; 3
    17a4:	bf 01       	movw	r22, r30
    17a6:	82 e2       	ldi	r24, 0x22	; 34
    17a8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
    17ac:	2f ef       	ldi	r18, 0xFF	; 255
    17ae:	8b ed       	ldi	r24, 0xDB	; 219
    17b0:	95 e0       	ldi	r25, 0x05	; 5
    17b2:	21 50       	subi	r18, 0x01	; 1
    17b4:	80 40       	sbci	r24, 0x00	; 0
    17b6:	90 40       	sbci	r25, 0x00	; 0
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <am_pwr_up+0x3c>
    17ba:	00 c0       	rjmp	.+0      	; 0x17bc <am_pwr_up+0x46>
    17bc:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    17be:	61 e0       	ldi	r22, 0x01	; 1
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <set_property>

000017ca <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    17ca:	88 e9       	ldi	r24, 0x98	; 152
    17cc:	92 e0       	ldi	r25, 0x02	; 2
    17ce:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <eeprom_read_word>
    17d2:	90 93 97 02 	sts	0x0297, r25
    17d6:	80 93 96 02 	sts	0x0296, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    17da:	83 e6       	ldi	r24, 0x63	; 99
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	0e 94 75 0e 	call	0x1cea	; 0x1cea <eeprom_read_byte>
    17e2:	80 93 90 02 	sts	0x0290, r24

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    17e6:	e8 e5       	ldi	r30, 0x58	; 88
    17e8:	f3 e0       	ldi	r31, 0x03	; 3
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    17ee:	81 e5       	ldi	r24, 0x51	; 81
    17f0:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    17f2:	85 e0       	ldi	r24, 0x05	; 5
    17f4:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    17f6:	43 e0       	ldi	r20, 0x03	; 3
    17f8:	bf 01       	movw	r22, r30
    17fa:	82 e2       	ldi	r24, 0x22	; 34
    17fc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
    1800:	2f ef       	ldi	r18, 0xFF	; 255
    1802:	8b ed       	ldi	r24, 0xDB	; 219
    1804:	95 e0       	ldi	r25, 0x05	; 5
    1806:	21 50       	subi	r18, 0x01	; 1
    1808:	80 40       	sbci	r24, 0x00	; 0
    180a:	90 40       	sbci	r25, 0x00	; 0
    180c:	e1 f7       	brne	.-8      	; 0x1806 <sw_pwr_up+0x3c>
    180e:	00 c0       	rjmp	.+0      	; 0x1810 <sw_pwr_up+0x46>
    1810:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	93 e3       	ldi	r25, 0x33	; 51
    181a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	71 e0       	ldi	r23, 0x01	; 1
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	91 e3       	ldi	r25, 0x31	; 49
    1826:	0e 94 8a 0b 	call	0x1714	; 0x1714 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <set_property>

00001836 <get_rev>:
//TODO: UNTESTED!
//Report the chip revision info via uart1. UART1 be setup and connected to 
//a dumb terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//
void get_rev(){
    si4734_wr_buf[0] = GET_REV;                   //get rev command 
    1836:	80 e1       	ldi	r24, 0x10	; 16
    1838:	80 93 58 03 	sts	0x0358, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    183c:	41 e0       	ldi	r20, 0x01	; 1
    183e:	68 e5       	ldi	r22, 0x58	; 88
    1840:	73 e0       	ldi	r23, 0x03	; 3
    1842:	82 e2       	ldi	r24, 0x22	; 34
    1844:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    1848:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <twi_busy>
    184c:	81 11       	cpse	r24, r1
    184e:	fc cf       	rjmp	.-8      	; 0x1848 <get_rev+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1850:	8f ea       	ldi	r24, 0xAF	; 175
    1852:	94 e0       	ldi	r25, 0x04	; 4
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <get_rev+0x1e>
    1858:	00 c0       	rjmp	.+0      	; 0x185a <get_rev+0x24>
    185a:	00 00       	nop
    _delay_us(300);        //wait for processing delay
//get the revision info  
    twi_start_rd(SI4734_ADDRESS, si4734_revision_buf, 8);
    185c:	48 e0       	ldi	r20, 0x08	; 8
    185e:	69 e6       	ldi	r22, 0x69	; 105
    1860:	73 e0       	ldi	r23, 0x03	; 3
    1862:	82 e2       	ldi	r24, 0x22	; 34
    1864:	0e 94 fd 09 	call	0x13fa	; 0x13fa <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    1868:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <twi_busy>
    186c:	81 11       	cpse	r24, r1
    186e:	fc cf       	rjmp	.-8      	; 0x1868 <get_rev+0x32>
//use TABs instead?
    uart1_puts("Si4734 Rev:  last 2 digits of part no.   chip rev     \n\r");
    1870:	8d e4       	ldi	r24, 0x4D	; 77
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    uart1_puts("             -------------------------   --------     \n\r");
    1878:	86 e8       	ldi	r24, 0x86	; 134
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    uart1_puts("                          "); itoa((int)si4734_revision_buf[1], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); 
    1880:	8f eb       	ldi	r24, 0xBF	; 191
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    1888:	80 91 6a 03 	lds	r24, 0x036A
    188c:	4a e0       	ldi	r20, 0x0A	; 10
    188e:	60 ee       	ldi	r22, 0xE0	; 224
    1890:	72 e0       	ldi	r23, 0x02	; 2
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__itoa_ncheck>
    1898:	80 ee       	ldi	r24, 0xE0	; 224
    189a:	92 e0       	ldi	r25, 0x02	; 2
    189c:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    uart1_puts("             "); itoa((int)si4734_revision_buf[2], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    18a0:	8c ec       	ldi	r24, 0xCC	; 204
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    18a8:	80 91 6b 03 	lds	r24, 0x036B
    18ac:	4a e0       	ldi	r20, 0x0A	; 10
    18ae:	60 ee       	ldi	r22, 0xE0	; 224
    18b0:	72 e0       	ldi	r23, 0x02	; 2
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__itoa_ncheck>
    18b8:	80 ee       	ldi	r24, 0xE0	; 224
    18ba:	92 e0       	ldi	r25, 0x02	; 2
    18bc:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    18c0:	8c eb       	ldi	r24, 0xBC	; 188
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	0c 94 36 0a 	jmp	0x146c	; 0x146c <uart1_puts>

000018c8 <get_fm_rsq_status>:
    18c8:	ff 92       	push	r15
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	a8 97       	sbiw	r28, 0x28	; 40
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	8a ed       	ldi	r24, 0xDA	; 218
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    18ea:	8a ee       	ldi	r24, 0xEA	; 234
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    18f2:	01 e6       	ldi	r16, 0x61	; 97
    18f4:	13 e0       	ldi	r17, 0x03	; 3
    18f6:	f8 01       	movw	r30, r16
    18f8:	80 81       	ld	r24, Z
    18fa:	40 e1       	ldi	r20, 0x10	; 16
    18fc:	60 ee       	ldi	r22, 0xE0	; 224
    18fe:	72 e0       	ldi	r23, 0x02	; 2
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__itoa_ncheck>
    1906:	80 ee       	ldi	r24, 0xE0	; 224
    1908:	92 e0       	ldi	r25, 0x02	; 2
    190a:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    190e:	8c eb       	ldi	r24, 0xBC	; 188
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    1916:	8a ef       	ldi	r24, 0xFA	; 250
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    191e:	f8 01       	movw	r30, r16
    1920:	81 81       	ldd	r24, Z+1	; 0x01
    1922:	4a e0       	ldi	r20, 0x0A	; 10
    1924:	60 ee       	ldi	r22, 0xE0	; 224
    1926:	72 e0       	ldi	r23, 0x02	; 2
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__itoa_ncheck>
    192e:	80 ee       	ldi	r24, 0xE0	; 224
    1930:	92 e0       	ldi	r25, 0x02	; 2
    1932:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    1936:	8c eb       	ldi	r24, 0xBC	; 188
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    193e:	f8 01       	movw	r30, r16
    1940:	f3 80       	ldd	r15, Z+3	; 0x03
    1942:	8a e0       	ldi	r24, 0x0A	; 10
    1944:	92 e0       	ldi	r25, 0x02	; 2
    1946:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    194a:	4a e0       	ldi	r20, 0x0A	; 10
    194c:	60 ee       	ldi	r22, 0xE0	; 224
    194e:	72 e0       	ldi	r23, 0x02	; 2
    1950:	8f 2d       	mov	r24, r15
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__itoa_ncheck>
    1958:	80 ee       	ldi	r24, 0xE0	; 224
    195a:	92 e0       	ldi	r25, 0x02	; 2
    195c:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    1960:	8c eb       	ldi	r24, 0xBC	; 188
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    1968:	8a e1       	ldi	r24, 0x1A	; 26
    196a:	92 e0       	ldi	r25, 0x02	; 2
    196c:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    1970:	f8 01       	movw	r30, r16
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	40 e1       	ldi	r20, 0x10	; 16
    1976:	be 01       	movw	r22, r28
    1978:	6f 5f       	subi	r22, 0xFF	; 255
    197a:	7f 4f       	sbci	r23, 0xFF	; 255
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__itoa_ncheck>
    1982:	ce 01       	movw	r24, r28
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    198a:	8c eb       	ldi	r24, 0xBC	; 188
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    1992:	8a e2       	ldi	r24, 0x2A	; 42
    1994:	92 e0       	ldi	r25, 0x02	; 2
    1996:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    199a:	f8 01       	movw	r30, r16
    199c:	83 81       	ldd	r24, Z+3	; 0x03
    199e:	40 e1       	ldi	r20, 0x10	; 16
    19a0:	be 01       	movw	r22, r28
    19a2:	6f 5f       	subi	r22, 0xFF	; 255
    19a4:	7f 4f       	sbci	r23, 0xFF	; 255
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__itoa_ncheck>
    19ac:	ce 01       	movw	r24, r28
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    19b4:	8c eb       	ldi	r24, 0xBC	; 188
    19b6:	91 e0       	ldi	r25, 0x01	; 1
    19b8:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    19bc:	8a e3       	ldi	r24, 0x3A	; 58
    19be:	92 e0       	ldi	r25, 0x02	; 2
    19c0:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    19c4:	f8 01       	movw	r30, r16
    19c6:	84 81       	ldd	r24, Z+4	; 0x04
    19c8:	40 e1       	ldi	r20, 0x10	; 16
    19ca:	60 ee       	ldi	r22, 0xE0	; 224
    19cc:	72 e0       	ldi	r23, 0x02	; 2
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__itoa_ncheck>
    19d4:	80 ee       	ldi	r24, 0xE0	; 224
    19d6:	92 e0       	ldi	r25, 0x02	; 2
    19d8:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    19dc:	8c eb       	ldi	r24, 0xBC	; 188
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	0e 94 36 0a 	call	0x146c	; 0x146c <uart1_puts>
    19e4:	a8 96       	adiw	r28, 0x28	; 40
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	1f 91       	pop	r17
    19f6:	0f 91       	pop	r16
    19f8:	ff 90       	pop	r15
    19fa:	08 95       	ret

000019fc <main>:

//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(){
  DDRB   = 0xF7; //output mode for SS, MOSI, SCLK & Pins 4-7 (7Seg & Bar Graph)
    19fc:	87 ef       	ldi	r24, 0xF7	; 247
    19fe:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); // Enable SPI, master mode, clk low on idle, leading edge sample
    1a00:	80 e5       	ldi	r24, 0x50	; 80
    1a02:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (0<<SPI2X); //No double speed operation
    1a04:	1e b8       	out	0x0e, r1	; 14
// Triggers a 1 sec TOV Interrupt.
//
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
    1a06:	80 b7       	in	r24, 0x30	; 48
    1a08:	88 60       	ori	r24, 0x08	; 8
    1a0a:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE0);  //TimerOverflow Interrupt Enable
    1a0c:	87 b7       	in	r24, 0x37	; 55
    1a0e:	81 60       	ori	r24, 0x01	; 1
    1a10:	87 bf       	out	0x37, r24	; 55
  TCCR0 =  (1<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode, 128 prescale, OC0 Disconnected
    1a12:	85 e0       	ldi	r24, 0x05	; 5
    1a14:	83 bf       	out	0x33, r24	; 51
//
// setup TCNT1 in pwm mode
// set OC1A (PB5) as pwm output
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);
    1a16:	8f b5       	in	r24, 0x2f	; 47
    1a18:	82 60       	ori	r24, 0x02	; 2
    1a1a:	8f bd       	out	0x2f, r24	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10);
    1a1c:	8e b5       	in	r24, 0x2e	; 46
    1a1e:	89 61       	ori	r24, 0x19	; 25
    1a20:	8e bd       	out	0x2e, r24	; 46
	//no forced compare
	TCCR1C = 0x00;
    1a22:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 ec       	ldi	r25, 0xC0	; 192
    1a2a:	9b bd       	out	0x2b, r25	; 43
    1a2c:	8a bd       	out	0x2a, r24	; 42
	ICR1  = 0xF000; //clear at 0xF000
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 ef       	ldi	r25, 0xF0	; 240
    1a32:	97 bd       	out	0x27, r25	; 39
    1a34:	86 bd       	out	0x26, r24	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
    1a36:	87 b7       	in	r24, 0x37	; 55
    1a38:	80 61       	ori	r24, 0x10	; 16
    1a3a:	87 bf       	out	0x37, r24	; 55
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
    1a3c:	88 e1       	ldi	r24, 0x18	; 24
    1a3e:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
    1a40:	87 b7       	in	r24, 0x37	; 55
    1a42:	8f 7e       	andi	r24, 0xEF	; 239
    1a44:	87 bf       	out	0x37, r24	; 55
//**********************************************************************
void init_tcnt2(){
// 7-Seg Brigtness PWM

  //enable interrupts for Timer/Counter2 overflow
  TIMSK |= (1<<TOIE2) | (0<<OCIE2);  //TimerOverflow Interrupt Enable
    1a46:	87 b7       	in	r24, 0x37	; 55
    1a48:	80 64       	ori	r24, 0x40	; 64
    1a4a:	87 bf       	out	0x37, r24	; 55
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (1<<CS21) | (1<<CS20);
    1a4c:	8b e7       	ldi	r24, 0x7B	; 123
    1a4e:	85 bd       	out	0x25, r24	; 37
	//Fast-PWM mode, Inverting PWM Mode, 64 prescale, OC2(PB7)(PWM) Connected
	//0-256 takes 1ms (16k CLKIO cycles)
  OCR2 =  0xF0;                   //compare at 128(50%)
    1a50:	80 ef       	ldi	r24, 0xF0	; 240
    1a52:	83 bd       	out	0x23, r24	; 35
//                            timer/counter3_init
//**********************************************************************
void init_tcnt3(){
// Volume PWM
// setup TCNT3 in pwm mode
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0) | (0<<WGM31) | (1<<WGM30);
    1a54:	80 91 8b 00 	lds	r24, 0x008B
    1a58:	81 68       	ori	r24, 0x81	; 129
    1a5a:	80 93 8b 00 	sts	0x008B, r24
	// Fast PWM, 8-Bit mode top 0x00FF
	// Clear OC3A on compare match, Fast PWM (non-inverting)
	//use ICR1 as source for TOP, use clk/1
	TCCR3B |= (0<<WGM33) | (1<< WGM32) | (1<<CS30);
    1a5e:	80 91 8a 00 	lds	r24, 0x008A
    1a62:	89 60       	ori	r24, 0x09	; 9
    1a64:	80 93 8a 00 	sts	0x008A, r24
	// No prescaling
	//no forced compare
	TCCR3C = 0x00;
    1a68:	10 92 8c 00 	sts	0x008C, r1
	//20% duty cycle, LED is a bit dimmer
	OCR3A = 0x00CD; // Initally at 50% Duty Cycle
    1a6c:	8d ec       	ldi	r24, 0xCD	; 205
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	90 93 87 00 	sts	0x0087, r25
    1a74:	80 93 86 00 	sts	0x0086, r24
	init_tcnt1(); // initalize TIMER/COUNTER1 - Alarm Tone PWM 16-Bit
	disable_tcnt1(); // stop the clock
	init_tcnt2(); // initalize TIMER/COUNTER2 - 7-Seg Brigtness PWM 8-bit
	init_tcnt3(); // initalize TIMER/COUNTER3 - Audio Volume PWM 16-bit
	
	init_twi();   // initialize TWI(I2C) interface - Temp Sensor
    1a78:	0e 94 0e 0a 	call	0x141c	; 0x141c <init_twi>
	lm73_wr_buf[0] = 0x00; //Loads the buffer with the read only temperature pointer addr
    1a7c:	10 92 af 02 	sts	0x02AF, r1
			       //The ADDR Pin is left floating for addr 0x90
	twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2); //start the TWI write process (twi_start_wr())
    1a80:	42 e0       	ldi	r20, 0x02	; 2
    1a82:	6f ea       	ldi	r22, 0xAF	; 175
    1a84:	72 e0       	ldi	r23, 0x02	; 2
    1a86:	80 e9       	ldi	r24, 0x90	; 144
    1a88:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <twi_start_wr>
	
	//ATMega48 Functions
	//USART
	uart_init();
    1a8c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <uart_init>
//                            timer/counter0_init
//**********************************************************************
void init_DDRs(){
// Add HERE
	// Set the DDR for Ports
	DDRA = DDRA_OUTPUT; // 7-Seg Data out
    1a90:	8f ef       	ldi	r24, 0xFF	; 255
    1a92:	8a bb       	out	0x1a, r24	; 26
	DDRE = (1<<PE3) | (1<<PE5) | (1<<PE6) | (1<<PE7);
    1a94:	88 ee       	ldi	r24, 0xE8	; 232
    1a96:	82 b9       	out	0x02, r24	; 2
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
    1a98:	84 e0       	ldi	r24, 0x04	; 4
    1a9a:	81 bb       	out	0x11, r24	; 17
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	84 bb       	out	0x14, r24	; 20
	incdec_mode = 0x01;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	80 93 4f 02 	sts	0x024F, r24
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
    1aa6:	85 e5       	ldi	r24, 0x55	; 85
    1aa8:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
    1aaa:	77 9b       	sbis	0x0e, 7	; 14
    1aac:	fe cf       	rjmp	.-4      	; 0x1aaa <main+0xae>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
    1aae:	8f b1       	in	r24, 0x0f	; 15
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
	incdec_mode = 0x01;
	// Read the starting encoder positions
	old_encoder = spi_rw8(0x55);
    1ab0:	80 93 4c 02 	sts	0x024C, r24
//                            init_adc
//**********************************************************************
void init_ADC(){
// ADC used to read brightness levels using a photoresistor
	//Initalize ADC and its ports
	DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input
    1ab4:	80 91 61 00 	lds	r24, 0x0061
    1ab8:	8f 77       	andi	r24, 0x7F	; 127
    1aba:	80 93 61 00 	sts	0x0061, r24
	PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
    1abe:	80 91 62 00 	lds	r24, 0x0062
    1ac2:	8f 77       	andi	r24, 0x7F	; 127
    1ac4:	80 93 62 00 	sts	0x0062, r24

	ADMUX = (1<<ADLAR) | (1<<REFS0) | (1<<MUX0) | (1<<MUX1) | (1<<MUX2);
    1ac8:	87 e6       	ldi	r24, 0x67	; 103
    1aca:	87 b9       	out	0x07, r24	; 7
	//ADMUX = (1<<MUX0) | (1<<MUX1) | (1<<MUX2)
	//single-ended, input PORTF bit 7, right adjusted, 10 bits

	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
    1acc:	87 e8       	ldi	r24, 0x87	; 135
    1ace:	86 b9       	out	0x06, r24	; 6
	//USART
	uart_init();
	
	init_DDRs(); // initalize DDRs for the display, encoders bargraph
	init_ADC();
	lcd_init(); // initialize the lcd screen
    1ad0:	0e 94 84 07 	call	0xf08	; 0xf08 <lcd_init>

	//Radio code
	EIMSK |= 0x80; //Enable int 7 mask
    1ad4:	89 b7       	in	r24, 0x39	; 57
    1ad6:	80 68       	ori	r24, 0x80	; 128
    1ad8:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1<<ISC71) | (1<<ISC70); //Set external interupt control reg B
    1ada:	8a b7       	in	r24, 0x3a	; 58
    1adc:	80 6c       	ori	r24, 0xC0	; 192
    1ade:	8a bf       	out	0x3a, r24	; 58

	//radio_reset();
	radio_reset();
    1ae0:	0e 94 2a 06 	call	0xc54	; 0xc54 <radio_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ae4:	2f ef       	ldi	r18, 0xFF	; 255
    1ae6:	81 ee       	ldi	r24, 0xE1	; 225
    1ae8:	94 e0       	ldi	r25, 0x04	; 4
    1aea:	21 50       	subi	r18, 0x01	; 1
    1aec:	80 40       	sbci	r24, 0x00	; 0
    1aee:	90 40       	sbci	r25, 0x00	; 0
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <main+0xee>
    1af2:	00 c0       	rjmp	.+0      	; 0x1af4 <main+0xf8>
    1af4:	00 00       	nop
	_delay_ms(100);


	sei(); // enable global interrupts
    1af6:	78 94       	sei


	fm_pwr_up(); //powerup the radio as appropriate
    1af8:	0e 94 9f 0b 	call	0x173e	; 0x173e <fm_pwr_up>
    1afc:	2f ef       	ldi	r18, 0xFF	; 255
    1afe:	81 ee       	ldi	r24, 0xE1	; 225
    1b00:	94 e0       	ldi	r25, 0x04	; 4
    1b02:	21 50       	subi	r18, 0x01	; 1
    1b04:	80 40       	sbci	r24, 0x00	; 0
    1b06:	90 40       	sbci	r25, 0x00	; 0
    1b08:	e1 f7       	brne	.-8      	; 0x1b02 <main+0x106>
    1b0a:	00 c0       	rjmp	.+0      	; 0x1b0c <main+0x110>
    1b0c:	00 00       	nop
	_delay_ms(100);
	current_fm_freq = 10630; //arg2, arg3: 99.9Mhz, 200khz steps
    1b0e:	86 e8       	ldi	r24, 0x86	; 134
    1b10:	99 e2       	ldi	r25, 0x29	; 41
    1b12:	90 93 95 02 	sts	0x0295, r25
    1b16:	80 93 94 02 	sts	0x0294, r24
	//current_fm_freq = 10150; //arg2, arg3: 99.9Mhz, 200khz steps
	fm_tune_freq(); //tune radio to frequency in current_fm_freq
    1b1a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fm_tune_freq>
    1b1e:	2f ef       	ldi	r18, 0xFF	; 255
    1b20:	81 ee       	ldi	r24, 0xE1	; 225
    1b22:	94 e0       	ldi	r25, 0x04	; 4
    1b24:	21 50       	subi	r18, 0x01	; 1
    1b26:	80 40       	sbci	r24, 0x00	; 0
    1b28:	90 40       	sbci	r25, 0x00	; 0
    1b2a:	e1 f7       	brne	.-8      	; 0x1b24 <main+0x128>
    1b2c:	00 c0       	rjmp	.+0      	; 0x1b2e <main+0x132>
    1b2e:	00 00       	nop
		for(;j<10;j++){
		for(;i<5;i++){
                	PORTB = i<<4 | 0<<PB7; // Select a segment
			PORTA = segment_data[i]; // Send data to the segment
			_delay_us(10); // Hold
			PORTA = 0XFF; //Seg off to reduce flicker
    1b30:	cf ef       	ldi	r28, 0xFF	; 255
	_delay_ms(100);

	while(1){                             //main while loop
	// Send the Digits to the Display
	  //break up the disp_value to 4, BCD digits in the array: call (segsum)
		segsum(clockmode);
    1b32:	80 91 4e 02 	lds	r24, 0x024E
    1b36:	0e 94 48 01 	call	0x290	; 0x290 <segsum>
	  //bound a counter (0-4) to keep track of digit to display
		i = 0;
    1b3a:	10 92 91 02 	sts	0x0291, r1
		j = 0; //Refresh the seg data less frequently
    1b3e:	10 92 66 02 	sts	0x0266, r1
	  //send 7 segment code to LED segments
		for(;j<10;j++){
    1b42:	80 91 66 02 	lds	r24, 0x0266
    1b46:	8a 30       	cpi	r24, 0x0A	; 10
    1b48:	d8 f0       	brcs	.+54     	; 0x1b80 <main+0x184>
    1b4a:	f3 cf       	rjmp	.-26     	; 0x1b32 <main+0x136>
		for(;i<5;i++){
                	PORTB = i<<4 | 0<<PB7; // Select a segment
    1b4c:	80 91 91 02 	lds	r24, 0x0291
    1b50:	82 95       	swap	r24
    1b52:	80 7f       	andi	r24, 0xF0	; 240
    1b54:	88 bb       	out	0x18, r24	; 24
			PORTA = segment_data[i]; // Send data to the segment
    1b56:	e0 91 91 02 	lds	r30, 0x0291
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	e6 56       	subi	r30, 0x66	; 102
    1b5e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b60:	80 81       	ld	r24, Z
    1b62:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b64:	25 e3       	ldi	r18, 0x35	; 53
    1b66:	2a 95       	dec	r18
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <main+0x16a>
    1b6a:	00 00       	nop
			_delay_us(10); // Hold
			PORTA = 0XFF; //Seg off to reduce flicker
    1b6c:	cb bb       	out	0x1b, r28	; 27
    1b6e:	85 e0       	ldi	r24, 0x05	; 5
    1b70:	8a 95       	dec	r24
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <main+0x174>
    1b74:	00 00       	nop
	  //bound a counter (0-4) to keep track of digit to display
		i = 0;
		j = 0; //Refresh the seg data less frequently
	  //send 7 segment code to LED segments
		for(;j<10;j++){
		for(;i<5;i++){
    1b76:	80 91 91 02 	lds	r24, 0x0291
    1b7a:	8f 5f       	subi	r24, 0xFF	; 255
    1b7c:	80 93 91 02 	sts	0x0291, r24
    1b80:	80 91 91 02 	lds	r24, 0x0291
    1b84:	85 30       	cpi	r24, 0x05	; 5
    1b86:	10 f3       	brcs	.-60     	; 0x1b4c <main+0x150>
		segsum(clockmode);
	  //bound a counter (0-4) to keep track of digit to display
		i = 0;
		j = 0; //Refresh the seg data less frequently
	  //send 7 segment code to LED segments
		for(;j<10;j++){
    1b88:	80 91 66 02 	lds	r24, 0x0266
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	80 93 66 02 	sts	0x0266, r24
    1b92:	80 91 66 02 	lds	r24, 0x0266
    1b96:	8a 30       	cpi	r24, 0x0A	; 10
    1b98:	98 f3       	brcs	.-26     	; 0x1b80 <main+0x184>
    1b9a:	cb cf       	rjmp	.-106    	; 0x1b32 <main+0x136>

00001b9c <__divmodhi4>:
    1b9c:	97 fb       	bst	r25, 7
    1b9e:	07 2e       	mov	r0, r23
    1ba0:	16 f4       	brtc	.+4      	; 0x1ba6 <__divmodhi4+0xa>
    1ba2:	00 94       	com	r0
    1ba4:	07 d0       	rcall	.+14     	; 0x1bb4 <__divmodhi4_neg1>
    1ba6:	77 fd       	sbrc	r23, 7
    1ba8:	09 d0       	rcall	.+18     	; 0x1bbc <__divmodhi4_neg2>
    1baa:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__udivmodhi4>
    1bae:	07 fc       	sbrc	r0, 7
    1bb0:	05 d0       	rcall	.+10     	; 0x1bbc <__divmodhi4_neg2>
    1bb2:	3e f4       	brtc	.+14     	; 0x1bc2 <__divmodhi4_exit>

00001bb4 <__divmodhi4_neg1>:
    1bb4:	90 95       	com	r25
    1bb6:	81 95       	neg	r24
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	08 95       	ret

00001bbc <__divmodhi4_neg2>:
    1bbc:	70 95       	com	r23
    1bbe:	61 95       	neg	r22
    1bc0:	7f 4f       	sbci	r23, 0xFF	; 255

00001bc2 <__divmodhi4_exit>:
    1bc2:	08 95       	ret

00001bc4 <__divmodsi4>:
    1bc4:	05 2e       	mov	r0, r21
    1bc6:	97 fb       	bst	r25, 7
    1bc8:	1e f4       	brtc	.+6      	; 0x1bd0 <__divmodsi4+0xc>
    1bca:	00 94       	com	r0
    1bcc:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__negsi2>
    1bd0:	57 fd       	sbrc	r21, 7
    1bd2:	07 d0       	rcall	.+14     	; 0x1be2 <__divmodsi4_neg2>
    1bd4:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__udivmodsi4>
    1bd8:	07 fc       	sbrc	r0, 7
    1bda:	03 d0       	rcall	.+6      	; 0x1be2 <__divmodsi4_neg2>
    1bdc:	4e f4       	brtc	.+18     	; 0x1bf0 <__divmodsi4_exit>
    1bde:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__negsi2>

00001be2 <__divmodsi4_neg2>:
    1be2:	50 95       	com	r21
    1be4:	40 95       	com	r20
    1be6:	30 95       	com	r19
    1be8:	21 95       	neg	r18
    1bea:	3f 4f       	sbci	r19, 0xFF	; 255
    1bec:	4f 4f       	sbci	r20, 0xFF	; 255
    1bee:	5f 4f       	sbci	r21, 0xFF	; 255

00001bf0 <__divmodsi4_exit>:
    1bf0:	08 95       	ret

00001bf2 <__negsi2>:
    1bf2:	90 95       	com	r25
    1bf4:	80 95       	com	r24
    1bf6:	70 95       	com	r23
    1bf8:	61 95       	neg	r22
    1bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1c00:	08 95       	ret

00001c02 <__tablejump2__>:
    1c02:	ee 0f       	add	r30, r30
    1c04:	ff 1f       	adc	r31, r31
    1c06:	00 24       	eor	r0, r0
    1c08:	00 1c       	adc	r0, r0
    1c0a:	0b be       	out	0x3b, r0	; 59
    1c0c:	07 90       	elpm	r0, Z+
    1c0e:	f6 91       	elpm	r31, Z
    1c10:	e0 2d       	mov	r30, r0
    1c12:	09 94       	ijmp

00001c14 <__udivmodhi4>:
    1c14:	aa 1b       	sub	r26, r26
    1c16:	bb 1b       	sub	r27, r27
    1c18:	51 e1       	ldi	r21, 0x11	; 17
    1c1a:	07 c0       	rjmp	.+14     	; 0x1c2a <__udivmodhi4_ep>

00001c1c <__udivmodhi4_loop>:
    1c1c:	aa 1f       	adc	r26, r26
    1c1e:	bb 1f       	adc	r27, r27
    1c20:	a6 17       	cp	r26, r22
    1c22:	b7 07       	cpc	r27, r23
    1c24:	10 f0       	brcs	.+4      	; 0x1c2a <__udivmodhi4_ep>
    1c26:	a6 1b       	sub	r26, r22
    1c28:	b7 0b       	sbc	r27, r23

00001c2a <__udivmodhi4_ep>:
    1c2a:	88 1f       	adc	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	5a 95       	dec	r21
    1c30:	a9 f7       	brne	.-22     	; 0x1c1c <__udivmodhi4_loop>
    1c32:	80 95       	com	r24
    1c34:	90 95       	com	r25
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	08 95       	ret

00001c3c <__udivmodsi4>:
    1c3c:	a1 e2       	ldi	r26, 0x21	; 33
    1c3e:	1a 2e       	mov	r1, r26
    1c40:	aa 1b       	sub	r26, r26
    1c42:	bb 1b       	sub	r27, r27
    1c44:	fd 01       	movw	r30, r26
    1c46:	0d c0       	rjmp	.+26     	; 0x1c62 <__udivmodsi4_ep>

00001c48 <__udivmodsi4_loop>:
    1c48:	aa 1f       	adc	r26, r26
    1c4a:	bb 1f       	adc	r27, r27
    1c4c:	ee 1f       	adc	r30, r30
    1c4e:	ff 1f       	adc	r31, r31
    1c50:	a2 17       	cp	r26, r18
    1c52:	b3 07       	cpc	r27, r19
    1c54:	e4 07       	cpc	r30, r20
    1c56:	f5 07       	cpc	r31, r21
    1c58:	20 f0       	brcs	.+8      	; 0x1c62 <__udivmodsi4_ep>
    1c5a:	a2 1b       	sub	r26, r18
    1c5c:	b3 0b       	sbc	r27, r19
    1c5e:	e4 0b       	sbc	r30, r20
    1c60:	f5 0b       	sbc	r31, r21

00001c62 <__udivmodsi4_ep>:
    1c62:	66 1f       	adc	r22, r22
    1c64:	77 1f       	adc	r23, r23
    1c66:	88 1f       	adc	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	1a 94       	dec	r1
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <__udivmodsi4_loop>
    1c6e:	60 95       	com	r22
    1c70:	70 95       	com	r23
    1c72:	80 95       	com	r24
    1c74:	90 95       	com	r25
    1c76:	9b 01       	movw	r18, r22
    1c78:	ac 01       	movw	r20, r24
    1c7a:	bd 01       	movw	r22, r26
    1c7c:	cf 01       	movw	r24, r30
    1c7e:	08 95       	ret

00001c80 <__itoa_ncheck>:
    1c80:	bb 27       	eor	r27, r27
    1c82:	4a 30       	cpi	r20, 0x0A	; 10
    1c84:	31 f4       	brne	.+12     	; 0x1c92 <__itoa_ncheck+0x12>
    1c86:	99 23       	and	r25, r25
    1c88:	22 f4       	brpl	.+8      	; 0x1c92 <__itoa_ncheck+0x12>
    1c8a:	bd e2       	ldi	r27, 0x2D	; 45
    1c8c:	90 95       	com	r25
    1c8e:	81 95       	neg	r24
    1c90:	9f 4f       	sbci	r25, 0xFF	; 255
    1c92:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__utoa_common>

00001c96 <__utoa_ncheck>:
    1c96:	bb 27       	eor	r27, r27

00001c98 <__utoa_common>:
    1c98:	fb 01       	movw	r30, r22
    1c9a:	55 27       	eor	r21, r21
    1c9c:	aa 27       	eor	r26, r26
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	aa 1f       	adc	r26, r26
    1ca4:	a4 17       	cp	r26, r20
    1ca6:	10 f0       	brcs	.+4      	; 0x1cac <__utoa_common+0x14>
    1ca8:	a4 1b       	sub	r26, r20
    1caa:	83 95       	inc	r24
    1cac:	50 51       	subi	r21, 0x10	; 16
    1cae:	b9 f7       	brne	.-18     	; 0x1c9e <__utoa_common+0x6>
    1cb0:	a0 5d       	subi	r26, 0xD0	; 208
    1cb2:	aa 33       	cpi	r26, 0x3A	; 58
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <__utoa_common+0x20>
    1cb6:	a9 5d       	subi	r26, 0xD9	; 217
    1cb8:	a1 93       	st	Z+, r26
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	79 f7       	brne	.-34     	; 0x1c9c <__utoa_common+0x4>
    1cbe:	b1 11       	cpse	r27, r1
    1cc0:	b1 93       	st	Z+, r27
    1cc2:	11 92       	st	Z+, r1
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <strrev>

00001cca <strrev>:
    1cca:	dc 01       	movw	r26, r24
    1ccc:	fc 01       	movw	r30, r24
    1cce:	67 2f       	mov	r22, r23
    1cd0:	71 91       	ld	r23, Z+
    1cd2:	77 23       	and	r23, r23
    1cd4:	e1 f7       	brne	.-8      	; 0x1cce <strrev+0x4>
    1cd6:	32 97       	sbiw	r30, 0x02	; 2
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <strrev+0x18>
    1cda:	7c 91       	ld	r23, X
    1cdc:	6d 93       	st	X+, r22
    1cde:	70 83       	st	Z, r23
    1ce0:	62 91       	ld	r22, -Z
    1ce2:	ae 17       	cp	r26, r30
    1ce4:	bf 07       	cpc	r27, r31
    1ce6:	c8 f3       	brcs	.-14     	; 0x1cda <strrev+0x10>
    1ce8:	08 95       	ret

00001cea <eeprom_read_byte>:
    1cea:	e1 99       	sbic	0x1c, 1	; 28
    1cec:	fe cf       	rjmp	.-4      	; 0x1cea <eeprom_read_byte>
    1cee:	9f bb       	out	0x1f, r25	; 31
    1cf0:	8e bb       	out	0x1e, r24	; 30
    1cf2:	e0 9a       	sbi	0x1c, 0	; 28
    1cf4:	99 27       	eor	r25, r25
    1cf6:	8d b3       	in	r24, 0x1d	; 29
    1cf8:	08 95       	ret

00001cfa <eeprom_read_word>:
    1cfa:	a8 e1       	ldi	r26, 0x18	; 24
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	42 e0       	ldi	r20, 0x02	; 2
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <eeprom_read_blraw>

00001d06 <eeprom_read_block>:
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22

00001d0a <eeprom_read_blraw>:
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	e1 99       	sbic	0x1c, 1	; 28
    1d0e:	fe cf       	rjmp	.-4      	; 0x1d0c <eeprom_read_blraw+0x2>
    1d10:	06 c0       	rjmp	.+12     	; 0x1d1e <eeprom_read_blraw+0x14>
    1d12:	ff bb       	out	0x1f, r31	; 31
    1d14:	ee bb       	out	0x1e, r30	; 30
    1d16:	e0 9a       	sbi	0x1c, 0	; 28
    1d18:	31 96       	adiw	r30, 0x01	; 1
    1d1a:	0d b2       	in	r0, 0x1d	; 29
    1d1c:	0d 92       	st	X+, r0
    1d1e:	41 50       	subi	r20, 0x01	; 1
    1d20:	50 40       	sbci	r21, 0x00	; 0
    1d22:	b8 f7       	brcc	.-18     	; 0x1d12 <eeprom_read_blraw+0x8>
    1d24:	08 95       	ret

00001d26 <_exit>:
    1d26:	f8 94       	cli

00001d28 <__stop_program>:
    1d28:	ff cf       	rjmp	.-2      	; 0x1d28 <__stop_program>
