
lab4_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000976  00000a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000976  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080012a  0080012a  00000a34  2**0
                  ALLOC
  3 .stab         000014ac  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f68  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002e48  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002e5c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_9>
  28:	0c 94 20 04 	jmp	0x840	; 0x840 <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__vector_12>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 95 03 	jmp	0x72a	; 0x72a <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 34       	cpi	r26, 0x46	; 70
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <main>
  c6:	0c 94 b9 04 	jmp	0x972	; 0x972 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:

//***********************************************************************
//                            spi_init                               
//**********************************************************************
void spi_init(){
  DDRB   = 0xF7; //output mode for SS, MOSI, SCLK & Pins 4-7 (7Seg & Bar Graph)
  ce:	87 ef       	ldi	r24, 0xF7	; 247
  d0:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); // Enable SPI, master mode, clk low on idle, leading edge sample
  d2:	80 e5       	ldi	r24, 0x50	; 80
  d4:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (0<<SPI2X); //No double speed operation
  d6:	1e b8       	out	0x0e, r1	; 14
  d8:	08 95       	ret

000000da <init_tcnt0>:
// Triggers a 1 sec TOV Interrupt.
//
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz 
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
  da:	80 b7       	in	r24, 0x30	; 48
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE0);  //TimerOverflow Interrupt Enable
  e0:	87 b7       	in	r24, 0x37	; 55
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	87 bf       	out	0x37, r24	; 55
  TCCR0 =  (1<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode, 128 prescale, OC0 Disconnected
  e6:	85 e0       	ldi	r24, 0x05	; 5
  e8:	83 bf       	out	0x33, r24	; 51
  ea:	08 95       	ret

000000ec <init_tcnt1>:
// 
// setup TCNT1 in pwm mode 
// set OC1A (PB5) as pwm output 
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP 
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);   
  ec:	8f b5       	in	r24, 0x2f	; 47
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	8f bd       	out	0x2f, r24	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10); 
  f2:	8e b5       	in	r24, 0x2e	; 46
  f4:	89 61       	ori	r24, 0x19	; 25
  f6:	8e bd       	out	0x2e, r24	; 46
	//no forced compare 
	TCCR1C = 0x00;                                
  f8:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 ec       	ldi	r25, 0xC0	; 192
 100:	9b bd       	out	0x2b, r25	; 43
 102:	8a bd       	out	0x2a, r24	; 42
	ICR1  = 0xF000; //clear at 0xF000 
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 ef       	ldi	r25, 0xF0	; 240
 108:	97 bd       	out	0x27, r25	; 39
 10a:	86 bd       	out	0x26, r24	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
 10c:	87 b7       	in	r24, 0x37	; 55
 10e:	80 61       	ori	r24, 0x10	; 16
 110:	87 bf       	out	0x37, r24	; 55
 112:	08 95       	ret

00000114 <init_tcnt2>:
// Add HERE
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz 
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE2) | (0<<OCIE2);  //TimerOverflow Interrupt Enable
 114:	87 b7       	in	r24, 0x37	; 55
 116:	80 64       	ori	r24, 0x40	; 64
 118:	87 bf       	out	0x37, r24	; 55
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (1<<CS21) | (1<<CS20);
 11a:	8b e7       	ldi	r24, 0x7B	; 123
 11c:	85 bd       	out	0x25, r24	; 37
	//Fast-PWM mode, Inverting PWM Mode, 64 prescale, OC2(PB7)(PWM) Connected
	//0-256 takes 1ms (16k CLKIO cycles)
  OCR2 =  0xF0;                   //compare at 128(50%)
 11e:	80 ef       	ldi	r24, 0xF0	; 240
 120:	83 bd       	out	0x23, r24	; 35
 122:	08 95       	ret

00000124 <init_tcnt3>:
void init_tcnt3(){
// Add HERE
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz 
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
 124:	80 b7       	in	r24, 0x30	; 48
 126:	88 60       	ori	r24, 0x08	; 8
 128:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE0);  //TimerOverflow Interrupt Enable
 12a:	87 b7       	in	r24, 0x37	; 55
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	87 bf       	out	0x37, r24	; 55
  TCCR0 =  (1<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode, 128 prescale, OC0 Disconnected
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	83 bf       	out	0x33, r24	; 51
 134:	08 95       	ret

00000136 <init_DDRs>:
//                            timer/counter0_init                               
//**********************************************************************
void init_DDRs(){
// Add HERE
	// Set the DDR for Ports	
	DDRA = DDRA_OUTPUT; // 7-Seg Data out
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	8a bb       	out	0x1a, r24	; 26
	DDRE = (1<<PE5) | (1<<PE6) | (1<<PE7); // Control for Encoders and Bargraph
 13a:	80 ee       	ldi	r24, 0xE0	; 224
 13c:	82 b9       	out	0x02, r24	; 2
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	81 bb       	out	0x11, r24	; 17
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	84 bb       	out	0x14, r24	; 20
	incdec_mode = 0x01;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 2f 01 	sts	0x012F, r24
//                            spi_read_write_8bit                               
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
 14c:	85 e5       	ldi	r24, 0x55	; 85
 14e:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}	
 150:	77 9b       	sbis	0x0e, 7	; 14
 152:	fe cf       	rjmp	.-4      	; 0x150 <init_DDRs+0x1a>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
 154:	8f b1       	in	r24, 0x0f	; 15
	DDRE = (1<<PE5) | (1<<PE6) | (1<<PE7); // Control for Encoders and Bargraph
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
	incdec_mode = 0x01;
	// Read the starting encoder positions
	old_encoder = spi_rw8(0x55);
 156:	80 93 2b 01 	sts	0x012B, r24
 15a:	08 95       	ret

0000015c <disable_tcnt1>:
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10); 
 15c:	88 e1       	ldi	r24, 0x18	; 24
 15e:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
 160:	87 b7       	in	r24, 0x37	; 55
 162:	8f 7e       	andi	r24, 0xEF	; 239
 164:	87 bf       	out	0x37, r24	; 55
 166:	08 95       	ret

00000168 <disable_timer2>:
// Add HERE
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz 
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  //enable interrupts for output compare match 0
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (0<<CS21) | (0<<CS20);
 168:	88 e7       	ldi	r24, 0x78	; 120
 16a:	85 bd       	out	0x25, r24	; 37
 16c:	08 95       	ret

0000016e <spi_rw8>:
//                            spi_read_write_8bit                               
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
 16e:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}	
 170:	77 9b       	sbis	0x0e, 7	; 14
 172:	fe cf       	rjmp	.-4      	; 0x170 <spi_rw8+0x2>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
 174:	8f b1       	in	r24, 0x0f	; 15
	return(data);
}
 176:	08 95       	ret

00000178 <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.  
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
 178:	48 2f       	mov	r20, r24
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
 17a:	e8 2f       	mov	r30, r24
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	99 b3       	in	r25, 0x19	; 25
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	ef 5c       	subi	r30, 0xCF	; 207
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	20 81       	ld	r18, Z
 18a:	31 81       	ldd	r19, Z+1	; 0x01
 18c:	22 0f       	add	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	30 6e       	ori	r19, 0xE0	; 224
 192:	89 2f       	mov	r24, r25
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <chk_buttons+0x24>
 198:	95 95       	asr	r25
 19a:	87 95       	ror	r24
 19c:	4a 95       	dec	r20
 19e:	e2 f7       	brpl	.-8      	; 0x198 <chk_buttons+0x20>
 1a0:	81 70       	andi	r24, 0x01	; 1
 1a2:	99 27       	eor	r25, r25
 1a4:	28 2b       	or	r18, r24
 1a6:	39 2b       	or	r19, r25
 1a8:	31 83       	std	Z+1, r19	; 0x01
 1aa:	20 83       	st	Z, r18
        if(state[button] == 0xF000) return 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	21 15       	cp	r18, r1
 1b0:	30 4f       	sbci	r19, 0xF0	; 240
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <chk_buttons+0x3e>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
        return 0;

//******************************************************************************
}
 1b6:	08 95       	ret

000001b8 <volume_up>:


//***********************************************************************
//                            volume_up                               
//**********************************************************************
void volume_up(){
 1b8:	08 95       	ret

000001ba <volume_down>:


//***********************************************************************
//                            volume_down                               
//**********************************************************************
void volume_down(){
 1ba:	08 95       	ret

000001bc <segsum>:
        //if(sum >= 1)(no_digits = 1);
        //if(sum >= 10)(no_digits = 2);
        //if(sum >= 100)(no_digits = 3);
        //if(sum >= 1000)(no_digits = 4);
	
	switch(xmode){
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	09 f4       	brne	.+2      	; 0x1c2 <segsum+0x6>
 1c0:	4e c0       	rjmp	.+156    	; 0x25e <segsum+0xa2>
 1c2:	08 f4       	brcc	.+2      	; 0x1c6 <segsum+0xa>
 1c4:	ac c0       	rjmp	.+344    	; 0x31e <segsum+0x162>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	19 f0       	breq	.+6      	; 0x1d0 <segsum+0x14>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	c1 f1       	breq	.+112    	; 0x23e <segsum+0x82>
 1ce:	08 95       	ret
			// Alarm armed bit into same position as L3 on 7Seg
			segment_data[3] = dec_to_7seg[((alarm_hours)/1) %10];
			segment_data[4] = dec_to_7seg[((alarm_hours)/10) %10];
			break;
		case Clock_set_mode:
			if((seconds % 2) == 1){
 1d0:	80 91 2a 01 	lds	r24, 0x012A
 1d4:	80 ff       	sbrs	r24, 0
 1d6:	37 c0       	rjmp	.+110    	; 0x246 <segsum+0x8a>
				segment_data[0] = dec_to_7seg[(mins/1) %10];
 1d8:	e0 91 02 01 	lds	r30, 0x0102
 1dc:	8d ec       	ldi	r24, 0xCD	; 205
 1de:	e8 9f       	mul	r30, r24
 1e0:	91 2d       	mov	r25, r1
 1e2:	11 24       	eor	r1, r1
 1e4:	96 95       	lsr	r25
 1e6:	96 95       	lsr	r25
 1e8:	96 95       	lsr	r25
 1ea:	2a e0       	ldi	r18, 0x0A	; 10
 1ec:	92 9f       	mul	r25, r18
 1ee:	e0 19       	sub	r30, r0
 1f0:	11 24       	eor	r1, r1
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	e3 5e       	subi	r30, 0xE3	; 227
 1f6:	fe 4f       	sbci	r31, 0xFE	; 254
 1f8:	90 81       	ld	r25, Z
 1fa:	90 93 41 01 	sts	0x0141, r25
				segment_data[1] = dec_to_7seg[(mins/10) %10];
 1fe:	e0 91 02 01 	lds	r30, 0x0102
 202:	e8 9f       	mul	r30, r24
 204:	e1 2d       	mov	r30, r1
 206:	11 24       	eor	r1, r1
 208:	e6 95       	lsr	r30
 20a:	e6 95       	lsr	r30
 20c:	e6 95       	lsr	r30
 20e:	e8 9f       	mul	r30, r24
 210:	91 2d       	mov	r25, r1
 212:	11 24       	eor	r1, r1
 214:	96 95       	lsr	r25
 216:	96 95       	lsr	r25
 218:	96 95       	lsr	r25
 21a:	2a e0       	ldi	r18, 0x0A	; 10
 21c:	92 9f       	mul	r25, r18
 21e:	e0 19       	sub	r30, r0
 220:	11 24       	eor	r1, r1
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	e3 5e       	subi	r30, 0xE3	; 227
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	90 81       	ld	r25, Z
 22a:	90 93 42 01 	sts	0x0142, r25
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
 22e:	90 91 2d 01 	lds	r25, 0x012D
 232:	99 0f       	add	r25, r25
 234:	99 0f       	add	r25, r25
 236:	90 95       	com	r25
 238:	20 91 28 01 	lds	r18, 0x0128
 23c:	a9 c0       	rjmp	.+338    	; 0x390 <segsum+0x1d4>
				segment_data[3] = SEG_OFF;
				segment_data[4] = SEG_OFF;	
			break;
			}
		case Alarm_set_mode:
			if((seconds % 2) == 1){
 23e:	80 91 2a 01 	lds	r24, 0x012A
 242:	80 fd       	sbrc	r24, 0
 244:	0c c0       	rjmp	.+24     	; 0x25e <segsum+0xa2>
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((hours)/1) %10];
				segment_data[4] = dec_to_7seg[((hours)/10) %10];
				break;
			}else{
				segment_data[0] = SEG_OFF;
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	80 93 41 01 	sts	0x0141, r24
				segment_data[1] = SEG_OFF;
 24c:	80 93 42 01 	sts	0x0142, r24
				segment_data[2] = SEG_OFF;
 250:	80 93 43 01 	sts	0x0143, r24
				segment_data[3] = SEG_OFF;
 254:	80 93 44 01 	sts	0x0144, r24
				segment_data[4] = SEG_OFF;	
 258:	80 93 45 01 	sts	0x0145, r24
			break;
 25c:	08 95       	ret
			}
		case Alarm_set_mode:
			if((seconds % 2) == 1){
				segment_data[0] = dec_to_7seg[(alarm_mins/1) %10];
 25e:	e0 91 00 01 	lds	r30, 0x0100
 262:	8d ec       	ldi	r24, 0xCD	; 205
 264:	e8 9f       	mul	r30, r24
 266:	91 2d       	mov	r25, r1
 268:	11 24       	eor	r1, r1
 26a:	96 95       	lsr	r25
 26c:	96 95       	lsr	r25
 26e:	96 95       	lsr	r25
 270:	2a e0       	ldi	r18, 0x0A	; 10
 272:	92 9f       	mul	r25, r18
 274:	e0 19       	sub	r30, r0
 276:	11 24       	eor	r1, r1
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	e3 5e       	subi	r30, 0xE3	; 227
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	90 81       	ld	r25, Z
 280:	90 93 41 01 	sts	0x0141, r25
				segment_data[1] = dec_to_7seg[(alarm_mins/10) %10];
 284:	e0 91 00 01 	lds	r30, 0x0100
 288:	e8 9f       	mul	r30, r24
 28a:	e1 2d       	mov	r30, r1
 28c:	11 24       	eor	r1, r1
 28e:	e6 95       	lsr	r30
 290:	e6 95       	lsr	r30
 292:	e6 95       	lsr	r30
 294:	e8 9f       	mul	r30, r24
 296:	91 2d       	mov	r25, r1
 298:	11 24       	eor	r1, r1
 29a:	96 95       	lsr	r25
 29c:	96 95       	lsr	r25
 29e:	96 95       	lsr	r25
 2a0:	2a e0       	ldi	r18, 0x0A	; 10
 2a2:	92 9f       	mul	r25, r18
 2a4:	e0 19       	sub	r30, r0
 2a6:	11 24       	eor	r1, r1
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	e3 5e       	subi	r30, 0xE3	; 227
 2ac:	fe 4f       	sbci	r31, 0xFE	; 254
 2ae:	90 81       	ld	r25, Z
 2b0:	90 93 42 01 	sts	0x0142, r25
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
 2b4:	90 91 2d 01 	lds	r25, 0x012D
 2b8:	99 0f       	add	r25, r25
 2ba:	99 0f       	add	r25, r25
 2bc:	90 95       	com	r25
 2be:	20 91 28 01 	lds	r18, 0x0128
 2c2:	92 23       	and	r25, r18
 2c4:	90 93 43 01 	sts	0x0143, r25
				//in dec_to_7seg index 11 = OFF, index 12 = Colon
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((alarm_hours)/1) %10];
 2c8:	e0 91 01 01 	lds	r30, 0x0101
 2cc:	e8 9f       	mul	r30, r24
 2ce:	91 2d       	mov	r25, r1
 2d0:	11 24       	eor	r1, r1
 2d2:	96 95       	lsr	r25
 2d4:	96 95       	lsr	r25
 2d6:	96 95       	lsr	r25
 2d8:	2a e0       	ldi	r18, 0x0A	; 10
 2da:	92 9f       	mul	r25, r18
 2dc:	e0 19       	sub	r30, r0
 2de:	11 24       	eor	r1, r1
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	e3 5e       	subi	r30, 0xE3	; 227
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	90 81       	ld	r25, Z
 2e8:	90 93 44 01 	sts	0x0144, r25
				segment_data[4] = dec_to_7seg[((alarm_hours)/10) %10];
 2ec:	e0 91 01 01 	lds	r30, 0x0101
 2f0:	e8 9f       	mul	r30, r24
 2f2:	e1 2d       	mov	r30, r1
 2f4:	11 24       	eor	r1, r1
 2f6:	e6 95       	lsr	r30
 2f8:	e6 95       	lsr	r30
 2fa:	e6 95       	lsr	r30
 2fc:	e8 9f       	mul	r30, r24
 2fe:	81 2d       	mov	r24, r1
 300:	11 24       	eor	r1, r1
 302:	86 95       	lsr	r24
 304:	86 95       	lsr	r24
 306:	86 95       	lsr	r24
 308:	9a e0       	ldi	r25, 0x0A	; 10
 30a:	89 9f       	mul	r24, r25
 30c:	e0 19       	sub	r30, r0
 30e:	11 24       	eor	r1, r1
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	e3 5e       	subi	r30, 0xE3	; 227
 314:	fe 4f       	sbci	r31, 0xFE	; 254
 316:	80 81       	ld	r24, Z
 318:	80 93 45 01 	sts	0x0145, r24
 31c:	08 95       	ret
	
	switch(xmode){
		case Clock_mode:
		  	//break up decimal sum into 4 digit-segment   
			//The digits (0-9) are used as the index for the seven segment representation
			segment_data[0] = dec_to_7seg[(mins/1) %10];
 31e:	e0 91 02 01 	lds	r30, 0x0102
 322:	8d ec       	ldi	r24, 0xCD	; 205
 324:	e8 9f       	mul	r30, r24
 326:	91 2d       	mov	r25, r1
 328:	11 24       	eor	r1, r1
 32a:	96 95       	lsr	r25
 32c:	96 95       	lsr	r25
 32e:	96 95       	lsr	r25
 330:	2a e0       	ldi	r18, 0x0A	; 10
 332:	92 9f       	mul	r25, r18
 334:	e0 19       	sub	r30, r0
 336:	11 24       	eor	r1, r1
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	e3 5e       	subi	r30, 0xE3	; 227
 33c:	fe 4f       	sbci	r31, 0xFE	; 254
 33e:	90 81       	ld	r25, Z
 340:	90 93 41 01 	sts	0x0141, r25
			segment_data[1] = dec_to_7seg[(mins/10) %10];
 344:	e0 91 02 01 	lds	r30, 0x0102
 348:	e8 9f       	mul	r30, r24
 34a:	e1 2d       	mov	r30, r1
 34c:	11 24       	eor	r1, r1
 34e:	e6 95       	lsr	r30
 350:	e6 95       	lsr	r30
 352:	e6 95       	lsr	r30
 354:	e8 9f       	mul	r30, r24
 356:	91 2d       	mov	r25, r1
 358:	11 24       	eor	r1, r1
 35a:	96 95       	lsr	r25
 35c:	96 95       	lsr	r25
 35e:	96 95       	lsr	r25
 360:	2a e0       	ldi	r18, 0x0A	; 10
 362:	92 9f       	mul	r25, r18
 364:	e0 19       	sub	r30, r0
 366:	11 24       	eor	r1, r1
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	e3 5e       	subi	r30, 0xE3	; 227
 36c:	fe 4f       	sbci	r31, 0xFE	; 254
 36e:	90 81       	ld	r25, Z
 370:	90 93 42 01 	sts	0x0142, r25
			if((xmode == Clock_mode)){
				segment_data[2] = dec_to_7seg[10 + (seconds % 2)] & (~(alarm_armed<<2));
 374:	40 91 2a 01 	lds	r20, 0x012A
 378:	90 91 2d 01 	lds	r25, 0x012D
 37c:	24 2f       	mov	r18, r20
 37e:	21 70       	andi	r18, 0x01	; 1
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	f9 01       	movw	r30, r18
 384:	e3 5e       	subi	r30, 0xE3	; 227
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	99 0f       	add	r25, r25
 38a:	99 0f       	add	r25, r25
 38c:	90 95       	com	r25
 38e:	22 85       	ldd	r18, Z+10	; 0x0a
			break;
		case Clock_set_mode:
			if((seconds % 2) == 1){
				segment_data[0] = dec_to_7seg[(mins/1) %10];
				segment_data[1] = dec_to_7seg[(mins/10) %10];
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
 390:	92 23       	and	r25, r18
 392:	90 93 43 01 	sts	0x0143, r25
				//in dec_to_7seg index 11 = OFF, index 12 = Colon
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((hours)/1) %10];
 396:	e0 91 03 01 	lds	r30, 0x0103
 39a:	e8 9f       	mul	r30, r24
 39c:	91 2d       	mov	r25, r1
 39e:	11 24       	eor	r1, r1
 3a0:	96 95       	lsr	r25
 3a2:	96 95       	lsr	r25
 3a4:	96 95       	lsr	r25
 3a6:	2a e0       	ldi	r18, 0x0A	; 10
 3a8:	92 9f       	mul	r25, r18
 3aa:	e0 19       	sub	r30, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	e3 5e       	subi	r30, 0xE3	; 227
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	90 81       	ld	r25, Z
 3b6:	90 93 44 01 	sts	0x0144, r25
				segment_data[4] = dec_to_7seg[((hours)/10) %10];
 3ba:	e0 91 03 01 	lds	r30, 0x0103
 3be:	98 cf       	rjmp	.-208    	; 0x2f0 <segsum+0x134>

000003c0 <encoders>:
	// The direction is determined by a state machine look up table 0=no change
	// 1=CCW, 2=CW
	//The old encoder value is place in posistion in b2 b3, 0x03 masks out other 1's	

	uint8_t direction = 0;
	switch(clockmode){
 3c0:	80 91 2e 01 	lds	r24, 0x012E
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	09 f4       	brne	.+2      	; 0x3ca <encoders+0xa>
 3c8:	40 c0       	rjmp	.+128    	; 0x44a <encoders+0x8a>
 3ca:	83 30       	cpi	r24, 0x03	; 3
 3cc:	c9 f5       	brne	.+114    	; 0x440 <encoders+0x80>
					break;
			}
			break;
		case Alarm_set_mode:
			//Check encoder 1
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
 3ce:	e0 91 2b 01 	lds	r30, 0x012B
 3d2:	80 91 2c 01 	lds	r24, 0x012C
 3d6:	e3 70       	andi	r30, 0x03	; 3
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	83 70       	andi	r24, 0x03	; 3
 3e4:	e8 2b       	or	r30, r24
 3e6:	ec 5f       	subi	r30, 0xFC	; 252
 3e8:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
 3ea:	80 81       	ld	r24, Z
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <encoders+0x32>
 3f0:	84 c0       	rjmp	.+264    	; 0x4fa <encoders+0x13a>
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	51 f4       	brne	.+20     	; 0x40a <encoders+0x4a>
					}else{
						alarm_mins = 59;
					}					
					break;
				case 2:
					if(alarm_mins < 59){
 3f6:	80 91 00 01 	lds	r24, 0x0100
 3fa:	8b 33       	cpi	r24, 0x3B	; 59
 3fc:	08 f0       	brcs	.+2      	; 0x400 <encoders+0x40>
 3fe:	8a c0       	rjmp	.+276    	; 0x514 <encoders+0x154>
						alarm_mins = alarm_mins + 1;
 400:	80 91 00 01 	lds	r24, 0x0100
 404:	8f 5f       	subi	r24, 0xFF	; 255
 406:	80 93 00 01 	sts	0x0100, r24
					break;
			}
			

			//Check encoder 2
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
 40a:	80 91 2b 01 	lds	r24, 0x012B
 40e:	e0 91 2c 01 	lds	r30, 0x012C
 412:	ec 70       	andi	r30, 0x0C	; 12
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	f5 95       	asr	r31
 418:	e7 95       	ror	r30
 41a:	f5 95       	asr	r31
 41c:	e7 95       	ror	r30
 41e:	8c 70       	andi	r24, 0x0C	; 12
 420:	e8 2b       	or	r30, r24
 422:	ec 5f       	subi	r30, 0xFC	; 252
 424:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
 426:	80 81       	ld	r24, Z
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	09 f4       	brne	.+2      	; 0x42e <encoders+0x6e>
 42c:	5c c0       	rjmp	.+184    	; 0x4e6 <encoders+0x126>
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	39 f4       	brne	.+14     	; 0x440 <encoders+0x80>
					}else{
						alarm_hours = 23;
					}					
					break;
				case 2:
					if(alarm_hours < 23){
 432:	80 91 01 01 	lds	r24, 0x0101
 436:	87 31       	cpi	r24, 0x17	; 23
 438:	08 f4       	brcc	.+2      	; 0x43c <encoders+0x7c>
 43a:	82 c0       	rjmp	.+260    	; 0x540 <encoders+0x180>
						alarm_hours = alarm_hours + 1;
					}else{
						alarm_hours = 0;
 43c:	10 92 01 01 	sts	0x0101, r1
			break;
		default:
			break;
	}
	//Replace the old encoder value
	old_encoder = encoder;
 440:	80 91 2c 01 	lds	r24, 0x012C
 444:	80 93 2b 01 	sts	0x012B, r24
 448:	08 95       	ret
		case Alarm_mode:
			// Do Nothing
			break;
		case Clock_set_mode:
			//Check encoder 1
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
 44a:	e0 91 2b 01 	lds	r30, 0x012B
 44e:	80 91 2c 01 	lds	r24, 0x012C
 452:	e3 70       	andi	r30, 0x03	; 3
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	ee 0f       	add	r30, r30
 458:	ff 1f       	adc	r31, r31
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	83 70       	andi	r24, 0x03	; 3
 460:	e8 2b       	or	r30, r24
 462:	ec 5f       	subi	r30, 0xFC	; 252
 464:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
 466:	80 81       	ld	r24, Z
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	49 f1       	breq	.+82     	; 0x4be <encoders+0xfe>
 46c:	82 30       	cpi	r24, 0x02	; 2
 46e:	51 f4       	brne	.+20     	; 0x484 <encoders+0xc4>
					}else{
						mins = 59;
					}					
					break;
				case 2:
					if(mins < 59){
 470:	80 91 02 01 	lds	r24, 0x0102
 474:	8b 33       	cpi	r24, 0x3B	; 59
 476:	08 f0       	brcs	.+2      	; 0x47a <encoders+0xba>
 478:	54 c0       	rjmp	.+168    	; 0x522 <encoders+0x162>
						mins = mins + 1;
 47a:	80 91 02 01 	lds	r24, 0x0102
 47e:	8f 5f       	subi	r24, 0xFF	; 255
 480:	80 93 02 01 	sts	0x0102, r24
					break;
			}
			

			//Check encoder 2
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
 484:	80 91 2b 01 	lds	r24, 0x012B
 488:	e0 91 2c 01 	lds	r30, 0x012C
 48c:	ec 70       	andi	r30, 0x0C	; 12
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	f5 95       	asr	r31
 492:	e7 95       	ror	r30
 494:	f5 95       	asr	r31
 496:	e7 95       	ror	r30
 498:	8c 70       	andi	r24, 0x0C	; 12
 49a:	e8 2b       	or	r30, r24
 49c:	ec 5f       	subi	r30, 0xFC	; 252
 49e:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
 4a0:	80 81       	ld	r24, Z
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	b1 f0       	breq	.+44     	; 0x4d2 <encoders+0x112>
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	59 f6       	brne	.-106    	; 0x440 <encoders+0x80>
					}else{
						hours = 23;
					}					
					break;
				case 2:
					if(hours < 23){
 4aa:	80 91 03 01 	lds	r24, 0x0103
 4ae:	87 31       	cpi	r24, 0x17	; 23
 4b0:	70 f5       	brcc	.+92     	; 0x50e <encoders+0x14e>
						hours = hours + 1;
 4b2:	80 91 03 01 	lds	r24, 0x0103
 4b6:	8f 5f       	subi	r24, 0xFF	; 255
 4b8:	80 93 03 01 	sts	0x0103, r24
 4bc:	c1 cf       	rjmp	.-126    	; 0x440 <encoders+0x80>
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(mins > 0){
 4be:	80 91 02 01 	lds	r24, 0x0102
 4c2:	88 23       	and	r24, r24
 4c4:	a9 f1       	breq	.+106    	; 0x530 <encoders+0x170>
						mins = mins - 1;
 4c6:	80 91 02 01 	lds	r24, 0x0102
 4ca:	81 50       	subi	r24, 0x01	; 1
 4cc:	80 93 02 01 	sts	0x0102, r24
 4d0:	d9 cf       	rjmp	.-78     	; 0x484 <encoders+0xc4>
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(hours > 0){
 4d2:	80 91 03 01 	lds	r24, 0x0103
 4d6:	88 23       	and	r24, r24
 4d8:	39 f1       	breq	.+78     	; 0x528 <encoders+0x168>
						hours = hours - 1;
 4da:	80 91 03 01 	lds	r24, 0x0103
 4de:	81 50       	subi	r24, 0x01	; 1
 4e0:	80 93 03 01 	sts	0x0103, r24
 4e4:	ad cf       	rjmp	.-166    	; 0x440 <encoders+0x80>
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(alarm_hours > 0){
 4e6:	80 91 01 01 	lds	r24, 0x0101
 4ea:	88 23       	and	r24, r24
 4ec:	29 f1       	breq	.+74     	; 0x538 <encoders+0x178>
						alarm_hours = alarm_hours - 1;
 4ee:	80 91 01 01 	lds	r24, 0x0101
 4f2:	81 50       	subi	r24, 0x01	; 1
 4f4:	80 93 01 01 	sts	0x0101, r24
 4f8:	a3 cf       	rjmp	.-186    	; 0x440 <encoders+0x80>
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(alarm_mins > 0){
 4fa:	80 91 00 01 	lds	r24, 0x0100
 4fe:	88 23       	and	r24, r24
 500:	61 f0       	breq	.+24     	; 0x51a <encoders+0x15a>
						alarm_mins = alarm_mins - 1;
 502:	80 91 00 01 	lds	r24, 0x0100
 506:	81 50       	subi	r24, 0x01	; 1
 508:	80 93 00 01 	sts	0x0100, r24
 50c:	7e cf       	rjmp	.-260    	; 0x40a <encoders+0x4a>
					break;
				case 2:
					if(hours < 23){
						hours = hours + 1;
					}else{
						hours = 0;
 50e:	10 92 03 01 	sts	0x0103, r1
 512:	96 cf       	rjmp	.-212    	; 0x440 <encoders+0x80>
					break;
				case 2:
					if(alarm_mins < 59){
						alarm_mins = alarm_mins + 1;
					}else{
						alarm_mins = 0;
 514:	10 92 00 01 	sts	0x0100, r1
 518:	78 cf       	rjmp	.-272    	; 0x40a <encoders+0x4a>
					break;
				case 1:
					if(alarm_mins > 0){
						alarm_mins = alarm_mins - 1;
					}else{
						alarm_mins = 59;
 51a:	8b e3       	ldi	r24, 0x3B	; 59
 51c:	80 93 00 01 	sts	0x0100, r24
 520:	74 cf       	rjmp	.-280    	; 0x40a <encoders+0x4a>
					break;
				case 2:
					if(mins < 59){
						mins = mins + 1;
					}else{
						mins = 0;
 522:	10 92 02 01 	sts	0x0102, r1
 526:	ae cf       	rjmp	.-164    	; 0x484 <encoders+0xc4>
					break;
				case 1:
					if(hours > 0){
						hours = hours - 1;
					}else{
						hours = 23;
 528:	87 e1       	ldi	r24, 0x17	; 23
 52a:	80 93 03 01 	sts	0x0103, r24
 52e:	88 cf       	rjmp	.-240    	; 0x440 <encoders+0x80>
					break;
				case 1:
					if(mins > 0){
						mins = mins - 1;
					}else{
						mins = 59;
 530:	8b e3       	ldi	r24, 0x3B	; 59
 532:	80 93 02 01 	sts	0x0102, r24
 536:	a6 cf       	rjmp	.-180    	; 0x484 <encoders+0xc4>
					break;
				case 1:
					if(alarm_hours > 0){
						alarm_hours = alarm_hours - 1;
					}else{
						alarm_hours = 23;
 538:	87 e1       	ldi	r24, 0x17	; 23
 53a:	80 93 01 01 	sts	0x0101, r24
 53e:	80 cf       	rjmp	.-256    	; 0x440 <encoders+0x80>
					}					
					break;
				case 2:
					if(alarm_hours < 23){
						alarm_hours = alarm_hours + 1;
 540:	80 91 01 01 	lds	r24, 0x0101
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	80 93 01 01 	sts	0x0101, r24
 54a:	7a cf       	rjmp	.-268    	; 0x440 <encoders+0x80>

0000054c <check_user_input>:


//***********************************************************************
//                            Check Buttons/Encoders                         
//**********************************************************************
void check_user_input(){
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
	//Checks the state of the buttons and encoders
	//Output
  //Read the buttons
        PORTB = PORTB | (1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7);
 554:	88 b3       	in	r24, 0x18	; 24
 556:	80 6f       	ori	r24, 0xF0	; 240
 558:	88 bb       	out	0x18, r24	; 24
	// Select 7 - Enable Tristates on Button Board

	DDRA = 0x00; // PortA as an input from buttons
 55a:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; // PortA enable Pull Ups
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 560:	45 e0       	ldi	r20, 0x05	; 5
 562:	4a 95       	dec	r20
 564:	f1 f7       	brne	.-4      	; 0x562 <check_user_input+0x16>
 566:	00 00       	nop
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
 568:	49 b3       	in	r20, 0x19	; 25
 56a:	80 91 31 01 	lds	r24, 0x0131
 56e:	90 91 32 01 	lds	r25, 0x0132
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	90 6e       	ori	r25, 0xE0	; 224
 578:	41 70       	andi	r20, 0x01	; 1
 57a:	c4 2f       	mov	r28, r20
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	d4 2f       	mov	r29, r20
 580:	8c 2b       	or	r24, r28
 582:	9d 2b       	or	r25, r29
 584:	90 93 32 01 	sts	0x0132, r25
 588:	80 93 31 01 	sts	0x0131, r24
        if(state[button] == 0xF000) return 1;
 58c:	81 15       	cp	r24, r1
 58e:	90 4f       	sbci	r25, 0xF0	; 240
 590:	09 f4       	brne	.+2      	; 0x594 <check_user_input+0x48>
 592:	8b c0       	rjmp	.+278    	; 0x6aa <check_user_input+0x15e>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
 594:	89 b3       	in	r24, 0x19	; 25
 596:	40 91 33 01 	lds	r20, 0x0133
 59a:	50 91 34 01 	lds	r21, 0x0134
 59e:	44 0f       	add	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	50 6e       	ori	r21, 0xE0	; 224
 5a4:	81 fb       	bst	r24, 1
 5a6:	00 27       	eor	r16, r16
 5a8:	00 f9       	bld	r16, 0
 5aa:	10 e0       	ldi	r17, 0x00	; 0
 5ac:	40 2b       	or	r20, r16
 5ae:	51 2b       	or	r21, r17
 5b0:	50 93 34 01 	sts	0x0134, r21
 5b4:	40 93 33 01 	sts	0x0133, r20
 5b8:	49 b3       	in	r20, 0x19	; 25
 5ba:	80 91 35 01 	lds	r24, 0x0135
 5be:	90 91 36 01 	lds	r25, 0x0136
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	90 6e       	ori	r25, 0xE0	; 224
 5c8:	42 fb       	bst	r20, 2
 5ca:	aa 27       	eor	r26, r26
 5cc:	a0 f9       	bld	r26, 0
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	8a 2b       	or	r24, r26
 5d2:	9b 2b       	or	r25, r27
 5d4:	90 93 36 01 	sts	0x0136, r25
 5d8:	80 93 35 01 	sts	0x0135, r24
 5dc:	89 b3       	in	r24, 0x19	; 25
 5de:	40 91 37 01 	lds	r20, 0x0137
 5e2:	50 91 38 01 	lds	r21, 0x0138
 5e6:	44 0f       	add	r20, r20
 5e8:	55 1f       	adc	r21, r21
 5ea:	50 6e       	ori	r21, 0xE0	; 224
 5ec:	83 fb       	bst	r24, 3
 5ee:	22 27       	eor	r18, r18
 5f0:	20 f9       	bld	r18, 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	42 2b       	or	r20, r18
 5f6:	53 2b       	or	r21, r19
 5f8:	50 93 38 01 	sts	0x0138, r21
 5fc:	40 93 37 01 	sts	0x0137, r20
 600:	89 b3       	in	r24, 0x19	; 25
 602:	20 91 39 01 	lds	r18, 0x0139
 606:	30 91 3a 01 	lds	r19, 0x013A
 60a:	22 0f       	add	r18, r18
 60c:	33 1f       	adc	r19, r19
 60e:	30 6e       	ori	r19, 0xE0	; 224
 610:	84 fb       	bst	r24, 4
 612:	ee 27       	eor	r30, r30
 614:	e0 f9       	bld	r30, 0
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	2e 2b       	or	r18, r30
 61a:	3f 2b       	or	r19, r31
 61c:	30 93 3a 01 	sts	0x013A, r19
 620:	20 93 39 01 	sts	0x0139, r18
        if(state[button] == 0xF000) return 1;
 624:	21 15       	cp	r18, r1
 626:	30 4f       	sbci	r19, 0xF0	; 240
 628:	09 f4       	brne	.+2      	; 0x62c <check_user_input+0xe0>
 62a:	50 c0       	rjmp	.+160    	; 0x6cc <check_user_input+0x180>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
 62c:	29 b3       	in	r18, 0x19	; 25
 62e:	80 91 3b 01 	lds	r24, 0x013B
 632:	90 91 3c 01 	lds	r25, 0x013C
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	90 6e       	ori	r25, 0xE0	; 224
 63c:	25 fb       	bst	r18, 5
 63e:	66 27       	eor	r22, r22
 640:	60 f9       	bld	r22, 0
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	86 2b       	or	r24, r22
 646:	97 2b       	or	r25, r23
 648:	90 93 3c 01 	sts	0x013C, r25
 64c:	80 93 3b 01 	sts	0x013B, r24
        if(state[button] == 0xF000) return 1;
 650:	81 15       	cp	r24, r1
 652:	90 4f       	sbci	r25, 0xF0	; 240
 654:	89 f1       	breq	.+98     	; 0x6b8 <check_user_input+0x16c>
                clockmode = Alarm_set_mode;
		alarm_armed ^= 0x01; 
		// Toggle the arming of the alarm
        }
	// Turn off the button board PWM high	
	PORTB &= ~((1<<PB4) | (1<<PB5) | (1<<PB6) | (0<<PB7));
 656:	88 b3       	in	r24, 0x18	; 24
 658:	8f 78       	andi	r24, 0x8F	; 143
 65a:	88 bb       	out	0x18, r24	; 24

	DDRA = 0xFF; //DDRA Output
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //Turn Off The 7Seg
 660:	8b bb       	out	0x1b, r24	; 27
	
  // Send info to the bargraph (Sending info will read in encoders)
	PORTD &= ~(1<<PD2); //Storage Reg for HC595 low
 662:	92 98       	cbi	0x12, 2	; 18
	PORTE &= ~((1<<PE6) | (1<<PE7) | (1<<PE5)); //Encoder Shift Reg Clk en Low, Load Mode
 664:	83 b1       	in	r24, 0x03	; 3
 666:	8f 71       	andi	r24, 0x1F	; 31
 668:	83 b9       	out	0x03, r24	; 3
	PORTE |= (1<<PE7); //Shift Mode
 66a:	1f 9a       	sbi	0x03, 7	; 3
	encoder = spi_rw8(incdec_to_bargraph[clockmode]); // Send SPI_8bit
 66c:	e0 91 2e 01 	lds	r30, 0x012E
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	e8 5e       	subi	r30, 0xE8	; 232
 674:	fe 4f       	sbci	r31, 0xFE	; 254
 676:	80 81       	ld	r24, Z
//                            spi_read_write_8bit                               
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
 678:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}	
 67a:	77 9b       	sbis	0x0e, 7	; 14
 67c:	fe cf       	rjmp	.-4      	; 0x67a <check_user_input+0x12e>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
 67e:	8f b1       	in	r24, 0x0f	; 15
	
  // Send info to the bargraph (Sending info will read in encoders)
	PORTD &= ~(1<<PD2); //Storage Reg for HC595 low
	PORTE &= ~((1<<PE6) | (1<<PE7) | (1<<PE5)); //Encoder Shift Reg Clk en Low, Load Mode
	PORTE |= (1<<PE7); //Shift Mode
	encoder = spi_rw8(incdec_to_bargraph[clockmode]); // Send SPI_8bit
 680:	80 93 2c 01 	sts	0x012C, r24
	//spi_rw8(0xF0); 			//Test line
	
  // Check the encoders
	if(encoder != old_encoder){
 684:	90 91 2c 01 	lds	r25, 0x012C
 688:	80 91 2b 01 	lds	r24, 0x012B
 68c:	98 13       	cpse	r25, r24
		// Change in the encoder position
		encoders();
 68e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <encoders>
	}	
  // Return the to original states
	PORTD |= (1<<PD2); //SS_Bar Low
 692:	92 9a       	sbi	0x12, 2	; 18
	PORTE |= (1<<PE6) | (1<<PE7) | (0<<PE5); //Clk enable high, Shift mode
 694:	83 b1       	in	r24, 0x03	; 3
 696:	80 6c       	ori	r24, 0xC0	; 192
 698:	83 b9       	out	0x03, r24	; 3
	PORTB &= ~((1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7)); // Sel 0
 69a:	88 b3       	in	r24, 0x18	; 24
 69c:	8f 70       	andi	r24, 0x0F	; 15
 69e:	88 bb       	out	0x18, r24	; 24
  // Disable the button board tristates
}
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	1f 91       	pop	r17
 6a6:	0f 91       	pop	r16
 6a8:	08 95       	ret
	DDRA = 0x00; // PortA as an input from buttons
	PORTA = 0xFF; // PortA enable Pull Ups
	
	_delay_us(1); 				//Test Wait
        if(chk_buttons(0)){
		clockmode = (clockmode ^ 0X01) & 0x01; // Toggle bit 0
 6aa:	80 91 2e 01 	lds	r24, 0x012E
 6ae:	80 95       	com	r24
 6b0:	81 70       	andi	r24, 0x01	; 1
 6b2:	80 93 2e 01 	sts	0x012E, r24
 6b6:	6e cf       	rjmp	.-292    	; 0x594 <check_user_input+0x48>
	if(chk_buttons(4)){
                clockmode = Clock_set_mode;
        }
		
	if(chk_buttons(5)){
                clockmode = Alarm_set_mode;
 6b8:	83 e0       	ldi	r24, 0x03	; 3
 6ba:	80 93 2e 01 	sts	0x012E, r24
		alarm_armed ^= 0x01; 
 6be:	90 91 2d 01 	lds	r25, 0x012D
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	89 27       	eor	r24, r25
 6c6:	80 93 2d 01 	sts	0x012D, r24
 6ca:	c5 cf       	rjmp	.-118    	; 0x656 <check_user_input+0x10a>
	if(chk_buttons(3)){
                volume_down();
        }
	
	if(chk_buttons(4)){
                clockmode = Clock_set_mode;
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	80 93 2e 01 	sts	0x012E, r24
 6d2:	ac cf       	rjmp	.-168    	; 0x62c <check_user_input+0xe0>

000006d4 <check_alarm>:

//***********************************************************************
//                            check_alarm                               
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
 6d4:	80 91 2d 01 	lds	r24, 0x012D
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	31 f0       	breq	.+12     	; 0x6e8 <check_alarm+0x14>
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10); 
 6dc:	88 e1       	ldi	r24, 0x18	; 24
 6de:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
 6e0:	87 b7       	in	r24, 0x37	; 55
 6e2:	8f 7e       	andi	r24, 0xEF	; 239
 6e4:	87 bf       	out	0x37, r24	; 55
 6e6:	08 95       	ret

//***********************************************************************
//                            check_alarm                               
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
 6e8:	90 91 03 01 	lds	r25, 0x0103
 6ec:	80 91 01 01 	lds	r24, 0x0101
 6f0:	98 13       	cpse	r25, r24
 6f2:	f4 cf       	rjmp	.-24     	; 0x6dc <check_alarm+0x8>
 6f4:	90 91 02 01 	lds	r25, 0x0102
 6f8:	80 91 00 01 	lds	r24, 0x0100
 6fc:	98 13       	cpse	r25, r24
 6fe:	ee cf       	rjmp	.-36     	; 0x6dc <check_alarm+0x8>
// 
// setup TCNT1 in pwm mode 
// set OC1A (PB5) as pwm output 
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP 
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);   
 700:	8f b5       	in	r24, 0x2f	; 47
 702:	82 60       	ori	r24, 0x02	; 2
 704:	8f bd       	out	0x2f, r24	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10); 
 706:	8e b5       	in	r24, 0x2e	; 46
 708:	89 61       	ori	r24, 0x19	; 25
 70a:	8e bd       	out	0x2e, r24	; 46
	//no forced compare 
	TCCR1C = 0x00;                                
 70c:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	90 ec       	ldi	r25, 0xC0	; 192
 714:	9b bd       	out	0x2b, r25	; 43
 716:	8a bd       	out	0x2a, r24	; 42
	ICR1  = 0xF000; //clear at 0xF000 
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	90 ef       	ldi	r25, 0xF0	; 240
 71c:	97 bd       	out	0x27, r25	; 39
 71e:	86 bd       	out	0x26, r24	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
 720:	87 b7       	in	r24, 0x37	; 55
 722:	80 61       	ori	r24, 0x10	; 16
 724:	87 bf       	out	0x37, r24	; 55
 726:	08 95       	ret

00000728 <check_ADCs>:


//***********************************************************************
//                            check_ADCs                               
//**********************************************************************
void check_ADCs(){
 728:	08 95       	ret

0000072a <__vector_16>:


//***********************************************************************
//                            Timer0_overflow_interrupt                               
//**********************************************************************
ISR(TIMER0_OVF_vect){
 72a:	1f 92       	push	r1
 72c:	0f 92       	push	r0
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	0f 92       	push	r0
 732:	11 24       	eor	r1, r1
 734:	0b b6       	in	r0, 0x3b	; 59
 736:	0f 92       	push	r0
 738:	2f 93       	push	r18
 73a:	3f 93       	push	r19
 73c:	4f 93       	push	r20
 73e:	5f 93       	push	r21
 740:	6f 93       	push	r22
 742:	7f 93       	push	r23
 744:	8f 93       	push	r24
 746:	9f 93       	push	r25
 748:	af 93       	push	r26
 74a:	bf 93       	push	r27
 74c:	ef 93       	push	r30
 74e:	ff 93       	push	r31
	//This intterupt should occur every second
	//static uint8_t seconds = 0; //Holds the seconds between interupts
	seconds++;
 750:	80 91 2a 01 	lds	r24, 0x012A
 754:	8f 5f       	subi	r24, 0xFF	; 255
 756:	80 93 2a 01 	sts	0x012A, r24
	if((seconds % 60) == 0){
 75a:	90 91 2a 01 	lds	r25, 0x012A
 75e:	89 e8       	ldi	r24, 0x89	; 137
 760:	98 9f       	mul	r25, r24
 762:	81 2d       	mov	r24, r1
 764:	11 24       	eor	r1, r1
 766:	82 95       	swap	r24
 768:	86 95       	lsr	r24
 76a:	87 70       	andi	r24, 0x07	; 7
 76c:	2c e3       	ldi	r18, 0x3C	; 60
 76e:	82 9f       	mul	r24, r18
 770:	90 19       	sub	r25, r0
 772:	11 24       	eor	r1, r1
 774:	99 23       	and	r25, r25
 776:	09 f4       	brne	.+2      	; 0x77a <__vector_16+0x50>
 778:	47 c0       	rjmp	.+142    	; 0x808 <__vector_16+0xde>
		mins++;
		seconds = 0;
		check_alarm();
	}
	if(((mins % 60) == 0) & ((seconds % 60) == 0)){
 77a:	20 91 02 01 	lds	r18, 0x0102
 77e:	90 91 2a 01 	lds	r25, 0x012A
 782:	89 e8       	ldi	r24, 0x89	; 137
 784:	98 9f       	mul	r25, r24
 786:	31 2d       	mov	r19, r1
 788:	11 24       	eor	r1, r1
 78a:	32 95       	swap	r19
 78c:	36 95       	lsr	r19
 78e:	37 70       	andi	r19, 0x07	; 7
 790:	4c e3       	ldi	r20, 0x3C	; 60
 792:	34 9f       	mul	r19, r20
 794:	90 19       	sub	r25, r0
 796:	11 24       	eor	r1, r1
 798:	91 11       	cpse	r25, r1
 79a:	0b c0       	rjmp	.+22     	; 0x7b2 <__vector_16+0x88>
 79c:	28 9f       	mul	r18, r24
 79e:	81 2d       	mov	r24, r1
 7a0:	11 24       	eor	r1, r1
 7a2:	82 95       	swap	r24
 7a4:	86 95       	lsr	r24
 7a6:	87 70       	andi	r24, 0x07	; 7
 7a8:	84 9f       	mul	r24, r20
 7aa:	20 19       	sub	r18, r0
 7ac:	11 24       	eor	r1, r1
 7ae:	22 23       	and	r18, r18
 7b0:	19 f1       	breq	.+70     	; 0x7f8 <__vector_16+0xce>
		hours++;
		mins = 0;
	}
	if((hours % 24) == 0){
 7b2:	90 91 03 01 	lds	r25, 0x0103
 7b6:	8b ea       	ldi	r24, 0xAB	; 171
 7b8:	98 9f       	mul	r25, r24
 7ba:	81 2d       	mov	r24, r1
 7bc:	11 24       	eor	r1, r1
 7be:	82 95       	swap	r24
 7c0:	8f 70       	andi	r24, 0x0F	; 15
 7c2:	28 e1       	ldi	r18, 0x18	; 24
 7c4:	82 9f       	mul	r24, r18
 7c6:	90 19       	sub	r25, r0
 7c8:	11 24       	eor	r1, r1
 7ca:	91 11       	cpse	r25, r1
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <__vector_16+0xa8>
		hours = 0;
 7ce:	10 92 03 01 	sts	0x0103, r1
	}
}
 7d2:	ff 91       	pop	r31
 7d4:	ef 91       	pop	r30
 7d6:	bf 91       	pop	r27
 7d8:	af 91       	pop	r26
 7da:	9f 91       	pop	r25
 7dc:	8f 91       	pop	r24
 7de:	7f 91       	pop	r23
 7e0:	6f 91       	pop	r22
 7e2:	5f 91       	pop	r21
 7e4:	4f 91       	pop	r20
 7e6:	3f 91       	pop	r19
 7e8:	2f 91       	pop	r18
 7ea:	0f 90       	pop	r0
 7ec:	0b be       	out	0x3b, r0	; 59
 7ee:	0f 90       	pop	r0
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	0f 90       	pop	r0
 7f4:	1f 90       	pop	r1
 7f6:	18 95       	reti
		mins++;
		seconds = 0;
		check_alarm();
	}
	if(((mins % 60) == 0) & ((seconds % 60) == 0)){
		hours++;
 7f8:	80 91 03 01 	lds	r24, 0x0103
 7fc:	8f 5f       	subi	r24, 0xFF	; 255
 7fe:	80 93 03 01 	sts	0x0103, r24
		mins = 0;
 802:	10 92 02 01 	sts	0x0102, r1
 806:	d5 cf       	rjmp	.-86     	; 0x7b2 <__vector_16+0x88>
ISR(TIMER0_OVF_vect){
	//This intterupt should occur every second
	//static uint8_t seconds = 0; //Holds the seconds between interupts
	seconds++;
	if((seconds % 60) == 0){
		mins++;
 808:	80 91 02 01 	lds	r24, 0x0102
 80c:	8f 5f       	subi	r24, 0xFF	; 255
 80e:	80 93 02 01 	sts	0x0102, r24
		seconds = 0;
 812:	10 92 2a 01 	sts	0x012A, r1
		check_alarm();
 816:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <check_alarm>
 81a:	af cf       	rjmp	.-162    	; 0x77a <__vector_16+0x50>

0000081c <__vector_12>:


//***********************************************************************
//                            Timer1_OCR1A_Match                              
//**********************************************************************
ISR(TIMER1_COMPA_vect){
 81c:	1f 92       	push	r1
 81e:	0f 92       	push	r0
 820:	0f b6       	in	r0, 0x3f	; 63
 822:	0f 92       	push	r0
 824:	11 24       	eor	r1, r1
 826:	8f 93       	push	r24
 828:	9f 93       	push	r25
	PORTC ^= 0X0F; //Toggle Bit 0
 82a:	95 b3       	in	r25, 0x15	; 21
 82c:	8f e0       	ldi	r24, 0x0F	; 15
 82e:	89 27       	eor	r24, r25
 830:	85 bb       	out	0x15, r24	; 21

	

}
 832:	9f 91       	pop	r25
 834:	8f 91       	pop	r24
 836:	0f 90       	pop	r0
 838:	0f be       	out	0x3f, r0	; 63
 83a:	0f 90       	pop	r0
 83c:	1f 90       	pop	r1
 83e:	18 95       	reti

00000840 <__vector_10>:
//**********************************************************************




ISR(TIMER2_OVF_vect){
 840:	1f 92       	push	r1
 842:	0f 92       	push	r0
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	0f 92       	push	r0
 848:	11 24       	eor	r1, r1
 84a:	0b b6       	in	r0, 0x3b	; 59
 84c:	0f 92       	push	r0
 84e:	2f 93       	push	r18
 850:	3f 93       	push	r19
 852:	4f 93       	push	r20
 854:	5f 93       	push	r21
 856:	6f 93       	push	r22
 858:	7f 93       	push	r23
 85a:	8f 93       	push	r24
 85c:	9f 93       	push	r25
 85e:	af 93       	push	r26
 860:	bf 93       	push	r27
 862:	ef 93       	push	r30
 864:	ff 93       	push	r31
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
 866:	80 91 30 01 	lds	r24, 0x0130
 86a:	8f 5f       	subi	r24, 0xFF	; 255
		if((timer_tick > 10)){
 86c:	8b 30       	cpi	r24, 0x0B	; 11
 86e:	a8 f4       	brcc	.+42     	; 0x89a <__vector_10+0x5a>

ISR(TIMER2_OVF_vect){
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
 870:	80 93 30 01 	sts	0x0130, r24
		timer_tick = 0;
		check_user_input();
		check_ADCs();

	}
}
 874:	ff 91       	pop	r31
 876:	ef 91       	pop	r30
 878:	bf 91       	pop	r27
 87a:	af 91       	pop	r26
 87c:	9f 91       	pop	r25
 87e:	8f 91       	pop	r24
 880:	7f 91       	pop	r23
 882:	6f 91       	pop	r22
 884:	5f 91       	pop	r21
 886:	4f 91       	pop	r20
 888:	3f 91       	pop	r19
 88a:	2f 91       	pop	r18
 88c:	0f 90       	pop	r0
 88e:	0b be       	out	0x3b, r0	; 59
 890:	0f 90       	pop	r0
 892:	0f be       	out	0x3f, r0	; 63
 894:	0f 90       	pop	r0
 896:	1f 90       	pop	r1
 898:	18 95       	reti
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
		if((timer_tick > 10)){
		timer_tick = 0;
 89a:	10 92 30 01 	sts	0x0130, r1
		check_user_input();
 89e:	0e 94 a6 02 	call	0x54c	; 0x54c <check_user_input>
 8a2:	e8 cf       	rjmp	.-48     	; 0x874 <__vector_10+0x34>

000008a4 <__vector_9>:
 8a4:	1f 92       	push	r1
 8a6:	0f 92       	push	r0
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	0f 92       	push	r0
 8ac:	11 24       	eor	r1, r1
 8ae:	0f 90       	pop	r0
 8b0:	0f be       	out	0x3f, r0	; 63
 8b2:	0f 90       	pop	r0
 8b4:	1f 90       	pop	r1
 8b6:	18 95       	reti

000008b8 <main>:

//***********************************************************************
//                            spi_init                               
//**********************************************************************
void spi_init(){
  DDRB   = 0xF7; //output mode for SS, MOSI, SCLK & Pins 4-7 (7Seg & Bar Graph)
 8b8:	87 ef       	ldi	r24, 0xF7	; 247
 8ba:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); // Enable SPI, master mode, clk low on idle, leading edge sample
 8bc:	80 e5       	ldi	r24, 0x50	; 80
 8be:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (0<<SPI2X); //No double speed operation
 8c0:	1e b8       	out	0x0e, r1	; 14
// Triggers a 1 sec TOV Interrupt.
//
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz 
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
 8c2:	80 b7       	in	r24, 0x30	; 48
 8c4:	88 60       	ori	r24, 0x08	; 8
 8c6:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE0);  //TimerOverflow Interrupt Enable
 8c8:	87 b7       	in	r24, 0x37	; 55
 8ca:	81 60       	ori	r24, 0x01	; 1
 8cc:	87 bf       	out	0x37, r24	; 55
  TCCR0 =  (1<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode, 128 prescale, OC0 Disconnected
 8ce:	95 e0       	ldi	r25, 0x05	; 5
 8d0:	93 bf       	out	0x33, r25	; 51
// 
// setup TCNT1 in pwm mode 
// set OC1A (PB5) as pwm output 
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP 
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);   
 8d2:	8f b5       	in	r24, 0x2f	; 47
 8d4:	82 60       	ori	r24, 0x02	; 2
 8d6:	8f bd       	out	0x2f, r24	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10); 
 8d8:	8e b5       	in	r24, 0x2e	; 46
 8da:	89 61       	ori	r24, 0x19	; 25
 8dc:	8e bd       	out	0x2e, r24	; 46
	//no forced compare 
	TCCR1C = 0x00;                                
 8de:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
 8e2:	20 e0       	ldi	r18, 0x00	; 0
 8e4:	30 ec       	ldi	r19, 0xC0	; 192
 8e6:	3b bd       	out	0x2b, r19	; 43
 8e8:	2a bd       	out	0x2a, r18	; 42
	ICR1  = 0xF000; //clear at 0xF000 
 8ea:	20 e0       	ldi	r18, 0x00	; 0
 8ec:	30 ef       	ldi	r19, 0xF0	; 240
 8ee:	37 bd       	out	0x27, r19	; 39
 8f0:	26 bd       	out	0x26, r18	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
 8f2:	87 b7       	in	r24, 0x37	; 55
 8f4:	80 61       	ori	r24, 0x10	; 16
 8f6:	87 bf       	out	0x37, r24	; 55
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10); 
 8f8:	88 e1       	ldi	r24, 0x18	; 24
 8fa:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
 8fc:	87 b7       	in	r24, 0x37	; 55
 8fe:	8f 7e       	andi	r24, 0xEF	; 239
 900:	87 bf       	out	0x37, r24	; 55
// Add HERE
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz 
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE2) | (0<<OCIE2);  //TimerOverflow Interrupt Enable
 902:	87 b7       	in	r24, 0x37	; 55
 904:	80 64       	ori	r24, 0x40	; 64
 906:	87 bf       	out	0x37, r24	; 55
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (1<<CS21) | (1<<CS20);
 908:	8b e7       	ldi	r24, 0x7B	; 123
 90a:	85 bd       	out	0x25, r24	; 37
	//Fast-PWM mode, Inverting PWM Mode, 64 prescale, OC2(PB7)(PWM) Connected
	//0-256 takes 1ms (16k CLKIO cycles)
  OCR2 =  0xF0;                   //compare at 128(50%)
 90c:	80 ef       	ldi	r24, 0xF0	; 240
 90e:	83 bd       	out	0x23, r24	; 35
void init_tcnt3(){
// Add HERE
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz 
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
 910:	80 b7       	in	r24, 0x30	; 48
 912:	88 60       	ori	r24, 0x08	; 8
 914:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE0);  //TimerOverflow Interrupt Enable
 916:	87 b7       	in	r24, 0x37	; 55
 918:	81 60       	ori	r24, 0x01	; 1
 91a:	87 bf       	out	0x37, r24	; 55
  TCCR0 =  (1<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode, 128 prescale, OC0 Disconnected
 91c:	93 bf       	out	0x33, r25	; 51
//                            timer/counter0_init                               
//**********************************************************************
void init_DDRs(){
// Add HERE
	// Set the DDR for Ports	
	DDRA = DDRA_OUTPUT; // 7-Seg Data out
 91e:	8f ef       	ldi	r24, 0xFF	; 255
 920:	8a bb       	out	0x1a, r24	; 26
	DDRE = (1<<PE5) | (1<<PE6) | (1<<PE7); // Control for Encoders and Bargraph
 922:	80 ee       	ldi	r24, 0xE0	; 224
 924:	82 b9       	out	0x02, r24	; 2
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
 926:	84 e0       	ldi	r24, 0x04	; 4
 928:	81 bb       	out	0x11, r24	; 17
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
 92a:	83 e0       	ldi	r24, 0x03	; 3
 92c:	84 bb       	out	0x14, r24	; 20
	incdec_mode = 0x01;
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	80 93 2f 01 	sts	0x012F, r24
//                            spi_read_write_8bit                               
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
 934:	85 e5       	ldi	r24, 0x55	; 85
 936:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}	
 938:	77 9b       	sbis	0x0e, 7	; 14
 93a:	fe cf       	rjmp	.-4      	; 0x938 <main+0x80>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
 93c:	8f b1       	in	r24, 0x0f	; 15
	DDRE = (1<<PE5) | (1<<PE6) | (1<<PE7); // Control for Encoders and Bargraph
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
	incdec_mode = 0x01;
	// Read the starting encoder positions
	old_encoder = spi_rw8(0x55);
 93e:	80 93 2b 01 	sts	0x012B, r24
	disable_tcnt1(); 				//			TEST LINE
	init_tcnt2(); // initalize TIMER/COUNTER2 - 7-Seg Brigtness PWM
	init_tcnt3(); // initalize TIMER/COUNTER3 - Audio Volume PWM
	init_DDRs(); // initalize DDRs for the display, encoders bargraph

	sei(); // enable global interrupts
 942:	78 94       	sei

	while(1){                             //main while loop
	// Send the Digits to the Display
	  //break up the disp_value to 4, BCD digits in the array: call (segsum)
		segsum(clockmode);
 944:	80 91 2e 01 	lds	r24, 0x012E
 948:	0e 94 de 00 	call	0x1bc	; 0x1bc <segsum>
 94c:	e1 e4       	ldi	r30, 0x41	; 65
 94e:	f1 e0       	ldi	r31, 0x01	; 1
	  //bound a counter (0-4) to keep track of digit to display 
		i = 0;
 950:	80 e0       	ldi	r24, 0x00	; 0
		j = 0; //Refresh the seg data less frequently
	  //send 7 segment code to LED segments
		for(;j<100;j++){
		for(;i<5;i++){
                	PORTB = i<<4 | 0<<PB7;
 952:	98 2f       	mov	r25, r24
 954:	92 95       	swap	r25
 956:	90 7f       	andi	r25, 0xF0	; 240
 958:	98 bb       	out	0x18, r25	; 24
			PORTA = segment_data[i];
 95a:	91 91       	ld	r25, Z+
 95c:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 95e:	a7 ee       	ldi	r26, 0xE7	; 231
 960:	b3 e0       	ldi	r27, 0x03	; 3
 962:	11 97       	sbiw	r26, 0x01	; 1
 964:	f1 f7       	brne	.-4      	; 0x962 <main+0xaa>
 966:	00 c0       	rjmp	.+0      	; 0x968 <main+0xb0>
 968:	00 00       	nop
	  //bound a counter (0-4) to keep track of digit to display 
		i = 0;
		j = 0; //Refresh the seg data less frequently
	  //send 7 segment code to LED segments
		for(;j<100;j++){
		for(;i<5;i++){
 96a:	8f 5f       	subi	r24, 0xFF	; 255
 96c:	85 30       	cpi	r24, 0x05	; 5
 96e:	89 f7       	brne	.-30     	; 0x952 <main+0x9a>
 970:	e9 cf       	rjmp	.-46     	; 0x944 <main+0x8c>

00000972 <_exit>:
 972:	f8 94       	cli

00000974 <__stop_program>:
 974:	ff cf       	rjmp	.-2      	; 0x974 <__stop_program>
