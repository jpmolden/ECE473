
lab3_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000054e  000005e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800126  00800126  00000608  2**0
                  ALLOC
  3 .stab         00000c0c  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e18  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_15>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e4       	ldi	r30, 0x4E	; 78
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 34       	cpi	r26, 0x41	; 65
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <main>
  c6:	0c 94 a5 02 	jmp	0x54a	; 0x54a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.  
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
  ce:	48 2f       	mov	r20, r24
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	99 b3       	in	r25, 0x19	; 25
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	e4 5d       	subi	r30, 0xD4	; 212
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	20 81       	ld	r18, Z
  e0:	31 81       	ldd	r19, Z+1	; 0x01
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	30 6e       	ori	r19, 0xE0	; 224
  e8:	89 2f       	mov	r24, r25
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <chk_buttons+0x24>
  ee:	95 95       	asr	r25
  f0:	87 95       	ror	r24
  f2:	4a 95       	dec	r20
  f4:	e2 f7       	brpl	.-8      	; 0xee <chk_buttons+0x20>
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	99 27       	eor	r25, r25
  fa:	28 2b       	or	r18, r24
  fc:	39 2b       	or	r19, r25
  fe:	31 83       	std	Z+1, r19	; 0x01
 100:	20 83       	st	Z, r18
        if(state[button] == 0xF000) return 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	21 15       	cp	r18, r1
 106:	30 4f       	sbci	r19, 0xF0	; 240
 108:	09 f0       	breq	.+2      	; 0x10c <chk_buttons+0x3e>
 10a:	80 e0       	ldi	r24, 0x00	; 0
        return 0;

//******************************************************************************
}
 10c:	08 95       	ret

0000010e <segsum>:
//***********************************************************************************
//                                   segment_tsum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
        //if(sum >= 100)(no_digits = 3);
        //if(sum >= 1000)(no_digits = 4);

  //break up decimal sum into 4 digit-segment   
        //The digits (0-9) are used as the index for the seven segment representation
        segment_data[0] = dec_to_7seg[(sum/1) %10];
 116:	9c 01       	movw	r18, r24
 118:	ad ec       	ldi	r26, 0xCD	; 205
 11a:	bc ec       	ldi	r27, 0xCC	; 204
 11c:	0e 94 96 02 	call	0x52c	; 0x52c <__umulhisi3>
 120:	ac 01       	movw	r20, r24
 122:	56 95       	lsr	r21
 124:	47 95       	ror	r20
 126:	56 95       	lsr	r21
 128:	47 95       	ror	r20
 12a:	56 95       	lsr	r21
 12c:	47 95       	ror	r20
 12e:	9a 01       	movw	r18, r20
 130:	22 0f       	add	r18, r18
 132:	33 1f       	adc	r19, r19
 134:	ca 01       	movw	r24, r20
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	82 0f       	add	r24, r18
 144:	93 1f       	adc	r25, r19
 146:	fe 01       	movw	r30, r28
 148:	e8 1b       	sub	r30, r24
 14a:	f9 0b       	sbc	r31, r25
 14c:	e7 5e       	subi	r30, 0xE7	; 231
 14e:	fe 4f       	sbci	r31, 0xFE	; 254
 150:	80 81       	ld	r24, Z
 152:	80 93 3c 01 	sts	0x013C, r24
        segment_data[1] = dec_to_7seg[(sum/10) %10];
 156:	9a 01       	movw	r18, r20
 158:	0e 94 96 02 	call	0x52c	; 0x52c <__umulhisi3>
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	9c 01       	movw	r18, r24
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	82 0f       	add	r24, r18
 17c:	93 1f       	adc	r25, r19
 17e:	48 1b       	sub	r20, r24
 180:	59 0b       	sbc	r21, r25
 182:	fa 01       	movw	r30, r20
 184:	e7 5e       	subi	r30, 0xE7	; 231
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	80 81       	ld	r24, Z
 18a:	80 93 3d 01 	sts	0x013D, r24
        segment_data[2] = SEG_OFF;
 18e:	1f ef       	ldi	r17, 0xFF	; 255
 190:	10 93 3e 01 	sts	0x013E, r17
        segment_data[3] = dec_to_7seg[(sum/100) %10];
 194:	9e 01       	movw	r18, r28
 196:	36 95       	lsr	r19
 198:	27 95       	ror	r18
 19a:	36 95       	lsr	r19
 19c:	27 95       	ror	r18
 19e:	ab e7       	ldi	r26, 0x7B	; 123
 1a0:	b4 e1       	ldi	r27, 0x14	; 20
 1a2:	0e 94 96 02 	call	0x52c	; 0x52c <__umulhisi3>
 1a6:	ac 01       	movw	r20, r24
 1a8:	56 95       	lsr	r21
 1aa:	47 95       	ror	r20
 1ac:	9a 01       	movw	r18, r20
 1ae:	ad ec       	ldi	r26, 0xCD	; 205
 1b0:	bc ec       	ldi	r27, 0xCC	; 204
 1b2:	0e 94 96 02 	call	0x52c	; 0x52c <__umulhisi3>
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	96 95       	lsr	r25
 1bc:	87 95       	ror	r24
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	9c 01       	movw	r18, r24
 1c4:	22 0f       	add	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	82 0f       	add	r24, r18
 1d6:	93 1f       	adc	r25, r19
 1d8:	48 1b       	sub	r20, r24
 1da:	59 0b       	sbc	r21, r25
 1dc:	fa 01       	movw	r30, r20
 1de:	e7 5e       	subi	r30, 0xE7	; 231
 1e0:	fe 4f       	sbci	r31, 0xFE	; 254
 1e2:	80 81       	ld	r24, Z
 1e4:	80 93 3f 01 	sts	0x013F, r24
        segment_data[4] = dec_to_7seg[(sum/1000) %10];
 1e8:	9e 01       	movw	r18, r28
 1ea:	36 95       	lsr	r19
 1ec:	27 95       	ror	r18
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	36 95       	lsr	r19
 1f4:	27 95       	ror	r18
 1f6:	a5 ec       	ldi	r26, 0xC5	; 197
 1f8:	b0 e2       	ldi	r27, 0x20	; 32
 1fa:	0e 94 96 02 	call	0x52c	; 0x52c <__umulhisi3>
 1fe:	ac 01       	movw	r20, r24
 200:	52 95       	swap	r21
 202:	42 95       	swap	r20
 204:	4f 70       	andi	r20, 0x0F	; 15
 206:	45 27       	eor	r20, r21
 208:	5f 70       	andi	r21, 0x0F	; 15
 20a:	45 27       	eor	r20, r21
 20c:	9a 01       	movw	r18, r20
 20e:	ad ec       	ldi	r26, 0xCD	; 205
 210:	bc ec       	ldi	r27, 0xCC	; 204
 212:	0e 94 96 02 	call	0x52c	; 0x52c <__umulhisi3>
 216:	96 95       	lsr	r25
 218:	87 95       	ror	r24
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	96 95       	lsr	r25
 220:	87 95       	ror	r24
 222:	9c 01       	movw	r18, r24
 224:	22 0f       	add	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	82 0f       	add	r24, r18
 236:	93 1f       	adc	r25, r19
 238:	48 1b       	sub	r20, r24
 23a:	59 0b       	sbc	r21, r25
 23c:	fa 01       	movw	r30, r20
 23e:	e7 5e       	subi	r30, 0xE7	; 231
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	80 81       	ld	r24, Z

  //blank out leading zero digits
        if(sum < 1000){
 244:	c8 3e       	cpi	r28, 0xE8	; 232
 246:	93 e0       	ldi	r25, 0x03	; 3
 248:	d9 07       	cpc	r29, r25
 24a:	78 f4       	brcc	.+30     	; 0x26a <segsum+0x15c>
                segment_data[4] = SEG_OFF;
 24c:	10 93 40 01 	sts	0x0140, r17
        }
        if(sum < 100){
 250:	c4 36       	cpi	r28, 0x64	; 100
 252:	d1 05       	cpc	r29, r1
 254:	30 f4       	brcc	.+12     	; 0x262 <segsum+0x154>
                 segment_data[3] = SEG_OFF;
 256:	10 93 3f 01 	sts	0x013F, r17
        }
        if(sum < 10){
 25a:	2a 97       	sbiw	r28, 0x0a	; 10
 25c:	10 f4       	brcc	.+4      	; 0x262 <segsum+0x154>
                 segment_data[1] = SEG_OFF;
 25e:	10 93 3d 01 	sts	0x013D, r17
        }
        if(sum == 0){
                 //segment_data[0] = SEG_OFF;
        }
}//segment_sum
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	08 95       	ret
        //The digits (0-9) are used as the index for the seven segment representation
        segment_data[0] = dec_to_7seg[(sum/1) %10];
        segment_data[1] = dec_to_7seg[(sum/10) %10];
        segment_data[2] = SEG_OFF;
        segment_data[3] = dec_to_7seg[(sum/100) %10];
        segment_data[4] = dec_to_7seg[(sum/1000) %10];
 26a:	80 93 40 01 	sts	0x0140, r24
                 segment_data[1] = SEG_OFF;
        }
        if(sum == 0){
                 //segment_data[0] = SEG_OFF;
        }
}//segment_sum
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <spi_init>:

//***********************************************************************
//                            spi_init                               
//**********************************************************************
void spi_init(){
  DDRB   = 0xF7; //output mode for SS, MOSI, SCLK & Pins 4-7 (7Seg & Bar Graph)
 276:	87 ef       	ldi	r24, 0xF7	; 247
 278:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); // Enable SPI, master mode, clk low on idle, leading edge sample
 27a:	80 e5       	ldi	r24, 0x50	; 80
 27c:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (0<<SPI2X); //No double speed operation
 27e:	1e b8       	out	0x0e, r1	; 14
 280:	08 95       	ret

00000282 <init_tcnt0>:
//                            timer/counter0_init                               
//**********************************************************************
void init_tcnt0(){
// Add HERE

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
 282:	80 b7       	in	r24, 0x30	; 48
 284:	88 60       	ori	r24, 0x08	; 8
 286:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<OCIE0);
 288:	87 b7       	in	r24, 0x37	; 55
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	87 bf       	out	0x37, r24	; 55
  TCCR0 |= (1<<WGM01) | (1<<CS00);  //CTC mode, no prescale
 28e:	83 b7       	in	r24, 0x33	; 51
 290:	89 60       	ori	r24, 0x09	; 9
 292:	83 bf       	out	0x33, r24	; 51
  OCR0  |=  0xFF;                   //compare at 256
 294:	81 b7       	in	r24, 0x31	; 49
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	81 bf       	out	0x31, r24	; 49
 29a:	08 95       	ret

0000029c <spi_rw8>:
//                            spi_read_write_8bit                               
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
 29c:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}	
 29e:	77 9b       	sbis	0x0e, 7	; 14
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <spi_rw8+0x2>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
 2a2:	8f b1       	in	r24, 0x0f	; 15
	return(data);
}
 2a4:	08 95       	ret

000002a6 <encoders>:
	// The direction is determined by a state machine look up table 0=no change
	// 1=CCW, 2=CW
	//The old encoder value is place in posistion in b2 b3, 0x03 masks out other 1's	

	//Check encoder 1		
	uint8_t direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
 2a6:	e0 91 27 01 	lds	r30, 0x0127
 2aa:	80 91 28 01 	lds	r24, 0x0128
 2ae:	e3 70       	andi	r30, 0x03	; 3
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	ee 0f       	add	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	83 70       	andi	r24, 0x03	; 3
 2bc:	e8 2b       	or	r30, r24
 2be:	e0 50       	subi	r30, 0x00	; 0
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
	switch(direction){
 2c2:	80 81       	ld	r24, Z
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	09 f4       	brne	.+2      	; 0x2ca <encoders+0x24>
 2c8:	44 c0       	rjmp	.+136    	; 0x352 <encoders+0xac>
 2ca:	48 f0       	brcs	.+18     	; 0x2de <encoders+0x38>
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	81 f5       	brne	.+96     	; 0x330 <encoders+0x8a>
			break;
		case 1:
			display_count = display_count - incdec_mode;
			break;
		case 2:
			display_count = display_count + incdec_mode;
 2d0:	80 91 26 01 	lds	r24, 0x0126
 2d4:	90 91 2b 01 	lds	r25, 0x012B
 2d8:	89 0f       	add	r24, r25
 2da:	80 93 26 01 	sts	0x0126, r24
		default:
			display_count = display_count;
	}
	
	//Check encoder 2
        direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
 2de:	80 91 27 01 	lds	r24, 0x0127
 2e2:	e0 91 28 01 	lds	r30, 0x0128
 2e6:	ec 70       	andi	r30, 0x0C	; 12
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	f5 95       	asr	r31
 2ec:	e7 95       	ror	r30
 2ee:	f5 95       	asr	r31
 2f0:	e7 95       	ror	r30
 2f2:	8c 70       	andi	r24, 0x0C	; 12
 2f4:	e8 2b       	or	r30, r24
 2f6:	e0 50       	subi	r30, 0x00	; 0
 2f8:	ff 4f       	sbci	r31, 0xFF	; 255
        switch(direction){
 2fa:	80 81       	ld	r24, Z
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	e9 f0       	breq	.+58     	; 0x33a <encoders+0x94>
 300:	48 f0       	brcs	.+18     	; 0x314 <encoders+0x6e>
 302:	82 30       	cpi	r24, 0x02	; 2
 304:	61 f4       	brne	.+24     	; 0x31e <encoders+0x78>
                        break;
                case 1:
                        display_count = display_count - incdec_mode;
                        break;
                case 2:
                        display_count = display_count + incdec_mode;
 306:	80 91 26 01 	lds	r24, 0x0126
 30a:	90 91 2b 01 	lds	r25, 0x012B
 30e:	89 0f       	add	r24, r25
 310:	80 93 26 01 	sts	0x0126, r24
                        break;
                default:
                        display_count = display_count;
        }
	//Replace the old encoder value
	old_encoder = encoder;
 314:	80 91 28 01 	lds	r24, 0x0128
 318:	80 93 27 01 	sts	0x0127, r24
 31c:	08 95       	ret
                        break;
                case 2:
                        display_count = display_count + incdec_mode;
                        break;
                default:
                        display_count = display_count;
 31e:	80 91 26 01 	lds	r24, 0x0126
 322:	80 93 26 01 	sts	0x0126, r24
        }
	//Replace the old encoder value
	old_encoder = encoder;
 326:	80 91 28 01 	lds	r24, 0x0128
 32a:	80 93 27 01 	sts	0x0127, r24
 32e:	08 95       	ret
			break;
		case 2:
			display_count = display_count + incdec_mode;
			break;
		default:
			display_count = display_count;
 330:	80 91 26 01 	lds	r24, 0x0126
 334:	80 93 26 01 	sts	0x0126, r24
 338:	d2 cf       	rjmp	.-92     	; 0x2de <encoders+0x38>
        direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
        switch(direction){
                case 0:
                        break;
                case 1:
                        display_count = display_count - incdec_mode;
 33a:	80 91 26 01 	lds	r24, 0x0126
 33e:	90 91 2b 01 	lds	r25, 0x012B
 342:	89 1b       	sub	r24, r25
 344:	80 93 26 01 	sts	0x0126, r24
                        break;
                default:
                        display_count = display_count;
        }
	//Replace the old encoder value
	old_encoder = encoder;
 348:	80 91 28 01 	lds	r24, 0x0128
 34c:	80 93 27 01 	sts	0x0127, r24
 350:	08 95       	ret
	uint8_t direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
	switch(direction){
		case 0:
			break;
		case 1:
			display_count = display_count - incdec_mode;
 352:	80 91 26 01 	lds	r24, 0x0126
 356:	90 91 2b 01 	lds	r25, 0x012B
 35a:	89 1b       	sub	r24, r25
 35c:	80 93 26 01 	sts	0x0126, r24
			break;
 360:	be cf       	rjmp	.-132    	; 0x2de <encoders+0x38>

00000362 <__vector_15>:


//***********************************************************************
//                            Interrupts
//**********************************************************************
ISR(TIMER0_COMP_vect){
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	0b b6       	in	r0, 0x3b	; 59
 36e:	0f 92       	push	r0
 370:	2f 93       	push	r18
 372:	3f 93       	push	r19
 374:	4f 93       	push	r20
 376:	5f 93       	push	r21
 378:	6f 93       	push	r22
 37a:	7f 93       	push	r23
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
 380:	af 93       	push	r26
 382:	bf 93       	push	r27
 384:	ef 93       	push	r30
 386:	ff 93       	push	r31
  //Read the buttons
        PORTB = PORTB | (1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7);
 388:	98 b3       	in	r25, 0x18	; 24
 38a:	90 6f       	ori	r25, 0xF0	; 240
 38c:	98 bb       	out	0x18, r25	; 24

	DDRA = 0x00; // PortA as an input
 38e:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; // PortA enable Pull Ups
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	8b bb       	out	0x1b, r24	; 27
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
 394:	89 b3       	in	r24, 0x19	; 25
 396:	20 91 2e 01 	lds	r18, 0x012E
 39a:	30 91 2f 01 	lds	r19, 0x012F
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	30 6e       	ori	r19, 0xE0	; 224
 3a4:	81 fb       	bst	r24, 1
 3a6:	44 27       	eor	r20, r20
 3a8:	40 f9       	bld	r20, 0
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	24 2b       	or	r18, r20
 3ae:	35 2b       	or	r19, r21
 3b0:	30 93 2f 01 	sts	0x012F, r19
 3b4:	20 93 2e 01 	sts	0x012E, r18
        if(state[button] == 0xF000) return 1;
 3b8:	21 15       	cp	r18, r1
 3ba:	30 4f       	sbci	r19, 0xF0	; 240
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <__vector_15+0x5e>
 3be:	52 c0       	rjmp	.+164    	; 0x464 <__vector_15+0x102>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
 3c0:	29 b3       	in	r18, 0x19	; 25
 3c2:	80 91 2c 01 	lds	r24, 0x012C
 3c6:	90 91 2d 01 	lds	r25, 0x012D
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	90 6e       	ori	r25, 0xE0	; 224
 3d0:	62 2f       	mov	r22, r18
 3d2:	61 70       	andi	r22, 0x01	; 1
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	86 2b       	or	r24, r22
 3d8:	97 2b       	or	r25, r23
 3da:	90 93 2d 01 	sts	0x012D, r25
 3de:	80 93 2c 01 	sts	0x012C, r24
        if(state[button] == 0xF000) return 1;
 3e2:	81 15       	cp	r24, r1
 3e4:	90 4f       	sbci	r25, 0xF0	; 240
 3e6:	09 f4       	brne	.+2      	; 0x3ea <__vector_15+0x88>
 3e8:	50 c0       	rjmp	.+160    	; 0x48a <__vector_15+0x128>
	}

	// The state of button2 is flipped ORd with button1 state and sets incdec mode 

	// Turn off the button board PWM high	
	PORTB &= ~((1<<PB4) | (1<<PB5) | (1<<PB6) | (0<<PB7));
 3ea:	88 b3       	in	r24, 0x18	; 24
 3ec:	8f 78       	andi	r24, 0x8F	; 143
 3ee:	88 bb       	out	0x18, r24	; 24

	DDRA = 0xFF; //DDRA Output
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //Turn Off The 7Seg
 3f4:	8b bb       	out	0x1b, r24	; 27
	
  // Send info to the bargraph (Sending info will read in encoders)
	PORTD &= ~(1<<PD2); //Storage Reg for HC595 low
 3f6:	92 98       	cbi	0x12, 2	; 18
	PORTE &= ~((1<<PE6) | (1<<PE7) | (1<<PE5)); //Encoder Shift Reg Clk en Low, Load Mode
 3f8:	83 b1       	in	r24, 0x03	; 3
 3fa:	8f 71       	andi	r24, 0x1F	; 31
 3fc:	83 b9       	out	0x03, r24	; 3
	PORTE |= (1<<PE7); //Shift Mode
 3fe:	1f 9a       	sbi	0x03, 7	; 3
	encoder = spi_rw8(incdec_to_bargraph[incdec_mode]); // Send SPI_8bit
 400:	e0 91 2b 01 	lds	r30, 0x012B
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	ec 5e       	subi	r30, 0xEC	; 236
 408:	fe 4f       	sbci	r31, 0xFE	; 254
 40a:	80 81       	ld	r24, Z
//                            spi_read_write_8bit                               
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
 40c:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}	
 40e:	77 9b       	sbis	0x0e, 7	; 14
 410:	fe cf       	rjmp	.-4      	; 0x40e <__vector_15+0xac>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
 412:	8f b1       	in	r24, 0x0f	; 15
	
  // Send info to the bargraph (Sending info will read in encoders)
	PORTD &= ~(1<<PD2); //Storage Reg for HC595 low
	PORTE &= ~((1<<PE6) | (1<<PE7) | (1<<PE5)); //Encoder Shift Reg Clk en Low, Load Mode
	PORTE |= (1<<PE7); //Shift Mode
	encoder = spi_rw8(incdec_to_bargraph[incdec_mode]); // Send SPI_8bit
 414:	80 93 28 01 	sts	0x0128, r24
	
  // Check the encoders
	if(encoder != old_encoder){
 418:	90 91 28 01 	lds	r25, 0x0128
 41c:	80 91 27 01 	lds	r24, 0x0127
 420:	98 17       	cp	r25, r24
 422:	31 f0       	breq	.+12     	; 0x430 <__vector_15+0xce>
		// Change in the encoder position
		encoders(encoder, old_encoder);
 424:	60 91 27 01 	lds	r22, 0x0127
 428:	80 91 28 01 	lds	r24, 0x0128
 42c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <encoders>
	}	
  // Return the to original states
	PORTD |= (1<<PD2); //SS_Bar Low
 430:	92 9a       	sbi	0x12, 2	; 18
	PORTE |= (1<<PE6) | (1<<PE7) | (0<<PE5); //Clk enable high, Shift mode
 432:	83 b1       	in	r24, 0x03	; 3
 434:	80 6c       	ori	r24, 0xC0	; 192
 436:	83 b9       	out	0x03, r24	; 3
	PORTB &= ~((1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7)); // Sel 0
 438:	88 b3       	in	r24, 0x18	; 24
 43a:	8f 70       	andi	r24, 0x0F	; 15
 43c:	88 bb       	out	0x18, r24	; 24
  // Disable the button board tristates


}
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	bf 91       	pop	r27
 444:	af 91       	pop	r26
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	7f 91       	pop	r23
 44c:	6f 91       	pop	r22
 44e:	5f 91       	pop	r21
 450:	4f 91       	pop	r20
 452:	3f 91       	pop	r19
 454:	2f 91       	pop	r18
 456:	0f 90       	pop	r0
 458:	0b be       	out	0x3b, r0	; 59
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

	DDRA = 0x00; // PortA as an input
	PORTA = 0xFF; // PortA enable Pull Ups

        if(chk_buttons(1)){
                button2 = (button2^0x02)&0x02;
 464:	80 91 29 01 	lds	r24, 0x0129
 468:	80 95       	com	r24
 46a:	82 70       	andi	r24, 0x02	; 2
 46c:	80 93 29 01 	sts	0x0129, r24
                (incdec_mode = buttons_to_incdec[((button2) | (button1))&0x03]);
 470:	80 91 29 01 	lds	r24, 0x0129
 474:	e0 91 2a 01 	lds	r30, 0x012A
 478:	e8 2b       	or	r30, r24
 47a:	e3 70       	andi	r30, 0x03	; 3
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	e0 5f       	subi	r30, 0xF0	; 240
 480:	fe 4f       	sbci	r31, 0xFE	; 254
 482:	80 81       	ld	r24, Z
 484:	80 93 2b 01 	sts	0x012B, r24
 488:	9b cf       	rjmp	.-202    	; 0x3c0 <__vector_15+0x5e>
        }

        if(chk_buttons(0)){
                button1 = (button1^0x01)&0x01;
 48a:	80 91 2a 01 	lds	r24, 0x012A
 48e:	80 95       	com	r24
 490:	81 70       	andi	r24, 0x01	; 1
 492:	80 93 2a 01 	sts	0x012A, r24
		(incdec_mode = buttons_to_incdec[((button2) | (button1))&0x03]);
 496:	80 91 29 01 	lds	r24, 0x0129
 49a:	e0 91 2a 01 	lds	r30, 0x012A
 49e:	e8 2b       	or	r30, r24
 4a0:	e3 70       	andi	r30, 0x03	; 3
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	e0 5f       	subi	r30, 0xF0	; 240
 4a6:	fe 4f       	sbci	r31, 0xFE	; 254
 4a8:	80 81       	ld	r24, Z
 4aa:	80 93 2b 01 	sts	0x012B, r24
 4ae:	9d cf       	rjmp	.-198    	; 0x3ea <__vector_15+0x88>

000004b0 <main>:

//***********************************************************************
//                            spi_init                               
//**********************************************************************
void spi_init(){
  DDRB   = 0xF7; //output mode for SS, MOSI, SCLK & Pins 4-7 (7Seg & Bar Graph)
 4b0:	87 ef       	ldi	r24, 0xF7	; 247
 4b2:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); // Enable SPI, master mode, clk low on idle, leading edge sample
 4b4:	80 e5       	ldi	r24, 0x50	; 80
 4b6:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (0<<SPI2X); //No double speed operation
 4b8:	1e b8       	out	0x0e, r1	; 14
//                            timer/counter0_init                               
//**********************************************************************
void init_tcnt0(){
// Add HERE

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
 4ba:	80 b7       	in	r24, 0x30	; 48
 4bc:	88 60       	ori	r24, 0x08	; 8
 4be:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<OCIE0);
 4c0:	87 b7       	in	r24, 0x37	; 55
 4c2:	82 60       	ori	r24, 0x02	; 2
 4c4:	87 bf       	out	0x37, r24	; 55
  TCCR0 |= (1<<WGM01) | (1<<CS00);  //CTC mode, no prescale
 4c6:	83 b7       	in	r24, 0x33	; 51
 4c8:	89 60       	ori	r24, 0x09	; 9
 4ca:	83 bf       	out	0x33, r24	; 51
  OCR0  |=  0xFF;                   //compare at 256
 4cc:	81 b7       	in	r24, 0x31	; 49
 4ce:	8f ef       	ldi	r24, 0xFF	; 255
 4d0:	81 bf       	out	0x31, r24	; 49

spi_init();  //initalize SPI port
init_tcnt0(); // initalize TIMER/COUNTER0

// Set the DDR for Ports
DDRA = DDRA_OUTPUT;
 4d2:	8a bb       	out	0x1a, r24	; 26
DDRE = (1<<PE5) | (1<<PE6) | (1<<PE7);
 4d4:	80 ee       	ldi	r24, 0xE0	; 224
 4d6:	82 b9       	out	0x02, r24	; 2
DDRD = (1<<PD2);
 4d8:	84 e0       	ldi	r24, 0x04	; 4
 4da:	81 bb       	out	0x11, r24	; 17
incdec_mode = 0x01;
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	80 93 2b 01 	sts	0x012B, r24
//                            spi_read_write_8bit                               
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
 4e2:	85 e5       	ldi	r24, 0x55	; 85
 4e4:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}	
 4e6:	77 9b       	sbis	0x0e, 7	; 14
 4e8:	fe cf       	rjmp	.-4      	; 0x4e6 <main+0x36>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
 4ea:	8f b1       	in	r24, 0x0f	; 15
DDRA = DDRA_OUTPUT;
DDRE = (1<<PE5) | (1<<PE6) | (1<<PE7);
DDRD = (1<<PD2);
incdec_mode = 0x01;
// Read the starting encoder positions
old_encoder = spi_rw8(0x55);
 4ec:	80 93 27 01 	sts	0x0127, r24
sei(); // enable global interrupts
 4f0:	78 94       	sei
 4f2:	cc e3       	ldi	r28, 0x3C	; 60
 4f4:	d1 e0       	ldi	r29, 0x01	; 1
while(1){                             //main while loop

// Decode the Display Digits
// Send the Digits to the Display
  //bound the count to 0 - 1023
        if(display_count > 1023)(display_count = display_count - 1023);
 4f6:	80 91 26 01 	lds	r24, 0x0126
  //break up the disp_value to 4, BCD digits in the array: call (segsum)
        segsum(display_count);
 4fa:	80 91 26 01 	lds	r24, 0x0126
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 87 00 	call	0x10e	; 0x10e <segsum>
 504:	ec e3       	ldi	r30, 0x3C	; 60
 506:	f1 e0       	ldi	r31, 0x01	; 1
 508:	8e 2f       	mov	r24, r30
 50a:	8c 1b       	sub	r24, r28
  //bound a counter (0-4) to keep track of digit to display 
        i = 0;
  //send 7 segment code to LED segments
        for(;i<5;i++){
                PORTA = segment_data[i];
 50c:	91 91       	ld	r25, Z+
 50e:	9b bb       	out	0x1b, r25	; 27
                PORTB = i<<4 | 0<<PB7;
 510:	82 95       	swap	r24
 512:	80 7f       	andi	r24, 0xF0	; 240
 514:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 516:	87 ee       	ldi	r24, 0xE7	; 231
 518:	93 e0       	ldi	r25, 0x03	; 3
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <main+0x6a>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <main+0x70>
 520:	00 00       	nop
  //break up the disp_value to 4, BCD digits in the array: call (segsum)
        segsum(display_count);
  //bound a counter (0-4) to keep track of digit to display 
        i = 0;
  //send 7 segment code to LED segments
        for(;i<5;i++){
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	e1 34       	cpi	r30, 0x41	; 65
 526:	f9 07       	cpc	r31, r25
 528:	79 f7       	brne	.-34     	; 0x508 <main+0x58>
 52a:	e5 cf       	rjmp	.-54     	; 0x4f6 <main+0x46>

0000052c <__umulhisi3>:
 52c:	a2 9f       	mul	r26, r18
 52e:	b0 01       	movw	r22, r0
 530:	b3 9f       	mul	r27, r19
 532:	c0 01       	movw	r24, r0
 534:	a3 9f       	mul	r26, r19
 536:	70 0d       	add	r23, r0
 538:	81 1d       	adc	r24, r1
 53a:	11 24       	eor	r1, r1
 53c:	91 1d       	adc	r25, r1
 53e:	b2 9f       	mul	r27, r18
 540:	70 0d       	add	r23, r0
 542:	81 1d       	adc	r24, r1
 544:	11 24       	eor	r1, r1
 546:	91 1d       	adc	r25, r1
 548:	08 95       	ret

0000054a <_exit>:
 54a:	f8 94       	cli

0000054c <__stop_program>:
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stop_program>
