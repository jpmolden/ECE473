
lab5_atmega48.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000044c  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800102  00800102  000004e2  2**0
                  ALLOC
  3 .stab         000015e4  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000109d  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002b65  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002b78  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	6a c0       	rjmp	.+212    	; 0xd6 <__ctors_end>
   2:	84 c0       	rjmp	.+264    	; 0x10c <__bad_interrupt>
   4:	83 c0       	rjmp	.+262    	; 0x10c <__bad_interrupt>
   6:	82 c0       	rjmp	.+260    	; 0x10c <__bad_interrupt>
   8:	81 c0       	rjmp	.+258    	; 0x10c <__bad_interrupt>
   a:	80 c0       	rjmp	.+256    	; 0x10c <__bad_interrupt>
   c:	7f c0       	rjmp	.+254    	; 0x10c <__bad_interrupt>
   e:	7e c0       	rjmp	.+252    	; 0x10c <__bad_interrupt>
  10:	7d c0       	rjmp	.+250    	; 0x10c <__bad_interrupt>
  12:	7c c0       	rjmp	.+248    	; 0x10c <__bad_interrupt>
  14:	7b c0       	rjmp	.+246    	; 0x10c <__bad_interrupt>
  16:	7a c0       	rjmp	.+244    	; 0x10c <__bad_interrupt>
  18:	79 c0       	rjmp	.+242    	; 0x10c <__bad_interrupt>
  1a:	78 c0       	rjmp	.+240    	; 0x10c <__bad_interrupt>
  1c:	77 c0       	rjmp	.+238    	; 0x10c <__bad_interrupt>
  1e:	76 c0       	rjmp	.+236    	; 0x10c <__bad_interrupt>
  20:	75 c0       	rjmp	.+234    	; 0x10c <__bad_interrupt>
  22:	74 c0       	rjmp	.+232    	; 0x10c <__bad_interrupt>
  24:	74 c0       	rjmp	.+232    	; 0x10e <__vector_18>
  26:	72 c0       	rjmp	.+228    	; 0x10c <__bad_interrupt>
  28:	71 c0       	rjmp	.+226    	; 0x10c <__bad_interrupt>
  2a:	70 c0       	rjmp	.+224    	; 0x10c <__bad_interrupt>
  2c:	6f c0       	rjmp	.+222    	; 0x10c <__bad_interrupt>
  2e:	6e c0       	rjmp	.+220    	; 0x10c <__bad_interrupt>
  30:	99 c0       	rjmp	.+306    	; 0x164 <__vector_24>
  32:	6c c0       	rjmp	.+216    	; 0x10c <__bad_interrupt>
  34:	d3 c0       	rjmp	.+422    	; 0x1dc <__vector_24+0x78>
  36:	ac c0       	rjmp	.+344    	; 0x190 <__vector_24+0x2c>
  38:	ab c0       	rjmp	.+342    	; 0x190 <__vector_24+0x2c>
  3a:	aa c0       	rjmp	.+340    	; 0x190 <__vector_24+0x2c>
  3c:	a9 c0       	rjmp	.+338    	; 0x190 <__vector_24+0x2c>
  3e:	a8 c0       	rjmp	.+336    	; 0x190 <__vector_24+0x2c>
  40:	a7 c0       	rjmp	.+334    	; 0x190 <__vector_24+0x2c>
  42:	a6 c0       	rjmp	.+332    	; 0x190 <__vector_24+0x2c>
  44:	cb c0       	rjmp	.+406    	; 0x1dc <__vector_24+0x78>
  46:	a4 c0       	rjmp	.+328    	; 0x190 <__vector_24+0x2c>
  48:	a3 c0       	rjmp	.+326    	; 0x190 <__vector_24+0x2c>
  4a:	a2 c0       	rjmp	.+324    	; 0x190 <__vector_24+0x2c>
  4c:	a1 c0       	rjmp	.+322    	; 0x190 <__vector_24+0x2c>
  4e:	a0 c0       	rjmp	.+320    	; 0x190 <__vector_24+0x2c>
  50:	9f c0       	rjmp	.+318    	; 0x190 <__vector_24+0x2c>
  52:	9e c0       	rjmp	.+316    	; 0x190 <__vector_24+0x2c>
  54:	cd c0       	rjmp	.+410    	; 0x1f0 <__vector_24+0x8c>
  56:	9c c0       	rjmp	.+312    	; 0x190 <__vector_24+0x2c>
  58:	9b c0       	rjmp	.+310    	; 0x190 <__vector_24+0x2c>
  5a:	9a c0       	rjmp	.+308    	; 0x190 <__vector_24+0x2c>
  5c:	99 c0       	rjmp	.+306    	; 0x190 <__vector_24+0x2c>
  5e:	98 c0       	rjmp	.+304    	; 0x190 <__vector_24+0x2c>
  60:	97 c0       	rjmp	.+302    	; 0x190 <__vector_24+0x2c>
  62:	96 c0       	rjmp	.+300    	; 0x190 <__vector_24+0x2c>
  64:	95 c0       	rjmp	.+298    	; 0x190 <__vector_24+0x2c>
  66:	94 c0       	rjmp	.+296    	; 0x190 <__vector_24+0x2c>
  68:	93 c0       	rjmp	.+294    	; 0x190 <__vector_24+0x2c>
  6a:	92 c0       	rjmp	.+292    	; 0x190 <__vector_24+0x2c>
  6c:	91 c0       	rjmp	.+290    	; 0x190 <__vector_24+0x2c>
  6e:	90 c0       	rjmp	.+288    	; 0x190 <__vector_24+0x2c>
  70:	8f c0       	rjmp	.+286    	; 0x190 <__vector_24+0x2c>
  72:	8e c0       	rjmp	.+284    	; 0x190 <__vector_24+0x2c>
  74:	bd c0       	rjmp	.+378    	; 0x1f0 <__vector_24+0x8c>
  76:	8c c0       	rjmp	.+280    	; 0x190 <__vector_24+0x2c>
  78:	8b c0       	rjmp	.+278    	; 0x190 <__vector_24+0x2c>
  7a:	8a c0       	rjmp	.+276    	; 0x190 <__vector_24+0x2c>
  7c:	89 c0       	rjmp	.+274    	; 0x190 <__vector_24+0x2c>
  7e:	88 c0       	rjmp	.+272    	; 0x190 <__vector_24+0x2c>
  80:	87 c0       	rjmp	.+270    	; 0x190 <__vector_24+0x2c>
  82:	86 c0       	rjmp	.+268    	; 0x190 <__vector_24+0x2c>
  84:	85 c0       	rjmp	.+266    	; 0x190 <__vector_24+0x2c>
  86:	84 c0       	rjmp	.+264    	; 0x190 <__vector_24+0x2c>
  88:	83 c0       	rjmp	.+262    	; 0x190 <__vector_24+0x2c>
  8a:	82 c0       	rjmp	.+260    	; 0x190 <__vector_24+0x2c>
  8c:	81 c0       	rjmp	.+258    	; 0x190 <__vector_24+0x2c>
  8e:	80 c0       	rjmp	.+256    	; 0x190 <__vector_24+0x2c>
  90:	7f c0       	rjmp	.+254    	; 0x190 <__vector_24+0x2c>
  92:	7e c0       	rjmp	.+252    	; 0x190 <__vector_24+0x2c>
  94:	c4 c0       	rjmp	.+392    	; 0x21e <__vector_24+0xba>
  96:	7c c0       	rjmp	.+248    	; 0x190 <__vector_24+0x2c>
  98:	7b c0       	rjmp	.+246    	; 0x190 <__vector_24+0x2c>
  9a:	7a c0       	rjmp	.+244    	; 0x190 <__vector_24+0x2c>
  9c:	79 c0       	rjmp	.+242    	; 0x190 <__vector_24+0x2c>
  9e:	78 c0       	rjmp	.+240    	; 0x190 <__vector_24+0x2c>
  a0:	77 c0       	rjmp	.+238    	; 0x190 <__vector_24+0x2c>
  a2:	76 c0       	rjmp	.+236    	; 0x190 <__vector_24+0x2c>
  a4:	c0 c0       	rjmp	.+384    	; 0x226 <__vector_24+0xc2>
  a6:	74 c0       	rjmp	.+232    	; 0x190 <__vector_24+0x2c>
  a8:	73 c0       	rjmp	.+230    	; 0x190 <__vector_24+0x2c>
  aa:	72 c0       	rjmp	.+228    	; 0x190 <__vector_24+0x2c>
  ac:	71 c0       	rjmp	.+226    	; 0x190 <__vector_24+0x2c>
  ae:	70 c0       	rjmp	.+224    	; 0x190 <__vector_24+0x2c>
  b0:	6f c0       	rjmp	.+222    	; 0x190 <__vector_24+0x2c>
  b2:	6e c0       	rjmp	.+220    	; 0x190 <__vector_24+0x2c>
  b4:	6d c0       	rjmp	.+218    	; 0x190 <__vector_24+0x2c>
  b6:	6c c0       	rjmp	.+216    	; 0x190 <__vector_24+0x2c>
  b8:	6b c0       	rjmp	.+214    	; 0x190 <__vector_24+0x2c>
  ba:	6a c0       	rjmp	.+212    	; 0x190 <__vector_24+0x2c>
  bc:	69 c0       	rjmp	.+210    	; 0x190 <__vector_24+0x2c>
  be:	68 c0       	rjmp	.+208    	; 0x190 <__vector_24+0x2c>
  c0:	67 c0       	rjmp	.+206    	; 0x190 <__vector_24+0x2c>
  c2:	66 c0       	rjmp	.+204    	; 0x190 <__vector_24+0x2c>
  c4:	be c0       	rjmp	.+380    	; 0x242 <__vector_24+0xde>
  c6:	64 c0       	rjmp	.+200    	; 0x190 <__vector_24+0x2c>
  c8:	63 c0       	rjmp	.+198    	; 0x190 <__vector_24+0x2c>
  ca:	62 c0       	rjmp	.+196    	; 0x190 <__vector_24+0x2c>
  cc:	61 c0       	rjmp	.+194    	; 0x190 <__vector_24+0x2c>
  ce:	60 c0       	rjmp	.+192    	; 0x190 <__vector_24+0x2c>
  d0:	5f c0       	rjmp	.+190    	; 0x190 <__vector_24+0x2c>
  d2:	5e c0       	rjmp	.+188    	; 0x190 <__vector_24+0x2c>
  d4:	74 c0       	rjmp	.+232    	; 0x1be <__vector_24+0x5a>

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf ef       	ldi	r28, 0xFF	; 255
  dc:	d2 e0       	ldi	r29, 0x02	; 2
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	11 e0       	ldi	r17, 0x01	; 1
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b1 e0       	ldi	r27, 0x01	; 1
  e8:	ec e4       	ldi	r30, 0x4C	; 76
  ea:	f4 e0       	ldi	r31, 0x04	; 4
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a2 30       	cpi	r26, 0x02	; 2
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	a2 e0       	ldi	r26, 0x02	; 2
  fc:	b1 e0       	ldi	r27, 0x01	; 1
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	a1 36       	cpi	r26, 0x61	; 97
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	3d d1       	rcall	.+634    	; 0x384 <main>
 10a:	9e c1       	rjmp	.+828    	; 0x448 <_exit>

0000010c <__bad_interrupt>:
 10c:	79 cf       	rjmp	.-270    	; 0x0 <__vectors>

0000010e <__vector_18>:

//***********************************************************************
//                            USART0_recieve_interrupt
//**********************************************************************
//Get the temp command from the ATMega128
ISR(USART_RX_vect) {
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
    rx_m128_command = uart_getc();
 130:	1b d1       	rcall	.+566    	; 0x368 <uart_getc>
 132:	80 93 07 01 	sts	0x0107, r24
    if(rx_m128_command == 0xF0){
 136:	80 3f       	cpi	r24, 0xF0	; 240
 138:	89 f0       	breq	.+34     	; 0x15c <__vector_18+0x4e>
        //If the recieved command is valid send the temparature
        uart_puts(temp_string_array);
    }
    //new_data_needed = TRUE;
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti
//Get the temp command from the ATMega128
ISR(USART_RX_vect) {
    rx_m128_command = uart_getc();
    if(rx_m128_command == 0xF0){
        //If the recieved command is valid send the temparature
        uart_puts(temp_string_array);
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	c6 d0       	rcall	.+396    	; 0x2ee <uart_puts>
 162:	eb cf       	rjmp	.-42     	; 0x13a <__vector_18+0x2c>

00000164 <__vector_24>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 17e:	e0 91 b9 00 	lds	r30, 0x00B9
 182:	8e 2f       	mov	r24, r30
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	fc 01       	movw	r30, r24
 188:	38 97       	sbiw	r30, 0x08	; 8
 18a:	e1 35       	cpi	r30, 0x51	; 81
 18c:	f1 05       	cpc	r31, r1
 18e:	a0 f0       	brcs	.+40     	; 0x1b8 <__vector_24+0x54>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 190:	80 91 b9 00 	lds	r24, 0x00B9
 194:	80 93 08 01 	sts	0x0108, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	80 93 bc 00 	sts	0x00BC, r24
  }//switch
}//TWI_isr
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 1b8:	e6 5e       	subi	r30, 0xE6	; 230
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	09 94       	ijmp
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 1be:	80 91 02 01 	lds	r24, 0x0102
 1c2:	e0 91 09 01 	lds	r30, 0x0109
 1c6:	f0 91 0a 01 	lds	r31, 0x010A
 1ca:	e8 0f       	add	r30, r24
 1cc:	f1 1d       	adc	r31, r1
 1ce:	80 91 bb 00 	lds	r24, 0x00BB
 1d2:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 1d4:	84 e9       	ldi	r24, 0x94	; 148
 1d6:	80 93 bc 00 	sts	0x00BC, r24
      break;      
 1da:	e1 cf       	rjmp	.-62     	; 0x19e <__vector_24+0x3a>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 1dc:	80 91 0b 01 	lds	r24, 0x010B
 1e0:	80 93 bb 00 	sts	0x00BB, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
 1e4:	10 92 02 01 	sts	0x0102, r1
      TWCR = TWCR_SEND;     //send SLA+RW
 1e8:	85 e8       	ldi	r24, 0x85	; 133
 1ea:	80 93 bc 00 	sts	0x00BC, r24
      break;
 1ee:	d7 cf       	rjmp	.-82     	; 0x19e <__vector_24+0x3a>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 1f0:	80 91 02 01 	lds	r24, 0x0102
 1f4:	90 91 0c 01 	lds	r25, 0x010C
 1f8:	89 17       	cp	r24, r25
 1fa:	60 f7       	brcc	.-40     	; 0x1d4 <__vector_24+0x70>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 1fc:	e0 91 09 01 	lds	r30, 0x0109
 200:	f0 91 0a 01 	lds	r31, 0x010A
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	98 0f       	add	r25, r24
 208:	90 93 02 01 	sts	0x0102, r25
 20c:	e8 0f       	add	r30, r24
 20e:	f1 1d       	adc	r31, r1
 210:	80 81       	ld	r24, Z
 212:	80 93 bb 00 	sts	0x00BB, r24
        TWCR = TWCR_SEND;               //send next byte 
 216:	85 e8       	ldi	r24, 0x85	; 133
 218:	80 93 bc 00 	sts	0x00BC, r24
 21c:	c0 cf       	rjmp	.-128    	; 0x19e <__vector_24+0x3a>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 21e:	85 ea       	ldi	r24, 0xA5	; 165
 220:	80 93 bc 00 	sts	0x00BC, r24
      break;
 224:	bc cf       	rjmp	.-136    	; 0x19e <__vector_24+0x3a>
 226:	20 91 02 01 	lds	r18, 0x0102
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 22a:	80 91 0c 01 	lds	r24, 0x010C
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	28 17       	cp	r18, r24
 236:	39 07       	cpc	r19, r25
 238:	dc f4       	brge	.+54     	; 0x270 <__vector_24+0x10c>
 23a:	85 ec       	ldi	r24, 0xC5	; 197
 23c:	80 93 bc 00 	sts	0x00BC, r24
 240:	ae cf       	rjmp	.-164    	; 0x19e <__vector_24+0x3a>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 242:	e0 91 09 01 	lds	r30, 0x0109
 246:	f0 91 0a 01 	lds	r31, 0x010A
 24a:	80 91 02 01 	lds	r24, 0x0102
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	28 0f       	add	r18, r24
 252:	20 93 02 01 	sts	0x0102, r18
 256:	e8 0f       	add	r30, r24
 258:	f1 1d       	adc	r31, r1
 25a:	80 91 bb 00 	lds	r24, 0x00BB
 25e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 260:	80 91 0c 01 	lds	r24, 0x010C
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	28 17       	cp	r18, r24
 26c:	39 07       	cpc	r19, r25
 26e:	2c f3       	brlt	.-54     	; 0x23a <__vector_24+0xd6>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 270:	85 e8       	ldi	r24, 0x85	; 133
 272:	80 93 bc 00 	sts	0x00BC, r24
 276:	93 cf       	rjmp	.-218    	; 0x19e <__vector_24+0x3a>

00000278 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 278:	80 91 bc 00 	lds	r24, 0x00BC
}
 27c:	81 70       	andi	r24, 0x01	; 1
 27e:	08 95       	ret

00000280 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 280:	90 91 bc 00 	lds	r25, 0x00BC
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 284:	90 fd       	sbrc	r25, 0
 286:	fc cf       	rjmp	.-8      	; 0x280 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	80 93 0b 01 	sts	0x010B, r24
  twi_buf = twi_data;                   //load pointer to write buffer
 28e:	70 93 0a 01 	sts	0x010A, r23
 292:	60 93 09 01 	sts	0x0109, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
 296:	40 93 0c 01 	sts	0x010C, r20
  TWCR = TWCR_START;                    //initiate START
 29a:	85 ea       	ldi	r24, 0xA5	; 165
 29c:	80 93 bc 00 	sts	0x00BC, r24
 2a0:	08 95       	ret

000002a2 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 2a2:	90 91 bc 00 	lds	r25, 0x00BC
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 2a6:	90 fd       	sbrc	r25, 0
 2a8:	fc cf       	rjmp	.-8      	; 0x2a2 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 2aa:	81 60       	ori	r24, 0x01	; 1
 2ac:	80 93 0b 01 	sts	0x010B, r24
  twi_buf = twi_data;                  //load pointer to write buffer
 2b0:	70 93 0a 01 	sts	0x010A, r23
 2b4:	60 93 09 01 	sts	0x0109, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
 2b8:	40 93 0c 01 	sts	0x010C, r20
  TWCR = TWCR_START;                   //initiate START
 2bc:	85 ea       	ldi	r24, 0xA5	; 165
 2be:	80 93 bc 00 	sts	0x00BC, r24
 2c2:	08 95       	ret

000002c4 <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	80 93 bb 00 	sts	0x00BB, r24
  TWSR = 0x00;     //prescaler value = 1
 2ca:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
 2ce:	8c e0       	ldi	r24, 0x0C	; 12
 2d0:	80 93 b8 00 	sts	0x00B8, r24
 2d4:	08 95       	ret

000002d6 <lm73_temp_convert>:
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

//Yeah, this is for you to do! ;^)

}//lm73_temp_convert
 2d6:	08 95       	ret

000002d8 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 2d8:	90 91 c0 00 	lds	r25, 0x00C0
 2dc:	95 ff       	sbrs	r25, 5
 2de:	fc cf       	rjmp	.-8      	; 0x2d8 <uart_putc>
    UDR0 = data;    // Send data byte
 2e0:	80 93 c6 00 	sts	0x00C6, r24
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 2e4:	80 91 c0 00 	lds	r24, 0x00C0
 2e8:	85 ff       	sbrs	r24, 5
 2ea:	fc cf       	rjmp	.-8      	; 0x2e4 <uart_putc+0xc>
}
 2ec:	08 95       	ret

000002ee <uart_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 81       	ld	r18, Z
 2f2:	22 23       	and	r18, r18
 2f4:	71 f0       	breq	.+28     	; 0x312 <__stack+0x13>
 2f6:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 2f8:	90 91 c0 00 	lds	r25, 0x00C0
 2fc:	95 ff       	sbrs	r25, 5
 2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 300:	20 93 c6 00 	sts	0x00C6, r18
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 304:	90 91 c0 00 	lds	r25, 0x00C0
 308:	95 ff       	sbrs	r25, 5
 30a:	fc cf       	rjmp	.-8      	; 0x304 <__stack+0x5>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 30c:	21 91       	ld	r18, Z+
 30e:	21 11       	cpse	r18, r1
 310:	f3 cf       	rjmp	.-26     	; 0x2f8 <uart_puts+0xa>
 312:	08 95       	ret

00000314 <uart_puts_p>:

//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
 314:	9c 01       	movw	r18, r24
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 316:	c9 01       	movw	r24, r18
 318:	f9 01       	movw	r30, r18
 31a:	44 91       	lpm	r20, Z
 31c:	44 23       	and	r20, r20
 31e:	99 f0       	breq	.+38     	; 0x346 <uart_puts_p+0x32>
        uart_putc(pgm_read_byte(str++));
 320:	2f 5f       	subi	r18, 0xFF	; 255
 322:	3f 4f       	sbci	r19, 0xFF	; 255
 324:	fc 01       	movw	r30, r24
 326:	84 91       	lpm	r24, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 328:	90 91 c0 00 	lds	r25, 0x00C0
 32c:	95 ff       	sbrs	r25, 5
 32e:	fc cf       	rjmp	.-8      	; 0x328 <uart_puts_p+0x14>
    UDR0 = data;    // Send data byte
 330:	80 93 c6 00 	sts	0x00C6, r24
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 334:	90 91 c0 00 	lds	r25, 0x00C0
 338:	95 ff       	sbrs	r25, 5
 33a:	fc cf       	rjmp	.-8      	; 0x334 <uart_puts_p+0x20>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 33c:	c9 01       	movw	r24, r18
 33e:	f9 01       	movw	r30, r18
 340:	44 91       	lpm	r20, Z
 342:	41 11       	cpse	r20, r1
 344:	ed cf       	rjmp	.-38     	; 0x320 <uart_puts_p+0xc>
        uart_putc(pgm_read_byte(str++));
    }
}
 346:	08 95       	ret

00000348 <uart_init>:
//RXD is PORT D bit 0
//TXD is PORT D bit 1

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
 348:	e1 ec       	ldi	r30, 0xC1	; 193
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	88 69       	ori	r24, 0x98	; 152
 350:	80 83       	st	Z, r24
//UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 352:	e2 ec       	ldi	r30, 0xC2	; 194
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	86 60       	ori	r24, 0x06	; 6
 35a:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 35c:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 360:	83 e3       	ldi	r24, 0x33	; 51
 362:	80 93 c4 00 	sts	0x00C4, r24
 366:	08 95       	ret

00000368 <uart_getc>:
 368:	80 e8       	ldi	r24, 0x80	; 128
 36a:	9e e3       	ldi	r25, 0x3E	; 62
 36c:	02 c0       	rjmp	.+4      	; 0x372 <uart_getc+0xa>
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	39 f0       	breq	.+14     	; 0x380 <uart_getc+0x18>
 372:	20 91 c0 00 	lds	r18, 0x00C0
 376:	27 ff       	sbrs	r18, 7
 378:	fa cf       	rjmp	.-12     	; 0x36e <uart_getc+0x6>
 37a:	80 91 c6 00 	lds	r24, 0x00C6
 37e:	08 95       	ret
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	08 95       	ret

00000384 <main>:



int main() {

    init_twi();
 384:	9f df       	rcall	.-194    	; 0x2c4 <init_twi>
    uart_init();
 386:	e0 df       	rcall	.-64     	; 0x348 <uart_init>
    sei();
 388:	78 94       	sei
  
    //Initial Temparature Data
    lm73_wr_buf[0] = 0x00;
 38a:	10 92 0d 01 	sts	0x010D, r1
    twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2);
 38e:	42 e0       	ldi	r20, 0x02	; 2
 390:	6d e0       	ldi	r22, 0x0D	; 13
 392:	71 e0       	ldi	r23, 0x01	; 1
 394:	80 e9       	ldi	r24, 0x90	; 144
 396:	74 df       	rcall	.-280    	; 0x280 <twi_start_wr>
    
    lm73_temp = (lm73_rd_buf[0] << 8) | (lm73_rd_buf[1]);
 398:	80 91 0f 01 	lds	r24, 0x010F
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	98 2f       	mov	r25, r24
 3a0:	88 27       	eor	r24, r24
 3a2:	20 91 10 01 	lds	r18, 0x0110
 3a6:	82 2b       	or	r24, r18
    lm73_temp = lm73_temp >> 7;
 3a8:	88 0f       	add	r24, r24
 3aa:	89 2f       	mov	r24, r25
 3ac:	88 1f       	adc	r24, r24
 3ae:	99 0b       	sbc	r25, r25
 3b0:	91 95       	neg	r25
 3b2:	90 93 06 01 	sts	0x0106, r25
 3b6:	80 93 05 01 	sts	0x0105, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3ba:	4a e0       	ldi	r20, 0x0A	; 10
 3bc:	63 e0       	ldi	r22, 0x03	; 3
 3be:	71 e0       	ldi	r23, 0x01	; 1
 3c0:	10 d0       	rcall	.+32     	; 0x3e2 <__itoa_ncheck>
 3c2:	80 91 00 01 	lds	r24, 0x0100
    itoa(lm73_temp, temp_string_array, 10);  
  
    
    while(1) {
      //Get new data once the USART Intterupt Sends
      if(new_data_needed == TRUE){
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <main+0x42>
          //Read the temp over TWI
          twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2);
 3ca:	42 e0       	ldi	r20, 0x02	; 2
 3cc:	6f e0       	ldi	r22, 0x0F	; 15
 3ce:	71 e0       	ldi	r23, 0x01	; 1
 3d0:	80 e9       	ldi	r24, 0x90	; 144
 3d2:	67 df       	rcall	.-306    	; 0x2a2 <twi_start_rd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d4:	8f e9       	ldi	r24, 0x9F	; 159
 3d6:	9f e0       	ldi	r25, 0x0F	; 15
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <main+0x54>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <main+0x5a>
 3de:	00 00       	nop
 3e0:	db cf       	rjmp	.-74     	; 0x398 <main+0x14>

000003e2 <__itoa_ncheck>:
 3e2:	bb 27       	eor	r27, r27
 3e4:	4a 30       	cpi	r20, 0x0A	; 10
 3e6:	31 f4       	brne	.+12     	; 0x3f4 <__itoa_ncheck+0x12>
 3e8:	99 23       	and	r25, r25
 3ea:	22 f4       	brpl	.+8      	; 0x3f4 <__itoa_ncheck+0x12>
 3ec:	bd e2       	ldi	r27, 0x2D	; 45
 3ee:	90 95       	com	r25
 3f0:	81 95       	neg	r24
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <__utoa_common>

000003f6 <__utoa_ncheck>:
 3f6:	bb 27       	eor	r27, r27

000003f8 <__utoa_common>:
 3f8:	fb 01       	movw	r30, r22
 3fa:	55 27       	eor	r21, r21
 3fc:	aa 27       	eor	r26, r26
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	aa 1f       	adc	r26, r26
 404:	a4 17       	cp	r26, r20
 406:	10 f0       	brcs	.+4      	; 0x40c <__utoa_common+0x14>
 408:	a4 1b       	sub	r26, r20
 40a:	83 95       	inc	r24
 40c:	50 51       	subi	r21, 0x10	; 16
 40e:	b9 f7       	brne	.-18     	; 0x3fe <__utoa_common+0x6>
 410:	a0 5d       	subi	r26, 0xD0	; 208
 412:	aa 33       	cpi	r26, 0x3A	; 58
 414:	08 f0       	brcs	.+2      	; 0x418 <__utoa_common+0x20>
 416:	a9 5d       	subi	r26, 0xD9	; 217
 418:	a1 93       	st	Z+, r26
 41a:	00 97       	sbiw	r24, 0x00	; 0
 41c:	79 f7       	brne	.-34     	; 0x3fc <__utoa_common+0x4>
 41e:	b1 11       	cpse	r27, r1
 420:	b1 93       	st	Z+, r27
 422:	11 92       	st	Z+, r1
 424:	cb 01       	movw	r24, r22
 426:	00 c0       	rjmp	.+0      	; 0x428 <strrev>

00000428 <strrev>:
 428:	dc 01       	movw	r26, r24
 42a:	fc 01       	movw	r30, r24
 42c:	67 2f       	mov	r22, r23
 42e:	71 91       	ld	r23, Z+
 430:	77 23       	and	r23, r23
 432:	e1 f7       	brne	.-8      	; 0x42c <strrev+0x4>
 434:	32 97       	sbiw	r30, 0x02	; 2
 436:	04 c0       	rjmp	.+8      	; 0x440 <strrev+0x18>
 438:	7c 91       	ld	r23, X
 43a:	6d 93       	st	X+, r22
 43c:	70 83       	st	Z, r23
 43e:	62 91       	ld	r22, -Z
 440:	ae 17       	cp	r26, r30
 442:	bf 07       	cpc	r27, r31
 444:	c8 f3       	brcs	.-14     	; 0x438 <strrev+0x10>
 446:	08 95       	ret

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
