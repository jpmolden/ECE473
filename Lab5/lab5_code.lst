
lab5_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00001620  000016b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001620  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  0080014c  0080014c  00001700  2**0
                  ALLOC
  3 .stab         00003bb8  00000000  00000000  00001700  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000182e  00000000  00000000  000052b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006ae6  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006af8  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      24:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__vector_9>
      28:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__vector_10>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 86 04 	jmp	0x90c	; 0x90c <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__vector_18>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	06 09       	sbc	r16, r6
      8e:	dd 08       	sbc	r13, r13
      90:	dd 08       	sbc	r13, r13
      92:	dd 08       	sbc	r13, r13
      94:	dd 08       	sbc	r13, r13
      96:	dd 08       	sbc	r13, r13
      98:	dd 08       	sbc	r13, r13
      9a:	dd 08       	sbc	r13, r13
      9c:	06 09       	sbc	r16, r6
      9e:	dd 08       	sbc	r13, r13
      a0:	dd 08       	sbc	r13, r13
      a2:	dd 08       	sbc	r13, r13
      a4:	dd 08       	sbc	r13, r13
      a6:	dd 08       	sbc	r13, r13
      a8:	dd 08       	sbc	r13, r13
      aa:	dd 08       	sbc	r13, r13
      ac:	10 09       	sbc	r17, r0
      ae:	dd 08       	sbc	r13, r13
      b0:	dd 08       	sbc	r13, r13
      b2:	dd 08       	sbc	r13, r13
      b4:	dd 08       	sbc	r13, r13
      b6:	dd 08       	sbc	r13, r13
      b8:	dd 08       	sbc	r13, r13
      ba:	dd 08       	sbc	r13, r13
      bc:	dd 08       	sbc	r13, r13
      be:	dd 08       	sbc	r13, r13
      c0:	dd 08       	sbc	r13, r13
      c2:	dd 08       	sbc	r13, r13
      c4:	dd 08       	sbc	r13, r13
      c6:	dd 08       	sbc	r13, r13
      c8:	dd 08       	sbc	r13, r13
      ca:	dd 08       	sbc	r13, r13
      cc:	10 09       	sbc	r17, r0
      ce:	dd 08       	sbc	r13, r13
      d0:	dd 08       	sbc	r13, r13
      d2:	dd 08       	sbc	r13, r13
      d4:	dd 08       	sbc	r13, r13
      d6:	dd 08       	sbc	r13, r13
      d8:	dd 08       	sbc	r13, r13
      da:	dd 08       	sbc	r13, r13
      dc:	dd 08       	sbc	r13, r13
      de:	dd 08       	sbc	r13, r13
      e0:	dd 08       	sbc	r13, r13
      e2:	dd 08       	sbc	r13, r13
      e4:	dd 08       	sbc	r13, r13
      e6:	dd 08       	sbc	r13, r13
      e8:	dd 08       	sbc	r13, r13
      ea:	dd 08       	sbc	r13, r13
      ec:	27 09       	sbc	r18, r7
      ee:	dd 08       	sbc	r13, r13
      f0:	dd 08       	sbc	r13, r13
      f2:	dd 08       	sbc	r13, r13
      f4:	dd 08       	sbc	r13, r13
      f6:	dd 08       	sbc	r13, r13
      f8:	dd 08       	sbc	r13, r13
      fa:	dd 08       	sbc	r13, r13
      fc:	2b 09       	sbc	r18, r11
      fe:	dd 08       	sbc	r13, r13
     100:	dd 08       	sbc	r13, r13
     102:	dd 08       	sbc	r13, r13
     104:	dd 08       	sbc	r13, r13
     106:	dd 08       	sbc	r13, r13
     108:	dd 08       	sbc	r13, r13
     10a:	dd 08       	sbc	r13, r13
     10c:	dd 08       	sbc	r13, r13
     10e:	dd 08       	sbc	r13, r13
     110:	dd 08       	sbc	r13, r13
     112:	dd 08       	sbc	r13, r13
     114:	dd 08       	sbc	r13, r13
     116:	dd 08       	sbc	r13, r13
     118:	dd 08       	sbc	r13, r13
     11a:	dd 08       	sbc	r13, r13
     11c:	39 09       	sbc	r19, r9
     11e:	dd 08       	sbc	r13, r13
     120:	dd 08       	sbc	r13, r13
     122:	dd 08       	sbc	r13, r13
     124:	dd 08       	sbc	r13, r13
     126:	dd 08       	sbc	r13, r13
     128:	dd 08       	sbc	r13, r13
     12a:	dd 08       	sbc	r13, r13
     12c:	f7 08       	sbc	r15, r7

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e0 e2       	ldi	r30, 0x20	; 32
     142:	f6 e1       	ldi	r31, 0x16	; 22
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	ac 34       	cpi	r26, 0x4C	; 76
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	21 e0       	ldi	r18, 0x01	; 1
     156:	ac e4       	ldi	r26, 0x4C	; 76
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	aa 3f       	cpi	r26, 0xFA	; 250
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 c2 09 	call	0x1384	; 0x1384 <main>
     168:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <spi_init>:

//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(){
  DDRB   = 0xF7; //output mode for SS, MOSI, SCLK & Pins 4-7 (7Seg & Bar Graph)
     170:	87 ef       	ldi	r24, 0xF7	; 247
     172:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); // Enable SPI, master mode, clk low on idle, leading edge sample
     174:	80 e5       	ldi	r24, 0x50	; 80
     176:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (0<<SPI2X); //No double speed operation
     178:	1e b8       	out	0x0e, r1	; 14
     17a:	08 95       	ret

0000017c <init_tcnt0>:
// Triggers a 1 sec TOV Interrupt.
//
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
     17c:	80 b7       	in	r24, 0x30	; 48
     17e:	88 60       	ori	r24, 0x08	; 8
     180:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE0);  //TimerOverflow Interrupt Enable
     182:	87 b7       	in	r24, 0x37	; 55
     184:	81 60       	ori	r24, 0x01	; 1
     186:	87 bf       	out	0x37, r24	; 55
  TCCR0 =  (1<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode, 128 prescale, OC0 Disconnected
     188:	85 e0       	ldi	r24, 0x05	; 5
     18a:	83 bf       	out	0x33, r24	; 51
     18c:	08 95       	ret

0000018e <init_tcnt1>:
//
// setup TCNT1 in pwm mode
// set OC1A (PB5) as pwm output
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);
     18e:	8f b5       	in	r24, 0x2f	; 47
     190:	82 60       	ori	r24, 0x02	; 2
     192:	8f bd       	out	0x2f, r24	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10);
     194:	8e b5       	in	r24, 0x2e	; 46
     196:	89 61       	ori	r24, 0x19	; 25
     198:	8e bd       	out	0x2e, r24	; 46
	//no forced compare
	TCCR1C = 0x00;
     19a:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 ec       	ldi	r25, 0xC0	; 192
     1a2:	9b bd       	out	0x2b, r25	; 43
     1a4:	8a bd       	out	0x2a, r24	; 42
	ICR1  = 0xF000; //clear at 0xF000
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 ef       	ldi	r25, 0xF0	; 240
     1aa:	97 bd       	out	0x27, r25	; 39
     1ac:	86 bd       	out	0x26, r24	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
     1ae:	87 b7       	in	r24, 0x37	; 55
     1b0:	80 61       	ori	r24, 0x10	; 16
     1b2:	87 bf       	out	0x37, r24	; 55
     1b4:	08 95       	ret

000001b6 <init_tcnt2>:
//**********************************************************************
void init_tcnt2(){
// 7-Seg Brigtness PWM

  //enable interrupts for Timer/Counter2 overflow
  TIMSK |= (1<<TOIE2) | (0<<OCIE2);  //TimerOverflow Interrupt Enable
     1b6:	87 b7       	in	r24, 0x37	; 55
     1b8:	80 64       	ori	r24, 0x40	; 64
     1ba:	87 bf       	out	0x37, r24	; 55
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (1<<CS21) | (1<<CS20);
     1bc:	8b e7       	ldi	r24, 0x7B	; 123
     1be:	85 bd       	out	0x25, r24	; 37
	//Fast-PWM mode, Inverting PWM Mode, 64 prescale, OC2(PB7)(PWM) Connected
	//0-256 takes 1ms (16k CLKIO cycles)
  OCR2 =  0xF0;                   //compare at 128(50%)
     1c0:	80 ef       	ldi	r24, 0xF0	; 240
     1c2:	83 bd       	out	0x23, r24	; 35
     1c4:	08 95       	ret

000001c6 <init_tcnt3>:
//                            timer/counter3_init
//**********************************************************************
void init_tcnt3(){
// Volume PWM
// setup TCNT3 in pwm mode
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0) | (0<<WGM31) | (1<<WGM30);
     1c6:	eb e8       	ldi	r30, 0x8B	; 139
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	81 68       	ori	r24, 0x81	; 129
     1ce:	80 83       	st	Z, r24
	// Fast PWM, 8-Bit mode top 0x00FF
	// Clear OC3A on compare match, Fast PWM (non-inverting)
	//use ICR1 as source for TOP, use clk/1
	TCCR3B |= (0<<WGM33) | (1<< WGM32) | (1<<CS30);
     1d0:	ea e8       	ldi	r30, 0x8A	; 138
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	89 60       	ori	r24, 0x09	; 9
     1d8:	80 83       	st	Z, r24
	// No prescaling
	//no forced compare
	TCCR3C = 0x00;
     1da:	10 92 8c 00 	sts	0x008C, r1
	//20% duty cycle, LED is a bit dimmer
	OCR3A = 0x00CD; // Initally at 50% Duty Cycle
     1de:	8d ec       	ldi	r24, 0xCD	; 205
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	90 93 87 00 	sts	0x0087, r25
     1e6:	80 93 86 00 	sts	0x0086, r24
     1ea:	08 95       	ret

000001ec <init_DDRs>:
//                            timer/counter0_init
//**********************************************************************
void init_DDRs(){
// Add HERE
	// Set the DDR for Ports
	DDRA = DDRA_OUTPUT; // 7-Seg Data out
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	8a bb       	out	0x1a, r24	; 26
	DDRE = (1<<PE3) | (1<<PE5) | (1<<PE6) | (1<<PE7);
     1f0:	88 ee       	ldi	r24, 0xE8	; 232
     1f2:	82 b9       	out	0x02, r24	; 2
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
     1f4:	84 e0       	ldi	r24, 0x04	; 4
     1f6:	81 bb       	out	0x11, r24	; 17
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	84 bb       	out	0x14, r24	; 20
	incdec_mode = 0x01;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 51 01 	sts	0x0151, r24
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
     202:	85 e5       	ldi	r24, 0x55	; 85
     204:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
     206:	77 9b       	sbis	0x0e, 7	; 14
     208:	fe cf       	rjmp	.-4      	; 0x206 <init_DDRs+0x1a>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
     20a:	8f b1       	in	r24, 0x0f	; 15
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
	incdec_mode = 0x01;
	// Read the starting encoder positions
	old_encoder = spi_rw8(0x55);
     20c:	80 93 4e 01 	sts	0x014E, r24
     210:	08 95       	ret

00000212 <init_ADC>:
//                            init_adc
//**********************************************************************
void init_ADC(){
// ADC used to read brightness levels using a photoresistor
	//Initalize ADC and its ports
	DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input
     212:	e1 e6       	ldi	r30, 0x61	; 97
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	8f 77       	andi	r24, 0x7F	; 127
     21a:	80 83       	st	Z, r24
	PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
     21c:	e2 e6       	ldi	r30, 0x62	; 98
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	8f 77       	andi	r24, 0x7F	; 127
     224:	80 83       	st	Z, r24

	ADMUX = (1<<ADLAR) | (1<<REFS0) | (1<<MUX0) | (1<<MUX1) | (1<<MUX2);
     226:	87 e6       	ldi	r24, 0x67	; 103
     228:	87 b9       	out	0x07, r24	; 7
	//ADMUX = (1<<MUX0) | (1<<MUX1) | (1<<MUX2)
	//single-ended, input PORTF bit 7, right adjusted, 10 bits

	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     22a:	87 e8       	ldi	r24, 0x87	; 135
     22c:	86 b9       	out	0x06, r24	; 6
     22e:	08 95       	ret

00000230 <disable_tcnt1>:
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
     230:	88 e1       	ldi	r24, 0x18	; 24
     232:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
     234:	87 b7       	in	r24, 0x37	; 55
     236:	8f 7e       	andi	r24, 0xEF	; 239
     238:	87 bf       	out	0x37, r24	; 55
     23a:	08 95       	ret

0000023c <disable_timer2>:
// Add HERE
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  //enable interrupts for output compare match 0
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (0<<CS21) | (0<<CS20);
     23c:	88 e7       	ldi	r24, 0x78	; 120
     23e:	85 bd       	out	0x25, r24	; 37
     240:	08 95       	ret

00000242 <spi_rw8>:
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
     242:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
     244:	77 9b       	sbis	0x0e, 7	; 14
     246:	fe cf       	rjmp	.-4      	; 0x244 <spi_rw8+0x2>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
     248:	8f b1       	in	r24, 0x0f	; 15
	return(data);
}
     24a:	08 95       	ret

0000024c <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
     24c:	48 2f       	mov	r20, r24
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     24e:	e8 2f       	mov	r30, r24
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	99 b3       	in	r25, 0x19	; 25
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	ed 5a       	subi	r30, 0xAD	; 173
     25a:	fe 4f       	sbci	r31, 0xFE	; 254
     25c:	20 81       	ld	r18, Z
     25e:	31 81       	ldd	r19, Z+1	; 0x01
     260:	22 0f       	add	r18, r18
     262:	33 1f       	adc	r19, r19
     264:	30 6e       	ori	r19, 0xE0	; 224
     266:	89 2f       	mov	r24, r25
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <chk_buttons+0x24>
     26c:	95 95       	asr	r25
     26e:	87 95       	ror	r24
     270:	4a 95       	dec	r20
     272:	e2 f7       	brpl	.-8      	; 0x26c <chk_buttons+0x20>
     274:	81 70       	andi	r24, 0x01	; 1
     276:	99 27       	eor	r25, r25
     278:	28 2b       	or	r18, r24
     27a:	39 2b       	or	r19, r25
     27c:	31 83       	std	Z+1, r19	; 0x01
     27e:	20 83       	st	Z, r18
        if(state[button] == 0xF000) return 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	21 15       	cp	r18, r1
     284:	30 4f       	sbci	r19, 0xF0	; 240
     286:	09 f0       	breq	.+2      	; 0x28a <chk_buttons+0x3e>
     288:	80 e0       	ldi	r24, 0x00	; 0
        return 0;

//******************************************************************************
}
     28a:	08 95       	ret

0000028c <volume_up>:


//***********************************************************************
//                            volume_up
//**********************************************************************
void volume_up(){
     28c:	08 95       	ret

0000028e <volume_down>:


//***********************************************************************
//                            volume_down
//**********************************************************************
void volume_down(){
     28e:	08 95       	ret

00000290 <segsum>:
        //if(sum >= 1)(no_digits = 1);
        //if(sum >= 10)(no_digits = 2);
        //if(sum >= 100)(no_digits = 3);
        //if(sum >= 1000)(no_digits = 4);

	switch(xmode){
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	09 f4       	brne	.+2      	; 0x296 <segsum+0x6>
     294:	4e c0       	rjmp	.+156    	; 0x332 <segsum+0xa2>
     296:	08 f4       	brcc	.+2      	; 0x29a <segsum+0xa>
     298:	ac c0       	rjmp	.+344    	; 0x3f2 <segsum+0x162>
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	19 f0       	breq	.+6      	; 0x2a4 <segsum+0x14>
     29e:	83 30       	cpi	r24, 0x03	; 3
     2a0:	c1 f1       	breq	.+112    	; 0x312 <segsum+0x82>
     2a2:	08 95       	ret
			// Alarm armed bit into same position as L3 on 7Seg
			segment_data[3] = dec_to_7seg[((alarm_hours)/1) %10];
			segment_data[4] = dec_to_7seg[((alarm_hours)/10) %10];
			break;
		case Clock_set_mode:
			if((seconds % 2) == 1){
     2a4:	80 91 03 01 	lds	r24, 0x0103
     2a8:	80 ff       	sbrs	r24, 0
     2aa:	37 c0       	rjmp	.+110    	; 0x31a <segsum+0x8a>
				segment_data[0] = dec_to_7seg[(mins/1) %10];
     2ac:	e0 91 04 01 	lds	r30, 0x0104
     2b0:	8d ec       	ldi	r24, 0xCD	; 205
     2b2:	e8 9f       	mul	r30, r24
     2b4:	91 2d       	mov	r25, r1
     2b6:	11 24       	eor	r1, r1
     2b8:	96 95       	lsr	r25
     2ba:	96 95       	lsr	r25
     2bc:	96 95       	lsr	r25
     2be:	2a e0       	ldi	r18, 0x0A	; 10
     2c0:	92 9f       	mul	r25, r18
     2c2:	e0 19       	sub	r30, r0
     2c4:	11 24       	eor	r1, r1
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	e0 5c       	subi	r30, 0xC0	; 192
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	90 81       	ld	r25, Z
     2ce:	90 93 8c 01 	sts	0x018C, r25
				segment_data[1] = dec_to_7seg[(mins/10) %10];
     2d2:	e0 91 04 01 	lds	r30, 0x0104
     2d6:	e8 9f       	mul	r30, r24
     2d8:	e1 2d       	mov	r30, r1
     2da:	11 24       	eor	r1, r1
     2dc:	e6 95       	lsr	r30
     2de:	e6 95       	lsr	r30
     2e0:	e6 95       	lsr	r30
     2e2:	e8 9f       	mul	r30, r24
     2e4:	91 2d       	mov	r25, r1
     2e6:	11 24       	eor	r1, r1
     2e8:	96 95       	lsr	r25
     2ea:	96 95       	lsr	r25
     2ec:	96 95       	lsr	r25
     2ee:	2a e0       	ldi	r18, 0x0A	; 10
     2f0:	92 9f       	mul	r25, r18
     2f2:	e0 19       	sub	r30, r0
     2f4:	11 24       	eor	r1, r1
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	e0 5c       	subi	r30, 0xC0	; 192
     2fa:	fe 4f       	sbci	r31, 0xFE	; 254
     2fc:	90 81       	ld	r25, Z
     2fe:	90 93 8d 01 	sts	0x018D, r25
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
     302:	90 91 06 01 	lds	r25, 0x0106
     306:	99 0f       	add	r25, r25
     308:	99 0f       	add	r25, r25
     30a:	90 95       	com	r25
     30c:	20 91 4b 01 	lds	r18, 0x014B
     310:	a9 c0       	rjmp	.+338    	; 0x464 <segsum+0x1d4>
				segment_data[3] = SEG_OFF;
				segment_data[4] = SEG_OFF;
			break;
			}
		case Alarm_set_mode:
			if((seconds % 2) == 1){
     312:	80 91 03 01 	lds	r24, 0x0103
     316:	80 fd       	sbrc	r24, 0
     318:	0c c0       	rjmp	.+24     	; 0x332 <segsum+0xa2>
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((hours)/1) %10];
				segment_data[4] = dec_to_7seg[((hours)/10) %10];
				break;
			}else{
				segment_data[0] = SEG_OFF;
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	80 93 8c 01 	sts	0x018C, r24
				segment_data[1] = SEG_OFF;
     320:	80 93 8d 01 	sts	0x018D, r24
				segment_data[2] = SEG_OFF;
     324:	80 93 8e 01 	sts	0x018E, r24
				segment_data[3] = SEG_OFF;
     328:	80 93 8f 01 	sts	0x018F, r24
				segment_data[4] = SEG_OFF;
     32c:	80 93 90 01 	sts	0x0190, r24
			break;
     330:	08 95       	ret
			}
		case Alarm_set_mode:
			if((seconds % 2) == 1){
				segment_data[0] = dec_to_7seg[(alarm_mins/1) %10];
     332:	e0 91 01 01 	lds	r30, 0x0101
     336:	8d ec       	ldi	r24, 0xCD	; 205
     338:	e8 9f       	mul	r30, r24
     33a:	91 2d       	mov	r25, r1
     33c:	11 24       	eor	r1, r1
     33e:	96 95       	lsr	r25
     340:	96 95       	lsr	r25
     342:	96 95       	lsr	r25
     344:	2a e0       	ldi	r18, 0x0A	; 10
     346:	92 9f       	mul	r25, r18
     348:	e0 19       	sub	r30, r0
     34a:	11 24       	eor	r1, r1
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	e0 5c       	subi	r30, 0xC0	; 192
     350:	fe 4f       	sbci	r31, 0xFE	; 254
     352:	90 81       	ld	r25, Z
     354:	90 93 8c 01 	sts	0x018C, r25
				segment_data[1] = dec_to_7seg[(alarm_mins/10) %10];
     358:	e0 91 01 01 	lds	r30, 0x0101
     35c:	e8 9f       	mul	r30, r24
     35e:	e1 2d       	mov	r30, r1
     360:	11 24       	eor	r1, r1
     362:	e6 95       	lsr	r30
     364:	e6 95       	lsr	r30
     366:	e6 95       	lsr	r30
     368:	e8 9f       	mul	r30, r24
     36a:	91 2d       	mov	r25, r1
     36c:	11 24       	eor	r1, r1
     36e:	96 95       	lsr	r25
     370:	96 95       	lsr	r25
     372:	96 95       	lsr	r25
     374:	2a e0       	ldi	r18, 0x0A	; 10
     376:	92 9f       	mul	r25, r18
     378:	e0 19       	sub	r30, r0
     37a:	11 24       	eor	r1, r1
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	e0 5c       	subi	r30, 0xC0	; 192
     380:	fe 4f       	sbci	r31, 0xFE	; 254
     382:	90 81       	ld	r25, Z
     384:	90 93 8d 01 	sts	0x018D, r25
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
     388:	90 91 06 01 	lds	r25, 0x0106
     38c:	99 0f       	add	r25, r25
     38e:	99 0f       	add	r25, r25
     390:	90 95       	com	r25
     392:	20 91 4b 01 	lds	r18, 0x014B
     396:	92 23       	and	r25, r18
     398:	90 93 8e 01 	sts	0x018E, r25
				//in dec_to_7seg index 11 = OFF, index 12 = Colon
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((alarm_hours)/1) %10];
     39c:	e0 91 02 01 	lds	r30, 0x0102
     3a0:	e8 9f       	mul	r30, r24
     3a2:	91 2d       	mov	r25, r1
     3a4:	11 24       	eor	r1, r1
     3a6:	96 95       	lsr	r25
     3a8:	96 95       	lsr	r25
     3aa:	96 95       	lsr	r25
     3ac:	2a e0       	ldi	r18, 0x0A	; 10
     3ae:	92 9f       	mul	r25, r18
     3b0:	e0 19       	sub	r30, r0
     3b2:	11 24       	eor	r1, r1
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	e0 5c       	subi	r30, 0xC0	; 192
     3b8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ba:	90 81       	ld	r25, Z
     3bc:	90 93 8f 01 	sts	0x018F, r25
				segment_data[4] = dec_to_7seg[((alarm_hours)/10) %10];
     3c0:	e0 91 02 01 	lds	r30, 0x0102
     3c4:	e8 9f       	mul	r30, r24
     3c6:	e1 2d       	mov	r30, r1
     3c8:	11 24       	eor	r1, r1
     3ca:	e6 95       	lsr	r30
     3cc:	e6 95       	lsr	r30
     3ce:	e6 95       	lsr	r30
     3d0:	e8 9f       	mul	r30, r24
     3d2:	81 2d       	mov	r24, r1
     3d4:	11 24       	eor	r1, r1
     3d6:	86 95       	lsr	r24
     3d8:	86 95       	lsr	r24
     3da:	86 95       	lsr	r24
     3dc:	9a e0       	ldi	r25, 0x0A	; 10
     3de:	89 9f       	mul	r24, r25
     3e0:	e0 19       	sub	r30, r0
     3e2:	11 24       	eor	r1, r1
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	e0 5c       	subi	r30, 0xC0	; 192
     3e8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ea:	80 81       	ld	r24, Z
     3ec:	80 93 90 01 	sts	0x0190, r24
     3f0:	08 95       	ret

	switch(xmode){
		case Clock_mode:
		  	//break up decimal sum into 4 digit-segment
			//The digits (0-9) are used as the index for the seven segment representation
			segment_data[0] = dec_to_7seg[(mins/1) %10];
     3f2:	e0 91 04 01 	lds	r30, 0x0104
     3f6:	8d ec       	ldi	r24, 0xCD	; 205
     3f8:	e8 9f       	mul	r30, r24
     3fa:	91 2d       	mov	r25, r1
     3fc:	11 24       	eor	r1, r1
     3fe:	96 95       	lsr	r25
     400:	96 95       	lsr	r25
     402:	96 95       	lsr	r25
     404:	2a e0       	ldi	r18, 0x0A	; 10
     406:	92 9f       	mul	r25, r18
     408:	e0 19       	sub	r30, r0
     40a:	11 24       	eor	r1, r1
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	e0 5c       	subi	r30, 0xC0	; 192
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	90 81       	ld	r25, Z
     414:	90 93 8c 01 	sts	0x018C, r25
			segment_data[1] = dec_to_7seg[(mins/10) %10];
     418:	e0 91 04 01 	lds	r30, 0x0104
     41c:	e8 9f       	mul	r30, r24
     41e:	e1 2d       	mov	r30, r1
     420:	11 24       	eor	r1, r1
     422:	e6 95       	lsr	r30
     424:	e6 95       	lsr	r30
     426:	e6 95       	lsr	r30
     428:	e8 9f       	mul	r30, r24
     42a:	91 2d       	mov	r25, r1
     42c:	11 24       	eor	r1, r1
     42e:	96 95       	lsr	r25
     430:	96 95       	lsr	r25
     432:	96 95       	lsr	r25
     434:	2a e0       	ldi	r18, 0x0A	; 10
     436:	92 9f       	mul	r25, r18
     438:	e0 19       	sub	r30, r0
     43a:	11 24       	eor	r1, r1
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	e0 5c       	subi	r30, 0xC0	; 192
     440:	fe 4f       	sbci	r31, 0xFE	; 254
     442:	90 81       	ld	r25, Z
     444:	90 93 8d 01 	sts	0x018D, r25
			if((xmode == Clock_mode)){
				segment_data[2] = dec_to_7seg[10 + (seconds % 2)] & (~(alarm_armed<<2));
     448:	40 91 03 01 	lds	r20, 0x0103
     44c:	90 91 06 01 	lds	r25, 0x0106
     450:	24 2f       	mov	r18, r20
     452:	21 70       	andi	r18, 0x01	; 1
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	f9 01       	movw	r30, r18
     458:	e0 5c       	subi	r30, 0xC0	; 192
     45a:	fe 4f       	sbci	r31, 0xFE	; 254
     45c:	99 0f       	add	r25, r25
     45e:	99 0f       	add	r25, r25
     460:	90 95       	com	r25
     462:	22 85       	ldd	r18, Z+10	; 0x0a
			break;
		case Clock_set_mode:
			if((seconds % 2) == 1){
				segment_data[0] = dec_to_7seg[(mins/1) %10];
				segment_data[1] = dec_to_7seg[(mins/10) %10];
				segment_data[2] = dec_to_7seg[11] & (~(alarm_armed<<2));
     464:	92 23       	and	r25, r18
     466:	90 93 8e 01 	sts	0x018E, r25
				//in dec_to_7seg index 11 = OFF, index 12 = Colon
				// Blinky Colon
				segment_data[3] = dec_to_7seg[((hours)/1) %10];
     46a:	e0 91 05 01 	lds	r30, 0x0105
     46e:	e8 9f       	mul	r30, r24
     470:	91 2d       	mov	r25, r1
     472:	11 24       	eor	r1, r1
     474:	96 95       	lsr	r25
     476:	96 95       	lsr	r25
     478:	96 95       	lsr	r25
     47a:	2a e0       	ldi	r18, 0x0A	; 10
     47c:	92 9f       	mul	r25, r18
     47e:	e0 19       	sub	r30, r0
     480:	11 24       	eor	r1, r1
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	e0 5c       	subi	r30, 0xC0	; 192
     486:	fe 4f       	sbci	r31, 0xFE	; 254
     488:	90 81       	ld	r25, Z
     48a:	90 93 8f 01 	sts	0x018F, r25
				segment_data[4] = dec_to_7seg[((hours)/10) %10];
     48e:	e0 91 05 01 	lds	r30, 0x0105
     492:	98 cf       	rjmp	.-208    	; 0x3c4 <segsum+0x134>

00000494 <encoders>:
	// The direction is determined by a state machine look up table 0=no change
	// 1=CCW, 2=CW
	//The old encoder value is place in posistion in b2 b3, 0x03 masks out other 1's

	uint8_t direction = 0;
	switch(clockmode){
     494:	80 91 50 01 	lds	r24, 0x0150
     498:	82 30       	cpi	r24, 0x02	; 2
     49a:	09 f4       	brne	.+2      	; 0x49e <encoders+0xa>
     49c:	40 c0       	rjmp	.+128    	; 0x51e <encoders+0x8a>
     49e:	83 30       	cpi	r24, 0x03	; 3
     4a0:	c9 f5       	brne	.+114    	; 0x514 <encoders+0x80>
					break;
			}
			break;
		case Alarm_set_mode:
			//Check encoder 1
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
     4a2:	e0 91 4e 01 	lds	r30, 0x014E
     4a6:	80 91 4f 01 	lds	r24, 0x014F
     4aa:	e3 70       	andi	r30, 0x03	; 3
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	ee 0f       	add	r30, r30
     4b0:	ff 1f       	adc	r31, r31
     4b2:	ee 0f       	add	r30, r30
     4b4:	ff 1f       	adc	r31, r31
     4b6:	83 70       	andi	r24, 0x03	; 3
     4b8:	e8 2b       	or	r30, r24
     4ba:	e9 5d       	subi	r30, 0xD9	; 217
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     4be:	80 81       	ld	r24, Z
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <encoders+0x32>
     4c4:	84 c0       	rjmp	.+264    	; 0x5ce <encoders+0x13a>
     4c6:	82 30       	cpi	r24, 0x02	; 2
     4c8:	51 f4       	brne	.+20     	; 0x4de <encoders+0x4a>
					}else{
						alarm_mins = 59;
					}
					break;
				case 2:
					if(alarm_mins < 59){
     4ca:	80 91 01 01 	lds	r24, 0x0101
     4ce:	8b 33       	cpi	r24, 0x3B	; 59
     4d0:	08 f0       	brcs	.+2      	; 0x4d4 <encoders+0x40>
     4d2:	8a c0       	rjmp	.+276    	; 0x5e8 <encoders+0x154>
						alarm_mins = alarm_mins + 1;
     4d4:	80 91 01 01 	lds	r24, 0x0101
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	80 93 01 01 	sts	0x0101, r24
					break;
			}
// Hi

			//Check encoder 2
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
     4de:	80 91 4e 01 	lds	r24, 0x014E
     4e2:	e0 91 4f 01 	lds	r30, 0x014F
     4e6:	ec 70       	andi	r30, 0x0C	; 12
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	f5 95       	asr	r31
     4ec:	e7 95       	ror	r30
     4ee:	f5 95       	asr	r31
     4f0:	e7 95       	ror	r30
     4f2:	8c 70       	andi	r24, 0x0C	; 12
     4f4:	e8 2b       	or	r30, r24
     4f6:	e9 5d       	subi	r30, 0xD9	; 217
     4f8:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     4fa:	80 81       	ld	r24, Z
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	09 f4       	brne	.+2      	; 0x502 <encoders+0x6e>
     500:	5c c0       	rjmp	.+184    	; 0x5ba <encoders+0x126>
     502:	82 30       	cpi	r24, 0x02	; 2
     504:	39 f4       	brne	.+14     	; 0x514 <encoders+0x80>
					}else{
						alarm_hours = 23;
					}
					break;
				case 2:
					if(alarm_hours < 23){
     506:	80 91 02 01 	lds	r24, 0x0102
     50a:	87 31       	cpi	r24, 0x17	; 23
     50c:	08 f4       	brcc	.+2      	; 0x510 <encoders+0x7c>
     50e:	82 c0       	rjmp	.+260    	; 0x614 <encoders+0x180>
						alarm_hours = alarm_hours + 1;
					}else{
						alarm_hours = 0;
     510:	10 92 02 01 	sts	0x0102, r1
			break;
		default:
			break;
	}
	//Replace the old encoder value
	old_encoder = encoder;
     514:	80 91 4f 01 	lds	r24, 0x014F
     518:	80 93 4e 01 	sts	0x014E, r24
     51c:	08 95       	ret
		case Alarm_mode:
			// Do Nothing
			break;
		case Clock_set_mode:
			//Check encoder 1
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
     51e:	e0 91 4e 01 	lds	r30, 0x014E
     522:	80 91 4f 01 	lds	r24, 0x014F
     526:	e3 70       	andi	r30, 0x03	; 3
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	ee 0f       	add	r30, r30
     530:	ff 1f       	adc	r31, r31
     532:	83 70       	andi	r24, 0x03	; 3
     534:	e8 2b       	or	r30, r24
     536:	e9 5d       	subi	r30, 0xD9	; 217
     538:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     53a:	80 81       	ld	r24, Z
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	49 f1       	breq	.+82     	; 0x592 <encoders+0xfe>
     540:	82 30       	cpi	r24, 0x02	; 2
     542:	51 f4       	brne	.+20     	; 0x558 <encoders+0xc4>
					}else{
						mins = 59;
					}
					break;
				case 2:
					if(mins < 59){
     544:	80 91 04 01 	lds	r24, 0x0104
     548:	8b 33       	cpi	r24, 0x3B	; 59
     54a:	08 f0       	brcs	.+2      	; 0x54e <encoders+0xba>
     54c:	54 c0       	rjmp	.+168    	; 0x5f6 <encoders+0x162>
						mins = mins + 1;
     54e:	80 91 04 01 	lds	r24, 0x0104
     552:	8f 5f       	subi	r24, 0xFF	; 255
     554:	80 93 04 01 	sts	0x0104, r24
					break;
			}


			//Check encoder 2
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
     558:	80 91 4e 01 	lds	r24, 0x014E
     55c:	e0 91 4f 01 	lds	r30, 0x014F
     560:	ec 70       	andi	r30, 0x0C	; 12
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	f5 95       	asr	r31
     566:	e7 95       	ror	r30
     568:	f5 95       	asr	r31
     56a:	e7 95       	ror	r30
     56c:	8c 70       	andi	r24, 0x0C	; 12
     56e:	e8 2b       	or	r30, r24
     570:	e9 5d       	subi	r30, 0xD9	; 217
     572:	fe 4f       	sbci	r31, 0xFE	; 254
			switch(direction){
     574:	80 81       	ld	r24, Z
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	b1 f0       	breq	.+44     	; 0x5a6 <encoders+0x112>
     57a:	82 30       	cpi	r24, 0x02	; 2
     57c:	59 f6       	brne	.-106    	; 0x514 <encoders+0x80>
					}else{
						hours = 23;
					}
					break;
				case 2:
					if(hours < 23){
     57e:	80 91 05 01 	lds	r24, 0x0105
     582:	87 31       	cpi	r24, 0x17	; 23
     584:	70 f5       	brcc	.+92     	; 0x5e2 <encoders+0x14e>
						hours = hours + 1;
     586:	80 91 05 01 	lds	r24, 0x0105
     58a:	8f 5f       	subi	r24, 0xFF	; 255
     58c:	80 93 05 01 	sts	0x0105, r24
     590:	c1 cf       	rjmp	.-126    	; 0x514 <encoders+0x80>
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(mins > 0){
     592:	80 91 04 01 	lds	r24, 0x0104
     596:	88 23       	and	r24, r24
     598:	a9 f1       	breq	.+106    	; 0x604 <encoders+0x170>
						mins = mins - 1;
     59a:	80 91 04 01 	lds	r24, 0x0104
     59e:	81 50       	subi	r24, 0x01	; 1
     5a0:	80 93 04 01 	sts	0x0104, r24
     5a4:	d9 cf       	rjmp	.-78     	; 0x558 <encoders+0xc4>
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(hours > 0){
     5a6:	80 91 05 01 	lds	r24, 0x0105
     5aa:	88 23       	and	r24, r24
     5ac:	39 f1       	breq	.+78     	; 0x5fc <encoders+0x168>
						hours = hours - 1;
     5ae:	80 91 05 01 	lds	r24, 0x0105
     5b2:	81 50       	subi	r24, 0x01	; 1
     5b4:	80 93 05 01 	sts	0x0105, r24
     5b8:	ad cf       	rjmp	.-166    	; 0x514 <encoders+0x80>
			direction = encoder_lookup[(old_encoder & 0x0C) | ((encoder & 0x0C)>>2)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(alarm_hours > 0){
     5ba:	80 91 02 01 	lds	r24, 0x0102
     5be:	88 23       	and	r24, r24
     5c0:	29 f1       	breq	.+74     	; 0x60c <encoders+0x178>
						alarm_hours = alarm_hours - 1;
     5c2:	80 91 02 01 	lds	r24, 0x0102
     5c6:	81 50       	subi	r24, 0x01	; 1
     5c8:	80 93 02 01 	sts	0x0102, r24
     5cc:	a3 cf       	rjmp	.-186    	; 0x514 <encoders+0x80>
			direction = encoder_lookup[((old_encoder & 0x03)<<2) | (encoder & 0x03)];
			switch(direction){
				case 0:
					break;
				case 1:
					if(alarm_mins > 0){
     5ce:	80 91 01 01 	lds	r24, 0x0101
     5d2:	88 23       	and	r24, r24
     5d4:	61 f0       	breq	.+24     	; 0x5ee <encoders+0x15a>
						alarm_mins = alarm_mins - 1;
     5d6:	80 91 01 01 	lds	r24, 0x0101
     5da:	81 50       	subi	r24, 0x01	; 1
     5dc:	80 93 01 01 	sts	0x0101, r24
     5e0:	7e cf       	rjmp	.-260    	; 0x4de <encoders+0x4a>
					break;
				case 2:
					if(hours < 23){
						hours = hours + 1;
					}else{
						hours = 0;
     5e2:	10 92 05 01 	sts	0x0105, r1
     5e6:	96 cf       	rjmp	.-212    	; 0x514 <encoders+0x80>
					break;
				case 2:
					if(alarm_mins < 59){
						alarm_mins = alarm_mins + 1;
					}else{
						alarm_mins = 0;
     5e8:	10 92 01 01 	sts	0x0101, r1
     5ec:	78 cf       	rjmp	.-272    	; 0x4de <encoders+0x4a>
					break;
				case 1:
					if(alarm_mins > 0){
						alarm_mins = alarm_mins - 1;
					}else{
						alarm_mins = 59;
     5ee:	8b e3       	ldi	r24, 0x3B	; 59
     5f0:	80 93 01 01 	sts	0x0101, r24
     5f4:	74 cf       	rjmp	.-280    	; 0x4de <encoders+0x4a>
					break;
				case 2:
					if(mins < 59){
						mins = mins + 1;
					}else{
						mins = 0;
     5f6:	10 92 04 01 	sts	0x0104, r1
     5fa:	ae cf       	rjmp	.-164    	; 0x558 <encoders+0xc4>
					break;
				case 1:
					if(hours > 0){
						hours = hours - 1;
					}else{
						hours = 23;
     5fc:	87 e1       	ldi	r24, 0x17	; 23
     5fe:	80 93 05 01 	sts	0x0105, r24
     602:	88 cf       	rjmp	.-240    	; 0x514 <encoders+0x80>
					break;
				case 1:
					if(mins > 0){
						mins = mins - 1;
					}else{
						mins = 59;
     604:	8b e3       	ldi	r24, 0x3B	; 59
     606:	80 93 04 01 	sts	0x0104, r24
     60a:	a6 cf       	rjmp	.-180    	; 0x558 <encoders+0xc4>
					break;
				case 1:
					if(alarm_hours > 0){
						alarm_hours = alarm_hours - 1;
					}else{
						alarm_hours = 23;
     60c:	87 e1       	ldi	r24, 0x17	; 23
     60e:	80 93 02 01 	sts	0x0102, r24
     612:	80 cf       	rjmp	.-256    	; 0x514 <encoders+0x80>
					}
					break;
				case 2:
					if(alarm_hours < 23){
						alarm_hours = alarm_hours + 1;
     614:	80 91 02 01 	lds	r24, 0x0102
     618:	8f 5f       	subi	r24, 0xFF	; 255
     61a:	80 93 02 01 	sts	0x0102, r24
     61e:	7a cf       	rjmp	.-268    	; 0x514 <encoders+0x80>

00000620 <check_alarm>:

//***********************************************************************
//                            check_alarm
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
     620:	80 91 06 01 	lds	r24, 0x0106
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	b9 f0       	breq	.+46     	; 0x656 <check_alarm+0x36>
			lcd_string_array[4] = 'M';
		}
	}

	// Keeps alarm on while the alarm is armed
	if((alarm_armed == 0x00)){
     628:	80 91 06 01 	lds	r24, 0x0106
     62c:	81 11       	cpse	r24, r1
     62e:	12 c0       	rjmp	.+36     	; 0x654 <check_alarm+0x34>
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
     630:	88 e1       	ldi	r24, 0x18	; 24
     632:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
     634:	87 b7       	in	r24, 0x37	; 55
     636:	8f 7e       	andi	r24, 0xEF	; 239
     638:	87 bf       	out	0x37, r24	; 55
	}

	// Keeps alarm on while the alarm is armed
	if((alarm_armed == 0x00)){
		disable_tcnt1();
		alarm_buzz = 0x00;
     63a:	10 92 4c 01 	sts	0x014C, r1
		//send_lcd(0x00, 0x08); //Turn off LCD
		lcd_string_array[0] = ' ';
     63e:	80 e2       	ldi	r24, 0x20	; 32
     640:	80 93 07 01 	sts	0x0107, r24
		lcd_string_array[1] = ' ';
     644:	80 93 08 01 	sts	0x0108, r24
		lcd_string_array[2] = ' ';
     648:	80 93 09 01 	sts	0x0109, r24
		lcd_string_array[3] = ' ';
     64c:	80 93 0a 01 	sts	0x010A, r24
		lcd_string_array[4] = ' ';
     650:	80 93 0b 01 	sts	0x010B, r24
     654:	08 95       	ret

//***********************************************************************
//                            check_alarm
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
     656:	20 91 05 01 	lds	r18, 0x0105
     65a:	90 91 02 01 	lds	r25, 0x0102
     65e:	29 13       	cpse	r18, r25
     660:	e3 cf       	rjmp	.-58     	; 0x628 <check_alarm+0x8>
     662:	20 91 04 01 	lds	r18, 0x0104
     666:	90 91 01 01 	lds	r25, 0x0101
     66a:	29 13       	cpse	r18, r25
     66c:	dd cf       	rjmp	.-70     	; 0x628 <check_alarm+0x8>
		if((seconds == alarm_seconds)){
     66e:	20 91 03 01 	lds	r18, 0x0103
     672:	90 91 4d 01 	lds	r25, 0x014D
     676:	29 13       	cpse	r18, r25
     678:	d7 cf       	rjmp	.-82     	; 0x628 <check_alarm+0x8>
//
// setup TCNT1 in pwm mode
// set OC1A (PB5) as pwm output
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);
     67a:	9f b5       	in	r25, 0x2f	; 47
     67c:	92 60       	ori	r25, 0x02	; 2
     67e:	9f bd       	out	0x2f, r25	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10);
     680:	9e b5       	in	r25, 0x2e	; 46
     682:	99 61       	ori	r25, 0x19	; 25
     684:	9e bd       	out	0x2e, r25	; 46
	//no forced compare
	TCCR1C = 0x00;
     686:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 ec       	ldi	r19, 0xC0	; 192
     68e:	3b bd       	out	0x2b, r19	; 43
     690:	2a bd       	out	0x2a, r18	; 42
	ICR1  = 0xF000; //clear at 0xF000
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 ef       	ldi	r19, 0xF0	; 240
     696:	37 bd       	out	0x27, r19	; 39
     698:	26 bd       	out	0x26, r18	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
     69a:	97 b7       	in	r25, 0x37	; 55
     69c:	90 61       	ori	r25, 0x10	; 16
     69e:	97 bf       	out	0x37, r25	; 55
//**********************************************************************
void check_alarm(){
	if((alarm_armed == 0x01) && (hours == alarm_hours) && (mins == alarm_mins)){
		if((seconds == alarm_seconds)){
			init_tcnt1();
			alarm_buzz = 0x01;
     6a0:	80 93 4c 01 	sts	0x014C, r24
			//send_lcd(0x00, 0x0C);
			lcd_string_array[0] = 'A';
     6a4:	81 e4       	ldi	r24, 0x41	; 65
     6a6:	80 93 07 01 	sts	0x0107, r24
			lcd_string_array[1] = 'L';
     6aa:	9c e4       	ldi	r25, 0x4C	; 76
     6ac:	90 93 08 01 	sts	0x0108, r25
			lcd_string_array[2] = 'A';
     6b0:	80 93 09 01 	sts	0x0109, r24
			lcd_string_array[3] = 'R';
     6b4:	82 e5       	ldi	r24, 0x52	; 82
     6b6:	80 93 0a 01 	sts	0x010A, r24
			lcd_string_array[4] = 'M';
     6ba:	8d e4       	ldi	r24, 0x4D	; 77
     6bc:	80 93 0b 01 	sts	0x010B, r24
     6c0:	b3 cf       	rjmp	.-154    	; 0x628 <check_alarm+0x8>

000006c2 <snooze>:
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
     6c2:	88 e1       	ldi	r24, 0x18	; 24
     6c4:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
     6c6:	87 b7       	in	r24, 0x37	; 55
     6c8:	8f 7e       	andi	r24, 0xEF	; 239
     6ca:	87 bf       	out	0x37, r24	; 55
//                            snooze_alarm
//**********************************************************************
void snooze(){
	//Turn off the alarm
	disable_tcnt1();
	alarm_buzz = 0x00;
     6cc:	10 92 4c 01 	sts	0x014C, r1

	if(alarm_seconds < 50){
     6d0:	80 91 4d 01 	lds	r24, 0x014D
     6d4:	82 33       	cpi	r24, 0x32	; 50
     6d6:	30 f5       	brcc	.+76     	; 0x724 <snooze+0x62>
		alarm_hours = hours;
     6d8:	80 91 05 01 	lds	r24, 0x0105
     6dc:	80 93 02 01 	sts	0x0102, r24
		alarm_mins = mins;
     6e0:	80 91 04 01 	lds	r24, 0x0104
     6e4:	80 93 01 01 	sts	0x0101, r24
		alarm_seconds  = seconds;
     6e8:	80 91 03 01 	lds	r24, 0x0103
     6ec:	80 93 4d 01 	sts	0x014D, r24

		if(alarm_seconds < 50){
     6f0:	80 91 4d 01 	lds	r24, 0x014D
     6f4:	82 33       	cpi	r24, 0x32	; 50
     6f6:	b8 f0       	brcs	.+46     	; 0x726 <snooze+0x64>
			alarm_seconds = alarm_seconds + 10;
			return;
		}else{
			alarm_seconds = 60-alarm_seconds;
     6f8:	90 91 4d 01 	lds	r25, 0x014D
     6fc:	8c e3       	ldi	r24, 0x3C	; 60
     6fe:	89 1b       	sub	r24, r25
     700:	80 93 4d 01 	sts	0x014D, r24
			alarm_mins++;
     704:	80 91 01 01 	lds	r24, 0x0101
     708:	8f 5f       	subi	r24, 0xFF	; 255
     70a:	80 93 01 01 	sts	0x0101, r24
		}

		if(alarm_mins > 59){
     70e:	80 91 01 01 	lds	r24, 0x0101
     712:	8c 33       	cpi	r24, 0x3C	; 60
     714:	38 f0       	brcs	.+14     	; 0x724 <snooze+0x62>
			alarm_mins = 0;
     716:	10 92 01 01 	sts	0x0101, r1
			alarm_hours++;
     71a:	80 91 02 01 	lds	r24, 0x0102
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	80 93 02 01 	sts	0x0102, r24
     724:	08 95       	ret
		alarm_hours = hours;
		alarm_mins = mins;
		alarm_seconds  = seconds;

		if(alarm_seconds < 50){
			alarm_seconds = alarm_seconds + 10;
     726:	80 91 4d 01 	lds	r24, 0x014D
     72a:	86 5f       	subi	r24, 0xF6	; 246
     72c:	80 93 4d 01 	sts	0x014D, r24
			return;
     730:	08 95       	ret

00000732 <check_user_input>:


//***********************************************************************
//                            Check Buttons/Encoders
//**********************************************************************
void check_user_input(){
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
	//Checks the state of the buttons and encoders
	//Output
  //Read the buttons
        PORTB = PORTB | (1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7);
     73c:	48 b3       	in	r20, 0x18	; 24
     73e:	40 6f       	ori	r20, 0xF0	; 240
     740:	48 bb       	out	0x18, r20	; 24
	// Select 7 - Enable Tristates on Button Board

	DDRA = 0x00; // PortA as an input from buttons
     742:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; // PortA enable Pull Ups
     744:	4f ef       	ldi	r20, 0xFF	; 255
     746:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     748:	85 e0       	ldi	r24, 0x05	; 5
     74a:	8a 95       	dec	r24
     74c:	f1 f7       	brne	.-4      	; 0x74a <check_user_input+0x18>
     74e:	00 00       	nop
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     750:	f9 b2       	in	r15, 0x19	; 25
     752:	40 91 53 01 	lds	r20, 0x0153
     756:	50 91 54 01 	lds	r21, 0x0154
     75a:	44 0f       	add	r20, r20
     75c:	55 1f       	adc	r21, r21
     75e:	50 6e       	ori	r21, 0xE0	; 224
     760:	8f 2d       	mov	r24, r15
     762:	81 70       	andi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	48 2b       	or	r20, r24
     768:	59 2b       	or	r21, r25
     76a:	50 93 54 01 	sts	0x0154, r21
     76e:	40 93 53 01 	sts	0x0153, r20
        if(state[button] == 0xF000) return 1;
     772:	41 15       	cp	r20, r1
     774:	50 4f       	sbci	r21, 0xF0	; 240
     776:	09 f4       	brne	.+2      	; 0x77a <check_user_input+0x48>
     778:	a4 c0       	rjmp	.+328    	; 0x8c2 <check_user_input+0x190>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     77a:	49 b3       	in	r20, 0x19	; 25
     77c:	80 91 55 01 	lds	r24, 0x0155
     780:	90 91 56 01 	lds	r25, 0x0156
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	90 6e       	ori	r25, 0xE0	; 224
     78a:	41 fb       	bst	r20, 1
     78c:	00 27       	eor	r16, r16
     78e:	00 f9       	bld	r16, 0
     790:	10 e0       	ldi	r17, 0x00	; 0
     792:	80 2b       	or	r24, r16
     794:	91 2b       	or	r25, r17
     796:	90 93 56 01 	sts	0x0156, r25
     79a:	80 93 55 01 	sts	0x0155, r24
     79e:	89 b3       	in	r24, 0x19	; 25
     7a0:	40 91 57 01 	lds	r20, 0x0157
     7a4:	50 91 58 01 	lds	r21, 0x0158
     7a8:	44 0f       	add	r20, r20
     7aa:	55 1f       	adc	r21, r21
     7ac:	50 6e       	ori	r21, 0xE0	; 224
     7ae:	82 fb       	bst	r24, 2
     7b0:	88 27       	eor	r24, r24
     7b2:	80 f9       	bld	r24, 0
     7b4:	c8 2f       	mov	r28, r24
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	d2 2f       	mov	r29, r18
     7ba:	4c 2b       	or	r20, r28
     7bc:	5d 2b       	or	r21, r29
     7be:	50 93 58 01 	sts	0x0158, r21
     7c2:	40 93 57 01 	sts	0x0157, r20
     7c6:	49 b3       	in	r20, 0x19	; 25
     7c8:	80 91 59 01 	lds	r24, 0x0159
     7cc:	90 91 5a 01 	lds	r25, 0x015A
     7d0:	88 0f       	add	r24, r24
     7d2:	99 1f       	adc	r25, r25
     7d4:	90 6e       	ori	r25, 0xE0	; 224
     7d6:	43 fb       	bst	r20, 3
     7d8:	aa 27       	eor	r26, r26
     7da:	a0 f9       	bld	r26, 0
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	8a 2b       	or	r24, r26
     7e0:	9b 2b       	or	r25, r27
     7e2:	90 93 5a 01 	sts	0x015A, r25
     7e6:	80 93 59 01 	sts	0x0159, r24
     7ea:	89 b3       	in	r24, 0x19	; 25
     7ec:	40 91 5b 01 	lds	r20, 0x015B
     7f0:	50 91 5c 01 	lds	r21, 0x015C
     7f4:	44 0f       	add	r20, r20
     7f6:	55 1f       	adc	r21, r21
     7f8:	50 6e       	ori	r21, 0xE0	; 224
     7fa:	84 fb       	bst	r24, 4
     7fc:	22 27       	eor	r18, r18
     7fe:	20 f9       	bld	r18, 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	42 2b       	or	r20, r18
     804:	53 2b       	or	r21, r19
     806:	50 93 5c 01 	sts	0x015C, r21
     80a:	40 93 5b 01 	sts	0x015B, r20
        if(state[button] == 0xF000) return 1;
     80e:	41 15       	cp	r20, r1
     810:	50 4f       	sbci	r21, 0xF0	; 240
     812:	09 f4       	brne	.+2      	; 0x816 <check_user_input+0xe4>
     814:	70 c0       	rjmp	.+224    	; 0x8f6 <check_user_input+0x1c4>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     816:	89 b3       	in	r24, 0x19	; 25
     818:	20 91 5d 01 	lds	r18, 0x015D
     81c:	30 91 5e 01 	lds	r19, 0x015E
     820:	22 0f       	add	r18, r18
     822:	33 1f       	adc	r19, r19
     824:	30 6e       	ori	r19, 0xE0	; 224
     826:	85 fb       	bst	r24, 5
     828:	ee 27       	eor	r30, r30
     82a:	e0 f9       	bld	r30, 0
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	2e 2b       	or	r18, r30
     830:	3f 2b       	or	r19, r31
     832:	30 93 5e 01 	sts	0x015E, r19
     836:	20 93 5d 01 	sts	0x015D, r18
        if(state[button] == 0xF000) return 1;
     83a:	21 15       	cp	r18, r1
     83c:	30 4f       	sbci	r19, 0xF0	; 240
     83e:	09 f4       	brne	.+2      	; 0x842 <check_user_input+0x110>
     840:	4e c0       	rjmp	.+156    	; 0x8de <check_user_input+0x1ac>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
        static uint16_t state[8] = {0,0,0,0,0,0,0,0};
        state[button] = (state[button] << 1) | (! bit_is_clear(PINA,button)) | 0xE000;
     842:	29 b3       	in	r18, 0x19	; 25
     844:	80 91 5f 01 	lds	r24, 0x015F
     848:	90 91 60 01 	lds	r25, 0x0160
     84c:	88 0f       	add	r24, r24
     84e:	99 1f       	adc	r25, r25
     850:	90 6e       	ori	r25, 0xE0	; 224
     852:	26 fb       	bst	r18, 6
     854:	66 27       	eor	r22, r22
     856:	60 f9       	bld	r22, 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	86 2b       	or	r24, r22
     85c:	97 2b       	or	r25, r23
     85e:	90 93 60 01 	sts	0x0160, r25
     862:	80 93 5f 01 	sts	0x015F, r24
        if(state[button] == 0xF000) return 1;
     866:	81 15       	cp	r24, r1
     868:	90 4f       	sbci	r25, 0xF0	; 240
     86a:	91 f1       	breq	.+100    	; 0x8d0 <check_user_input+0x19e>
                if((alarm_buzz == 0x01)){
			snooze();
		}
        }
	// Turn off the button board PWM high
	PORTB &= ~((1<<PB4) | (1<<PB5) | (1<<PB6) | (0<<PB7));
     86c:	88 b3       	in	r24, 0x18	; 24
     86e:	8f 78       	andi	r24, 0x8F	; 143
     870:	88 bb       	out	0x18, r24	; 24

	DDRA = 0xFF; //DDRA Output
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //Turn Off The 7Seg
     876:	8b bb       	out	0x1b, r24	; 27

  // Send info to the bargraph (Sending info will read in encoders)
	PORTD &= ~(1<<PD2); //Storage Reg for HC595 low
     878:	92 98       	cbi	0x12, 2	; 18
	PORTE &= ~((1<<PE6) | (1<<PE7) | (1<<PE5)); //Encoder Shift Reg Clk en Low, Load Mode
     87a:	83 b1       	in	r24, 0x03	; 3
     87c:	8f 71       	andi	r24, 0x1F	; 31
     87e:	83 b9       	out	0x03, r24	; 3
	PORTE |= (1<<PE7); //Shift Mode
     880:	1f 9a       	sbi	0x03, 7	; 3
	encoder = spi_rw8(incdec_to_bargraph[clockmode]); // Send SPI_8bit
     882:	e0 91 50 01 	lds	r30, 0x0150
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	e5 5c       	subi	r30, 0xC5	; 197
     88a:	fe 4f       	sbci	r31, 0xFE	; 254
     88c:	80 81       	ld	r24, Z
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
     88e:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
     890:	77 9b       	sbis	0x0e, 7	; 14
     892:	fe cf       	rjmp	.-4      	; 0x890 <check_user_input+0x15e>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
     894:	8f b1       	in	r24, 0x0f	; 15

  // Send info to the bargraph (Sending info will read in encoders)
	PORTD &= ~(1<<PD2); //Storage Reg for HC595 low
	PORTE &= ~((1<<PE6) | (1<<PE7) | (1<<PE5)); //Encoder Shift Reg Clk en Low, Load Mode
	PORTE |= (1<<PE7); //Shift Mode
	encoder = spi_rw8(incdec_to_bargraph[clockmode]); // Send SPI_8bit
     896:	80 93 4f 01 	sts	0x014F, r24
	//spi_rw8(0xF0); 			//Test line

  // Check the encoders
	if(encoder != old_encoder){
     89a:	90 91 4f 01 	lds	r25, 0x014F
     89e:	80 91 4e 01 	lds	r24, 0x014E
     8a2:	98 13       	cpse	r25, r24
		// Change in the encoder position
		encoders();
     8a4:	0e 94 4a 02 	call	0x494	; 0x494 <encoders>
	}
  // Return the to original states
	PORTD |= (1<<PD2); //SS_Bar Low
     8a8:	92 9a       	sbi	0x12, 2	; 18
	PORTE |= (1<<PE6) | (1<<PE7) | (0<<PE5); //Clk enable high, Shift mode
     8aa:	83 b1       	in	r24, 0x03	; 3
     8ac:	80 6c       	ori	r24, 0xC0	; 192
     8ae:	83 b9       	out	0x03, r24	; 3
	PORTB &= ~((1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7)); // Sel 0
     8b0:	88 b3       	in	r24, 0x18	; 24
     8b2:	8f 70       	andi	r24, 0x0F	; 15
     8b4:	88 bb       	out	0x18, r24	; 24
  // Disable the button board tristates
}
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	08 95       	ret
	DDRA = 0x00; // PortA as an input from buttons
	PORTA = 0xFF; // PortA enable Pull Ups

	_delay_us(1); 				//Test Wait
        if(chk_buttons(0)){
		clockmode = (clockmode ^ 0X01) & 0x01; // Toggle bit 0
     8c2:	80 91 50 01 	lds	r24, 0x0150
     8c6:	80 95       	com	r24
     8c8:	81 70       	andi	r24, 0x01	; 1
     8ca:	80 93 50 01 	sts	0x0150, r24
     8ce:	55 cf       	rjmp	.-342    	; 0x77a <check_user_input+0x48>
		alarm_seconds = 0;
		// Toggle the arming of the alarm
        }

	if(chk_buttons(6)){
                if((alarm_buzz == 0x01)){
     8d0:	80 91 4c 01 	lds	r24, 0x014C
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	51 f6       	brne	.-108    	; 0x86c <check_user_input+0x13a>
			snooze();
     8d8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <snooze>
     8dc:	c7 cf       	rjmp	.-114    	; 0x86c <check_user_input+0x13a>
	if(chk_buttons(4)){
                clockmode = Clock_set_mode;
        }

	if(chk_buttons(5)){
                clockmode = Alarm_set_mode;
     8de:	83 e0       	ldi	r24, 0x03	; 3
     8e0:	80 93 50 01 	sts	0x0150, r24
		alarm_armed ^= 0x01;
     8e4:	90 91 06 01 	lds	r25, 0x0106
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	89 27       	eor	r24, r25
     8ec:	80 93 06 01 	sts	0x0106, r24
		alarm_seconds = 0;
     8f0:	10 92 4d 01 	sts	0x014D, r1
     8f4:	a6 cf       	rjmp	.-180    	; 0x842 <check_user_input+0x110>
	if(chk_buttons(3)){
                volume_down();
        }

	if(chk_buttons(4)){
                clockmode = Clock_set_mode;
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	80 93 50 01 	sts	0x0150, r24
     8fc:	8c cf       	rjmp	.-232    	; 0x816 <check_user_input+0xe4>

000008fe <check_ADCs>:
//                            check_ADCs
//**********************************************************************
void check_ADCs(){
	// Reads the ADC
	uint8_t adc_result = 0;
	ADCSRA |= (1<<ADSC); //poke ADSC and start conversion
     8fe:	36 9a       	sbi	0x06, 6	; 6

	while(bit_is_clear(ADCSRA,ADIF)); //spin while interrupt flag not set
     900:	34 9b       	sbis	0x06, 4	; 6
     902:	fe cf       	rjmp	.-4      	; 0x900 <check_ADCs+0x2>

	ADCSRA |= (1<<ADIF); //its done, clear flag by writing a one
     904:	34 9a       	sbi	0x06, 4	; 6

	adc_result = ADCH; //read the ADC output as 16 bits
     906:	85 b1       	in	r24, 0x05	; 5
	OCR2 = adc_result; //0x10; //adc_result; //adc_result;
     908:	83 bd       	out	0x23, r24	; 35
     90a:	08 95       	ret

0000090c <__vector_16>:


//***********************************************************************
//                            Timer0_overflow_interrupt
//**********************************************************************
ISR(TIMER0_OVF_vect){
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	0b b6       	in	r0, 0x3b	; 59
     918:	0f 92       	push	r0
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
	//This intterupt should occur every second
	//static uint8_t seconds = 0; //Holds the seconds between interupts
	check_alarm();
     932:	0e 94 10 03 	call	0x620	; 0x620 <check_alarm>
	seconds++;
     936:	80 91 03 01 	lds	r24, 0x0103
     93a:	8f 5f       	subi	r24, 0xFF	; 255
     93c:	80 93 03 01 	sts	0x0103, r24
	if((seconds % 60) == 0){
     940:	90 91 03 01 	lds	r25, 0x0103
     944:	89 e8       	ldi	r24, 0x89	; 137
     946:	98 9f       	mul	r25, r24
     948:	81 2d       	mov	r24, r1
     94a:	11 24       	eor	r1, r1
     94c:	82 95       	swap	r24
     94e:	86 95       	lsr	r24
     950:	87 70       	andi	r24, 0x07	; 7
     952:	2c e3       	ldi	r18, 0x3C	; 60
     954:	82 9f       	mul	r24, r18
     956:	90 19       	sub	r25, r0
     958:	11 24       	eor	r1, r1
     95a:	91 11       	cpse	r25, r1
     95c:	07 c0       	rjmp	.+14     	; 0x96c <__vector_16+0x60>
		mins++;
     95e:	80 91 04 01 	lds	r24, 0x0104
     962:	8f 5f       	subi	r24, 0xFF	; 255
     964:	80 93 04 01 	sts	0x0104, r24
		seconds = 0;
     968:	10 92 03 01 	sts	0x0103, r1
		//check_alarm();
	}
	if(((mins % 60) == 0) & ((seconds % 60) == 0)){
     96c:	30 91 04 01 	lds	r19, 0x0104
     970:	90 91 03 01 	lds	r25, 0x0103
     974:	89 e8       	ldi	r24, 0x89	; 137
     976:	98 9f       	mul	r25, r24
     978:	21 2d       	mov	r18, r1
     97a:	11 24       	eor	r1, r1
     97c:	22 95       	swap	r18
     97e:	26 95       	lsr	r18
     980:	27 70       	andi	r18, 0x07	; 7
     982:	4c e3       	ldi	r20, 0x3C	; 60
     984:	24 9f       	mul	r18, r20
     986:	90 19       	sub	r25, r0
     988:	11 24       	eor	r1, r1
     98a:	91 11       	cpse	r25, r1
     98c:	0c c0       	rjmp	.+24     	; 0x9a6 <__vector_16+0x9a>
     98e:	38 9f       	mul	r19, r24
     990:	81 2d       	mov	r24, r1
     992:	11 24       	eor	r1, r1
     994:	82 95       	swap	r24
     996:	86 95       	lsr	r24
     998:	87 70       	andi	r24, 0x07	; 7
     99a:	84 9f       	mul	r24, r20
     99c:	30 19       	sub	r19, r0
     99e:	11 24       	eor	r1, r1
     9a0:	33 23       	and	r19, r19
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <__vector_16+0x9a>
     9a4:	4b c0       	rjmp	.+150    	; 0xa3c <__vector_16+0x130>
		hours++;
		mins = 0;
	}
	if((hours % 24) == 0){
     9a6:	90 91 05 01 	lds	r25, 0x0105
     9aa:	8b ea       	ldi	r24, 0xAB	; 171
     9ac:	98 9f       	mul	r25, r24
     9ae:	81 2d       	mov	r24, r1
     9b0:	11 24       	eor	r1, r1
     9b2:	82 95       	swap	r24
     9b4:	8f 70       	andi	r24, 0x0F	; 15
     9b6:	28 e1       	ldi	r18, 0x18	; 24
     9b8:	82 9f       	mul	r24, r18
     9ba:	90 19       	sub	r25, r0
     9bc:	11 24       	eor	r1, r1
     9be:	91 11       	cpse	r25, r1
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <__vector_16+0xba>
		hours = 0;
     9c2:	10 92 05 01 	sts	0x0105, r1
	}
	
    //Request the temp
	twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2);
     9c6:	42 e0       	ldi	r20, 0x02	; 2
     9c8:	63 ea       	ldi	r22, 0xA3	; 163
     9ca:	71 e0       	ldi	r23, 0x01	; 1
     9cc:	80 e9       	ldi	r24, 0x90	; 144
     9ce:	0e 94 69 09 	call	0x12d2	; 0x12d2 <twi_start_rd>
	//Format the local temp data
    lm73_temp = (lm73_rd_buf[0] << 8) | (lm73_rd_buf[1]);
     9d2:	80 91 a3 01 	lds	r24, 0x01A3
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	98 2f       	mov	r25, r24
     9da:	88 27       	eor	r24, r24
     9dc:	20 91 a4 01 	lds	r18, 0x01A4
     9e0:	82 2b       	or	r24, r18
    lm73_temp = lm73_temp >> 7;
     9e2:	88 0f       	add	r24, r24
     9e4:	89 2f       	mov	r24, r25
     9e6:	88 1f       	adc	r24, r24
     9e8:	99 0b       	sbc	r25, r25
     9ea:	91 95       	neg	r25
     9ec:	90 93 89 01 	sts	0x0189, r25
     9f0:	80 93 88 01 	sts	0x0188, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9f4:	4a e0       	ldi	r20, 0x0A	; 10
     9f6:	66 e8       	ldi	r22, 0x86	; 134
     9f8:	71 e0       	ldi	r23, 0x01	; 1
     9fa:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__itoa_ncheck>
    itoa(lm73_temp, tempsensor_string, 10);
    //Send the local data to the LCD array
    lcd_string_array[19] = tempsensor_string[0];
     9fe:	80 91 86 01 	lds	r24, 0x0186
     a02:	80 93 1a 01 	sts	0x011A, r24
    lcd_string_array[20] = tempsensor_string[1];
     a06:	80 91 87 01 	lds	r24, 0x0187
     a0a:	80 93 1b 01 	sts	0x011B, r24


    //Request the ATmega48 data
    while(!(UCSR0A & (1 << UDRE0)));
     a0e:	5d 9b       	sbis	0x0b, 5	; 11
     a10:	fe cf       	rjmp	.-4      	; 0xa0e <__vector_16+0x102>
    UDR0 = 0xF0;
     a12:	80 ef       	ldi	r24, 0xF0	; 240
     a14:	8c b9       	out	0x0c, r24	; 12

	
}
     a16:	ff 91       	pop	r31
     a18:	ef 91       	pop	r30
     a1a:	bf 91       	pop	r27
     a1c:	af 91       	pop	r26
     a1e:	9f 91       	pop	r25
     a20:	8f 91       	pop	r24
     a22:	7f 91       	pop	r23
     a24:	6f 91       	pop	r22
     a26:	5f 91       	pop	r21
     a28:	4f 91       	pop	r20
     a2a:	3f 91       	pop	r19
     a2c:	2f 91       	pop	r18
     a2e:	0f 90       	pop	r0
     a30:	0b be       	out	0x3b, r0	; 59
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti
		mins++;
		seconds = 0;
		//check_alarm();
	}
	if(((mins % 60) == 0) & ((seconds % 60) == 0)){
		hours++;
     a3c:	80 91 05 01 	lds	r24, 0x0105
     a40:	8f 5f       	subi	r24, 0xFF	; 255
     a42:	80 93 05 01 	sts	0x0105, r24
		mins = 0;
     a46:	10 92 04 01 	sts	0x0104, r1
     a4a:	ad cf       	rjmp	.-166    	; 0x9a6 <__vector_16+0x9a>

00000a4c <__vector_12>:


//***********************************************************************
//                            Timer1_OCR1A_Match
//**********************************************************************
ISR(TIMER1_COMPA_vect){
     a4c:	1f 92       	push	r1
     a4e:	0f 92       	push	r0
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	0f 92       	push	r0
     a54:	11 24       	eor	r1, r1
     a56:	8f 93       	push	r24
     a58:	9f 93       	push	r25
	// Port C must be used for Alarm PWM as OCR1X is used for 7Seg
	PORTC ^= 0X03; //Toggle Bit 0 & 1
     a5a:	95 b3       	in	r25, 0x15	; 21
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	89 27       	eor	r24, r25
     a60:	85 bb       	out	0x15, r24	; 21

}
     a62:	9f 91       	pop	r25
     a64:	8f 91       	pop	r24
     a66:	0f 90       	pop	r0
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	0f 90       	pop	r0
     a6c:	1f 90       	pop	r1
     a6e:	18 95       	reti

00000a70 <__vector_10>:


//***********************************************************************
//                            Timer2_overflow_interrupt
//**********************************************************************
ISR(TIMER2_OVF_vect){
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	0b b6       	in	r0, 0x3b	; 59
     a7c:	0f 92       	push	r0
     a7e:	2f 93       	push	r18
     a80:	3f 93       	push	r19
     a82:	4f 93       	push	r20
     a84:	5f 93       	push	r21
     a86:	6f 93       	push	r22
     a88:	7f 93       	push	r23
     a8a:	8f 93       	push	r24
     a8c:	9f 93       	push	r25
     a8e:	af 93       	push	r26
     a90:	bf 93       	push	r27
     a92:	ef 93       	push	r30
     a94:	ff 93       	push	r31
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
     a96:	80 91 52 01 	lds	r24, 0x0152
     a9a:	8f 5f       	subi	r24, 0xFF	; 255
		if((timer_tick > 10)){
     a9c:	8b 30       	cpi	r24, 0x0B	; 11
     a9e:	a8 f4       	brcc	.+42     	; 0xaca <__vector_10+0x5a>
//**********************************************************************
ISR(TIMER2_OVF_vect){
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
     aa0:	80 93 52 01 	sts	0x0152, r24
		
			
		refresh_lcd(lcd_string_array);

	}
}
     aa4:	ff 91       	pop	r31
     aa6:	ef 91       	pop	r30
     aa8:	bf 91       	pop	r27
     aaa:	af 91       	pop	r26
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	7f 91       	pop	r23
     ab2:	6f 91       	pop	r22
     ab4:	5f 91       	pop	r21
     ab6:	4f 91       	pop	r20
     ab8:	3f 91       	pop	r19
     aba:	2f 91       	pop	r18
     abc:	0f 90       	pop	r0
     abe:	0b be       	out	0x3b, r0	; 59
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti
	//TO DO
	//
	static uint8_t timer_tick;
	timer_tick++;
		if((timer_tick > 10)){
		timer_tick = 0;
     aca:	10 92 52 01 	sts	0x0152, r1
		check_user_input();
     ace:	0e 94 99 03 	call	0x732	; 0x732 <check_user_input>
//                            check_ADCs
//**********************************************************************
void check_ADCs(){
	// Reads the ADC
	uint8_t adc_result = 0;
	ADCSRA |= (1<<ADSC); //poke ADSC and start conversion
     ad2:	36 9a       	sbi	0x06, 6	; 6

	while(bit_is_clear(ADCSRA,ADIF)); //spin while interrupt flag not set
     ad4:	34 9b       	sbis	0x06, 4	; 6
     ad6:	fe cf       	rjmp	.-4      	; 0xad4 <__vector_10+0x64>

	ADCSRA |= (1<<ADIF); //its done, clear flag by writing a one
     ad8:	34 9a       	sbi	0x06, 4	; 6

	adc_result = ADCH; //read the ADC output as 16 bits
     ada:	85 b1       	in	r24, 0x05	; 5
	OCR2 = adc_result; //0x10; //adc_result; //adc_result;
     adc:	83 bd       	out	0x23, r24	; 35
		timer_tick = 0;
		check_user_input();
		check_ADCs();
		
			
		refresh_lcd(lcd_string_array);
     ade:	87 e0       	ldi	r24, 0x07	; 7
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 cb 05 	call	0xb96	; 0xb96 <refresh_lcd>
     ae6:	de cf       	rjmp	.-68     	; 0xaa4 <__vector_10+0x34>

00000ae8 <__vector_9>:
	}
}



ISR(TIMER2_COMP_vect){
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	0f 92       	push	r0
     af0:	11 24       	eor	r1, r1
        //TO DO
}
     af2:	0f 90       	pop	r0
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	0f 90       	pop	r0
     af8:	1f 90       	pop	r1
     afa:	18 95       	reti

00000afc <__vector_18>:

//***********************************************************************
//                            USART0_recieve_interrupt
//**********************************************************************
//Get the temp from the ATMega48
ISR(USART0_RX_vect) {
     afc:	1f 92       	push	r1
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	0f 92       	push	r0
     b04:	11 24       	eor	r1, r1
     b06:	0b b6       	in	r0, 0x3b	; 59
     b08:	0f 92       	push	r0
     b0a:	2f 93       	push	r18
     b0c:	3f 93       	push	r19
     b0e:	4f 93       	push	r20
     b10:	5f 93       	push	r21
     b12:	6f 93       	push	r22
     b14:	7f 93       	push	r23
     b16:	8f 93       	push	r24
     b18:	9f 93       	push	r25
     b1a:	af 93       	push	r26
     b1c:	bf 93       	push	r27
     b1e:	ef 93       	push	r30
     b20:	ff 93       	push	r31

	//Process the recieved ATmega48 data to the LCD
    if(first_byte == TRUE){
     b22:	80 91 00 01 	lds	r24, 0x0100
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	d1 f0       	breq	.+52     	; 0xb5e <__vector_18+0x62>
    	lcd_string_array[25] = uart_getc();
    	first_byte = FALSE;
    }else{
    	lcd_string_array[26] = uart_getc();
     b2a:	0e 94 b7 09 	call	0x136e	; 0x136e <uart_getc>
     b2e:	80 93 21 01 	sts	0x0121, r24
    	first_byte = TRUE;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	80 93 00 01 	sts	0x0100, r24
    }
}
     b38:	ff 91       	pop	r31
     b3a:	ef 91       	pop	r30
     b3c:	bf 91       	pop	r27
     b3e:	af 91       	pop	r26
     b40:	9f 91       	pop	r25
     b42:	8f 91       	pop	r24
     b44:	7f 91       	pop	r23
     b46:	6f 91       	pop	r22
     b48:	5f 91       	pop	r21
     b4a:	4f 91       	pop	r20
     b4c:	3f 91       	pop	r19
     b4e:	2f 91       	pop	r18
     b50:	0f 90       	pop	r0
     b52:	0b be       	out	0x3b, r0	; 59
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti
//Get the temp from the ATMega48
ISR(USART0_RX_vect) {

	//Process the recieved ATmega48 data to the LCD
    if(first_byte == TRUE){
    	lcd_string_array[25] = uart_getc();
     b5e:	0e 94 b7 09 	call	0x136e	; 0x136e <uart_getc>
     b62:	80 93 20 01 	sts	0x0120, r24
    	first_byte = FALSE;
     b66:	10 92 00 01 	sts	0x0100, r1
     b6a:	e6 cf       	rjmp	.-52     	; 0xb38 <__vector_18+0x3c>

00000b6c <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	81 11       	cpse	r24, r1
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <send_lcd+0x8>
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b76:	77 9b       	sbis	0x0e, 7	; 14
     b78:	fe cf       	rjmp	.-4      	; 0xb76 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     b7a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b7c:	77 9b       	sbis	0x0e, 7	; 14
     b7e:	fe cf       	rjmp	.-4      	; 0xb7c <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b80:	80 91 62 00 	lds	r24, 0x0062
     b84:	88 60       	ori	r24, 0x08	; 8
     b86:	80 93 62 00 	sts	0x0062, r24
     b8a:	80 91 62 00 	lds	r24, 0x0062
     b8e:	87 7f       	andi	r24, 0xF7	; 247
     b90:	80 93 62 00 	sts	0x0062, r24
     b94:	08 95       	ret

00000b96 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
     b96:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     b98:	c0 91 63 01 	lds	r28, 0x0163
     b9c:	8c 0f       	add	r24, r28
     b9e:	91 1d       	adc	r25, r1
     ba0:	fc 01       	movw	r30, r24
     ba2:	60 81       	ld	r22, Z
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
 i++;   //increment to next character
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	8c 0f       	add	r24, r28
     bae:	80 93 63 01 	sts	0x0163, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     bb2:	80 31       	cpi	r24, 0x10	; 16
     bb4:	81 f0       	breq	.+32     	; 0xbd6 <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     bb6:	80 32       	cpi	r24, 0x20	; 32
     bb8:	11 f0       	breq	.+4      	; 0xbbe <refresh_lcd+0x28>
}//refresh_lcd
     bba:	cf 91       	pop	r28
     bbc:	08 95       	ret
     bbe:	85 ed       	ldi	r24, 0xD5	; 213
     bc0:	8a 95       	dec	r24
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <refresh_lcd+0x2a>
     bc4:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     bc6:	60 e8       	ldi	r22, 0x80	; 128
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     bce:	10 92 63 01 	sts	0x0163, r1
}//refresh_lcd
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret
     bd6:	f5 ed       	ldi	r31, 0xD5	; 213
     bd8:	fa 95       	dec	r31
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <refresh_lcd+0x42>
     bdc:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     bde:	60 ec       	ldi	r22, 0xC0	; 192
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     be6:	80 91 63 01 	lds	r24, 0x0163
     bea:	e5 cf       	rjmp	.-54     	; 0xbb6 <refresh_lcd+0x20>

00000bec <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	1f 92       	push	r1
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     c00:	66 0f       	add	r22, r22
     c02:	66 0f       	add	r22, r22
     c04:	66 0f       	add	r22, r22
     c06:	60 5c       	subi	r22, 0xC0	; 192
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	99 83       	std	Y+1, r25	; 0x01
     c0c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     c10:	85 ed       	ldi	r24, 0xD5	; 213
     c12:	8a 95       	dec	r24
     c14:	f1 f7       	brne	.-4      	; 0xc12 <set_custom_character+0x26>
     c16:	00 00       	nop
     c18:	e1 2e       	mov	r14, r17
     c1a:	99 81       	ldd	r25, Y+1	; 0x01
     c1c:	f9 2e       	mov	r15, r25
     c1e:	87 01       	movw	r16, r14
     c20:	08 5f       	subi	r16, 0xF8	; 248
     c22:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     c24:	f7 01       	movw	r30, r14
     c26:	61 91       	ld	r22, Z+
     c28:	7f 01       	movw	r14, r30
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     c30:	f5 ed       	ldi	r31, 0xD5	; 213
     c32:	fa 95       	dec	r31
     c34:	f1 f7       	brne	.-4      	; 0xc32 <set_custom_character+0x46>
     c36:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     c38:	e0 16       	cp	r14, r16
     c3a:	f1 06       	cpc	r15, r17
     c3c:	99 f7       	brne	.-26     	; 0xc24 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     c3e:	0f 90       	pop	r0
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	08 95       	ret

00000c4e <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     c4e:	90 e4       	ldi	r25, 0x40	; 64
     c50:	89 9f       	mul	r24, r25
     c52:	60 0d       	add	r22, r0
     c54:	11 24       	eor	r1, r1
     c56:	60 5c       	subi	r22, 0xC0	; 192
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <send_lcd>

00000c5e <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
     c5e:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     c60:	88 23       	and	r24, r24
     c62:	b9 f1       	breq	.+110    	; 0xcd2 <uint2lcd+0x74>
     c64:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     c66:	84 36       	cpi	r24, 0x64	; 100
     c68:	98 f4       	brcc	.+38     	; 0xc90 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     c6a:	8a 30       	cpi	r24, 0x0A	; 10
     c6c:	d8 f4       	brcc	.+54     	; 0xca4 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     c6e:	8d ec       	ldi	r24, 0xCD	; 205
     c70:	c8 9f       	mul	r28, r24
     c72:	81 2d       	mov	r24, r1
     c74:	11 24       	eor	r1, r1
     c76:	86 95       	lsr	r24
     c78:	86 95       	lsr	r24
     c7a:	86 95       	lsr	r24
     c7c:	6c 2f       	mov	r22, r28
     c7e:	2a e0       	ldi	r18, 0x0A	; 10
     c80:	82 9f       	mul	r24, r18
     c82:	60 19       	sub	r22, r0
     c84:	11 24       	eor	r1, r1
     c86:	60 5d       	subi	r22, 0xD0	; 208
     c88:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     c8a:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     c8c:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     c90:	69 e2       	ldi	r22, 0x29	; 41
     c92:	86 9f       	mul	r24, r22
     c94:	61 2d       	mov	r22, r1
     c96:	11 24       	eor	r1, r1
     c98:	62 95       	swap	r22
     c9a:	6f 70       	andi	r22, 0x0F	; 15
     c9c:	60 5d       	subi	r22, 0xD0	; 208
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     ca4:	89 e2       	ldi	r24, 0x29	; 41
     ca6:	c8 9f       	mul	r28, r24
     ca8:	81 2d       	mov	r24, r1
     caa:	11 24       	eor	r1, r1
     cac:	82 95       	swap	r24
     cae:	8f 70       	andi	r24, 0x0F	; 15
     cb0:	9c 2f       	mov	r25, r28
     cb2:	24 e6       	ldi	r18, 0x64	; 100
     cb4:	82 9f       	mul	r24, r18
     cb6:	90 19       	sub	r25, r0
     cb8:	11 24       	eor	r1, r1
     cba:	6d ec       	ldi	r22, 0xCD	; 205
     cbc:	96 9f       	mul	r25, r22
     cbe:	61 2d       	mov	r22, r1
     cc0:	11 24       	eor	r1, r1
     cc2:	66 95       	lsr	r22
     cc4:	66 95       	lsr	r22
     cc6:	66 95       	lsr	r22
     cc8:	60 5d       	subi	r22, 0xD0	; 208
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     cd0:	ce cf       	rjmp	.-100    	; 0xc6e <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     cd2:	60 e3       	ldi	r22, 0x30	; 48
     cd4:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
     cd6:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     cd8:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <send_lcd>

00000cdc <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
     cdc:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     cde:	87 fd       	sbrc	r24, 7
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
     ce2:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
     ce4:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <uint2lcd>
     ce8:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     cea:	6d e2       	ldi	r22, 0x2D	; 45
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     cf2:	85 ed       	ldi	r24, 0xD5	; 213
     cf4:	8a 95       	dec	r24
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <int2lcd+0x18>
     cf8:	00 00       	nop
     cfa:	8c 2f       	mov	r24, r28
     cfc:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
     cfe:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     d00:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <uint2lcd>

00000d04 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
     d04:	6e e0       	ldi	r22, 0x0E	; 14
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <send_lcd>

00000d0c <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
     d0c:	6c e0       	ldi	r22, 0x0C	; 12
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <send_lcd>

00000d14 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
     d14:	6e e1       	ldi	r22, 0x1E	; 30
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <send_lcd>

00000d1c <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
     d1c:	68 e1       	ldi	r22, 0x18	; 24
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <send_lcd>

00000d24 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d24:	e2 e6       	ldi	r30, 0x62	; 98
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	88 60       	ori	r24, 0x08	; 8
     d2c:	80 83       	st	Z, r24
     d2e:	80 81       	ld	r24, Z
     d30:	87 7f       	andi	r24, 0xF7	; 247
     d32:	80 83       	st	Z, r24
     d34:	08 95       	ret

00000d36 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     d3e:	8f e1       	ldi	r24, 0x1F	; 31
     d40:	9c e1       	ldi	r25, 0x1C	; 28
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	f1 f7       	brne	.-4      	; 0xd42 <clear_display+0xc>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <clear_display+0x12>
     d48:	00 00       	nop
     d4a:	08 95       	ret

00000d4c <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
     d4c:	62 e0       	ldi	r22, 0x02	; 2
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     d54:	8f e6       	ldi	r24, 0x6F	; 111
     d56:	97 e1       	ldi	r25, 0x17	; 23
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <cursor_home+0xc>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <cursor_home+0x12>
     d5e:	00 00       	nop
     d60:	08 95       	ret

00000d62 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     d62:	60 ec       	ldi	r22, 0xC0	; 192
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <send_lcd>

00000d6a <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     d6a:	60 e8       	ldi	r22, 0x80	; 128
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <send_lcd>

00000d72 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     d72:	cf 93       	push	r28
     d74:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
     d76:	60 e2       	ldi	r22, 0x20	; 32
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     d7e:	85 ed       	ldi	r24, 0xD5	; 213
     d80:	8a 95       	dec	r24
     d82:	f1 f7       	brne	.-4      	; 0xd80 <fill_spaces+0xe>
     d84:	00 00       	nop
     d86:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     d88:	b1 f7       	brne	.-20     	; 0xd76 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
     d8e:	68 2f       	mov	r22, r24
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <send_lcd>

00000d96 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	c0 e0       	ldi	r28, 0x00	; 0
     da4:	f8 01       	movw	r30, r16
     da6:	e4 0f       	add	r30, r20
     da8:	f5 1f       	adc	r31, r21
     daa:	60 81       	ld	r22, Z
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     db2:	85 ed       	ldi	r24, 0xD5	; 213
     db4:	8a 95       	dec	r24
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <string2lcd+0x1e>
     db8:	00 00       	nop
     dba:	cf 5f       	subi	r28, 0xFF	; 255
     dbc:	4c 2f       	mov	r20, r28
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	f8 01       	movw	r30, r16
     dc2:	01 90       	ld	r0, Z+
     dc4:	00 20       	and	r0, r0
     dc6:	e9 f7       	brne	.-6      	; 0xdc2 <string2lcd+0x2c>
     dc8:	9f 01       	movw	r18, r30
     dca:	20 1b       	sub	r18, r16
     dcc:	31 0b       	sbc	r19, r17
     dce:	22 50       	subi	r18, 0x02	; 2
     dd0:	31 09       	sbc	r19, r1
     dd2:	24 17       	cp	r18, r20
     dd4:	35 07       	cpc	r19, r21
     dd6:	30 f7       	brcc	.-52     	; 0xda4 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	08 95       	ret

00000de0 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	99 ef       	ldi	r25, 0xF9	; 249
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <lcd_init+0x4>
     de8:	00 c0       	rjmp	.+0      	; 0xdea <lcd_init+0xa>
     dea:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     dec:	88 e0       	ldi	r24, 0x08	; 8
     dee:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
     df2:	60 e3       	ldi	r22, 0x30	; 48
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     dfa:	8f e5       	ldi	r24, 0x5F	; 95
     dfc:	9d e6       	ldi	r25, 0x6D	; 109
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <lcd_init+0x1e>
     e02:	00 c0       	rjmp	.+0      	; 0xe04 <lcd_init+0x24>
     e04:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     e06:	60 e3       	ldi	r22, 0x30	; 48
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     e0e:	8f e5       	ldi	r24, 0x5F	; 95
     e10:	9d e6       	ldi	r25, 0x6D	; 109
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <lcd_init+0x32>
     e16:	00 c0       	rjmp	.+0      	; 0xe18 <lcd_init+0x38>
     e18:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     e1a:	60 e3       	ldi	r22, 0x30	; 48
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     e22:	8f e5       	ldi	r24, 0x5F	; 95
     e24:	9d e6       	ldi	r25, 0x6D	; 109
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <lcd_init+0x46>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <lcd_init+0x4c>
     e2c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
     e2e:	68 e3       	ldi	r22, 0x38	; 56
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     e36:	8f e1       	ldi	r24, 0x1F	; 31
     e38:	9e e4       	ldi	r25, 0x4E	; 78
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <lcd_init+0x5a>
     e3e:	00 c0       	rjmp	.+0      	; 0xe40 <lcd_init+0x60>
     e40:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
     e42:	68 e0       	ldi	r22, 0x08	; 8
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     e4a:	8f e1       	ldi	r24, 0x1F	; 31
     e4c:	9e e4       	ldi	r25, 0x4E	; 78
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <lcd_init+0x6e>
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <lcd_init+0x74>
     e54:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     e5e:	8f e1       	ldi	r24, 0x1F	; 31
     e60:	9e e4       	ldi	r25, 0x4E	; 78
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <lcd_init+0x82>
     e66:	00 c0       	rjmp	.+0      	; 0xe68 <lcd_init+0x88>
     e68:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
     e6a:	66 e0       	ldi	r22, 0x06	; 6
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     e72:	8f e1       	ldi	r24, 0x1F	; 31
     e74:	9e e4       	ldi	r25, 0x4E	; 78
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <lcd_init+0x96>
     e7a:	00 c0       	rjmp	.+0      	; 0xe7c <lcd_init+0x9c>
     e7c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
     e7e:	6c e0       	ldi	r22, 0x0C	; 12
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
     e86:	8f e1       	ldi	r24, 0x1F	; 31
     e88:	9e e4       	ldi	r25, 0x4E	; 78
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <lcd_init+0xaa>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <lcd_init+0xb0>
     e90:	00 00       	nop
     e92:	08 95       	ret

00000e94 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     e94:	8f 92       	push	r8
     e96:	9f 92       	push	r9
     e98:	af 92       	push	r10
     e9a:	bf 92       	push	r11
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	69 97       	sbiw	r28, 0x19	; 25
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	f4 2e       	mov	r15, r20
     ebe:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
     ec0:	00 23       	and	r16, r16
     ec2:	59 f0       	breq	.+22     	; 0xeda <lcd_int32+0x46>
        bSigned = (qr.quot<0);
     ec4:	4b 01       	movw	r8, r22
     ec6:	5c 01       	movw	r10, r24
     ec8:	88 24       	eor	r8, r8
     eca:	b7 fc       	sbrc	r11, 7
     ecc:	83 94       	inc	r8
     ece:	99 24       	eor	r9, r9
     ed0:	aa 24       	eor	r10, r10
     ed2:	bb 24       	eor	r11, r11
     ed4:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
     ed6:	97 fd       	sbrc	r25, 7
     ed8:	8f c0       	rjmp	.+286    	; 0xff8 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
     eda:	11 23       	and	r17, r17
     edc:	09 f4       	brne	.+2      	; 0xee0 <lcd_int32+0x4c>
     ede:	84 c0       	rjmp	.+264    	; 0xfe8 <lcd_int32+0x154>
     ee0:	9e 01       	movw	r18, r28
     ee2:	2f 5f       	subi	r18, 0xFF	; 255
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
     ee6:	69 01       	movw	r12, r18
     ee8:	59 01       	movw	r10, r18
     eea:	88 24       	eor	r8, r8
     eec:	8a 94       	dec	r8
     eee:	81 0e       	add	r8, r17
     ef0:	91 2c       	mov	r9, r1
     ef2:	3f ef       	ldi	r19, 0xFF	; 255
     ef4:	83 1a       	sub	r8, r19
     ef6:	93 0a       	sbc	r9, r19
     ef8:	8c 0c       	add	r8, r12
     efa:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     efc:	2a e0       	ldi	r18, 0x0A	; 10
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__divmodsi4>
     f08:	e6 2f       	mov	r30, r22
     f0a:	2a 8b       	std	Y+18, r18	; 0x12
     f0c:	3b 8b       	std	Y+19, r19	; 0x13
     f0e:	4c 8b       	std	Y+20, r20	; 0x14
     f10:	5d 8b       	std	Y+21, r21	; 0x15
     f12:	6a 89       	ldd	r22, Y+18	; 0x12
     f14:	7b 89       	ldd	r23, Y+19	; 0x13
     f16:	8c 89       	ldd	r24, Y+20	; 0x14
     f18:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     f1a:	20 e3       	ldi	r18, 0x30	; 48
     f1c:	2e 0f       	add	r18, r30
     f1e:	f5 01       	movw	r30, r10
     f20:	21 93       	st	Z+, r18
     f22:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
     f24:	e8 15       	cp	r30, r8
     f26:	f9 05       	cpc	r31, r9
     f28:	49 f7       	brne	.-46     	; 0xefc <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     f2a:	bb 24       	eor	r11, r11
     f2c:	b3 94       	inc	r11
     f2e:	b1 0e       	add	r11, r17
     f30:	f6 01       	movw	r30, r12
     f32:	e1 0f       	add	r30, r17
     f34:	f1 1d       	adc	r31, r1
     f36:	2e e2       	ldi	r18, 0x2E	; 46
     f38:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
     f3a:	2a e0       	ldi	r18, 0x0A	; 10
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__divmodsi4>
     f46:	e6 2f       	mov	r30, r22
     f48:	2a 8b       	std	Y+18, r18	; 0x12
     f4a:	3b 8b       	std	Y+19, r19	; 0x13
     f4c:	4c 8b       	std	Y+20, r20	; 0x14
     f4e:	5d 8b       	std	Y+21, r21	; 0x15
     f50:	6e 8b       	std	Y+22, r22	; 0x16
     f52:	7f 8b       	std	Y+23, r23	; 0x17
     f54:	88 8f       	std	Y+24, r24	; 0x18
     f56:	99 8f       	std	Y+25, r25	; 0x19
     f58:	6a 89       	ldd	r22, Y+18	; 0x12
     f5a:	7b 89       	ldd	r23, Y+19	; 0x13
     f5c:	8c 89       	ldd	r24, Y+20	; 0x14
     f5e:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     f60:	11 e0       	ldi	r17, 0x01	; 1
     f62:	1b 0d       	add	r17, r11
     f64:	d6 01       	movw	r26, r12
     f66:	ab 0d       	add	r26, r11
     f68:	b1 1d       	adc	r27, r1
     f6a:	e0 5d       	subi	r30, 0xD0	; 208
     f6c:	ec 93       	st	X, r30
     f6e:	b1 2e       	mov	r11, r17
        }while(qr.quot);
     f70:	61 15       	cp	r22, r1
     f72:	71 05       	cpc	r23, r1
     f74:	81 05       	cpc	r24, r1
     f76:	91 05       	cpc	r25, r1
     f78:	01 f7       	brne	.-64     	; 0xf3a <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
     f7a:	ff 20       	and	r15, r15
     f7c:	61 f0       	breq	.+24     	; 0xf96 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     f7e:	e1 10       	cpse	r14, r1
     f80:	39 c0       	rjmp	.+114    	; 0xff4 <lcd_int32+0x160>
     f82:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     f84:	1f 15       	cp	r17, r15
     f86:	38 f4       	brcc	.+14     	; 0xf96 <lcd_int32+0x102>
     f88:	f6 01       	movw	r30, r12
     f8a:	e1 0f       	add	r30, r17
     f8c:	f1 1d       	adc	r31, r1
     f8e:	80 83       	st	Z, r24
     f90:	1f 5f       	subi	r17, 0xFF	; 255
     f92:	1f 11       	cpse	r17, r15
     f94:	f9 cf       	rjmp	.-14     	; 0xf88 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     f96:	00 23       	and	r16, r16
     f98:	31 f0       	breq	.+12     	; 0xfa6 <lcd_int32+0x112>
     f9a:	f6 01       	movw	r30, r12
     f9c:	e1 0f       	add	r30, r17
     f9e:	f1 1d       	adc	r31, r1
     fa0:	8d e2       	ldi	r24, 0x2D	; 45
     fa2:	80 83       	st	Z, r24
     fa4:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     fa6:	11 50       	subi	r17, 0x01	; 1
     fa8:	f6 01       	movw	r30, r12
     faa:	e1 0f       	add	r30, r17
     fac:	f1 1d       	adc	r31, r1
     fae:	60 81       	ld	r22, Z
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fb6:	35 ed       	ldi	r19, 0xD5	; 213
     fb8:	3a 95       	dec	r19
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <lcd_int32+0x124>
     fbc:	00 00       	nop
     fbe:	11 11       	cpse	r17, r1
     fc0:	f2 cf       	rjmp	.-28     	; 0xfa6 <lcd_int32+0x112>

}
     fc2:	69 96       	adiw	r28, 0x19	; 25
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	bf 90       	pop	r11
     fe0:	af 90       	pop	r10
     fe2:	9f 90       	pop	r9
     fe4:	8f 90       	pop	r8
     fe6:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     fe8:	b1 2c       	mov	r11, r1
     fea:	9e 01       	movw	r18, r28
     fec:	2f 5f       	subi	r18, 0xFF	; 255
     fee:	3f 4f       	sbci	r19, 0xFF	; 255
     ff0:	69 01       	movw	r12, r18
     ff2:	a3 cf       	rjmp	.-186    	; 0xf3a <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     ff4:	80 e3       	ldi	r24, 0x30	; 48
     ff6:	c6 cf       	rjmp	.-116    	; 0xf84 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     ff8:	90 95       	com	r25
     ffa:	80 95       	com	r24
     ffc:	70 95       	com	r23
     ffe:	61 95       	neg	r22
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8f 4f       	sbci	r24, 0xFF	; 255
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	69 cf       	rjmp	.-302    	; 0xeda <lcd_int32+0x46>

00001008 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
    1008:	5f 92       	push	r5
    100a:	6f 92       	push	r6
    100c:	7f 92       	push	r7
    100e:	8f 92       	push	r8
    1010:	9f 92       	push	r9
    1012:	af 92       	push	r10
    1014:	bf 92       	push	r11
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	61 97       	sbiw	r28, 0x11	; 17
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	a6 2e       	mov	r10, r22
    1038:	54 2e       	mov	r5, r20
    103a:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    103c:	79 2e       	mov	r7, r25
    103e:	77 1c       	adc	r7, r7
    1040:	77 24       	eor	r7, r7
    1042:	77 1c       	adc	r7, r7
    1044:	b7 2c       	mov	r11, r7
    1046:	c7 2c       	mov	r12, r7
    1048:	d1 2c       	mov	r13, r1
    104a:	ee 27       	eor	r30, r30
    104c:	ff 27       	eor	r31, r31
    104e:	ec 19       	sub	r30, r12
    1050:	fd 09       	sbc	r31, r13
    1052:	8e 27       	eor	r24, r30
    1054:	9f 27       	eor	r25, r31
    1056:	fc 01       	movw	r30, r24
    1058:	ec 0d       	add	r30, r12
    105a:	fd 1d       	adc	r31, r13
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
    105c:	44 23       	and	r20, r20
    105e:	09 f4       	brne	.+2      	; 0x1062 <lcd_int16+0x5a>
    1060:	8e c0       	rjmp	.+284    	; 0x117e <__stack+0x7f>
    1062:	ce 01       	movw	r24, r28
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	7c 01       	movw	r14, r24
    1068:	8c 01       	movw	r16, r24
    106a:	88 24       	eor	r8, r8
    106c:	8a 94       	dec	r8
    106e:	84 0e       	add	r8, r20
    1070:	91 2c       	mov	r9, r1
    1072:	9f ef       	ldi	r25, 0xFF	; 255
    1074:	89 1a       	sub	r8, r25
    1076:	99 0a       	sbc	r9, r25
    1078:	8e 0c       	add	r8, r14
    107a:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    107c:	6a e0       	ldi	r22, 0x0A	; 10
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	cf 01       	movw	r24, r30
    1082:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__divmodhi4>
    1086:	26 2f       	mov	r18, r22
    1088:	e2 2f       	mov	r30, r18
    108a:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
    108c:	80 5d       	subi	r24, 0xD0	; 208
    108e:	d8 01       	movw	r26, r16
    1090:	8d 93       	st	X+, r24
    1092:	8d 01       	movw	r16, r26
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
    1094:	a8 15       	cp	r26, r8
    1096:	b9 05       	cpc	r27, r9
    1098:	89 f7       	brne	.-30     	; 0x107c <lcd_int16+0x74>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    109a:	01 e0       	ldi	r16, 0x01	; 1
    109c:	05 0d       	add	r16, r5
    109e:	d7 01       	movw	r26, r14
    10a0:	a5 0d       	add	r26, r5
    10a2:	b1 1d       	adc	r27, r1
    10a4:	8e e2       	ldi	r24, 0x2E	; 46
    10a6:	8c 93       	st	X, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
    10a8:	6a e0       	ldi	r22, 0x0A	; 10
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	cf 01       	movw	r24, r30
    10ae:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__divmodhi4>
    10b2:	26 2f       	mov	r18, r22
    10b4:	e2 2f       	mov	r30, r18
    10b6:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
    10b8:	11 e0       	ldi	r17, 0x01	; 1
    10ba:	10 0f       	add	r17, r16
    10bc:	d7 01       	movw	r26, r14
    10be:	a0 0f       	add	r26, r16
    10c0:	b1 1d       	adc	r27, r1
    10c2:	80 5d       	subi	r24, 0xD0	; 208
    10c4:	8c 93       	st	X, r24
    10c6:	01 2f       	mov	r16, r17
        }
        while(qr.quot);
    10c8:	30 97       	sbiw	r30, 0x00	; 0
    10ca:	71 f7       	brne	.-36     	; 0x10a8 <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
    10cc:	61 10       	cpse	r6, r1
    10ce:	15 c0       	rjmp	.+42     	; 0x10fa <lcd_int16+0xf2>
    10d0:	77 20       	and	r7, r7
    10d2:	39 f0       	breq	.+14     	; 0x10e2 <lcd_int16+0xda>
        {
                sline[i++] = '-';
    10d4:	11 e0       	ldi	r17, 0x01	; 1
    10d6:	10 0f       	add	r17, r16
    10d8:	f7 01       	movw	r30, r14
    10da:	e0 0f       	add	r30, r16
    10dc:	f1 1d       	adc	r31, r1
    10de:	8d e2       	ldi	r24, 0x2D	; 45
    10e0:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    10e2:	aa 20       	and	r10, r10
    10e4:	41 f1       	breq	.+80     	; 0x1136 <__stack+0x37>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    10e6:	81 2f       	mov	r24, r17
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	2a 2d       	mov	r18, r10
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	82 17       	cp	r24, r18
    10f0:	93 07       	cpc	r25, r19
    10f2:	0c f5       	brge	.+66     	; 0x1136 <__stack+0x37>
    10f4:	b1 2c       	mov	r11, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    10f6:	40 e2       	ldi	r20, 0x20	; 32
    10f8:	0c c0       	rjmp	.+24     	; 0x1112 <__stack+0x13>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    10fa:	aa 20       	and	r10, r10
    10fc:	a1 f0       	breq	.+40     	; 0x1126 <__stack+0x27>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    10fe:	81 2f       	mov	r24, r17
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	2a 2d       	mov	r18, r10
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	2c 19       	sub	r18, r12
    1108:	3d 09       	sbc	r19, r13
    110a:	82 17       	cp	r24, r18
    110c:	93 07       	cpc	r25, r19
    110e:	5c f4       	brge	.+22     	; 0x1126 <__stack+0x27>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1110:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1112:	1f 5f       	subi	r17, 0xFF	; 255
    1114:	f7 01       	movw	r30, r14
    1116:	e8 0f       	add	r30, r24
    1118:	f9 1f       	adc	r31, r25
    111a:	40 83       	st	Z, r20
    111c:	81 2f       	mov	r24, r17
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	82 17       	cp	r24, r18
    1122:	93 07       	cpc	r25, r19
    1124:	b4 f3       	brlt	.-20     	; 0x1112 <__stack+0x13>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
    1126:	bb 20       	and	r11, r11
    1128:	31 f0       	breq	.+12     	; 0x1136 <__stack+0x37>
    112a:	f7 01       	movw	r30, r14
    112c:	e1 0f       	add	r30, r17
    112e:	f1 1d       	adc	r31, r1
    1130:	8d e2       	ldi	r24, 0x2D	; 45
    1132:	80 83       	st	Z, r24
    1134:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1136:	11 50       	subi	r17, 0x01	; 1
    1138:	f7 01       	movw	r30, r14
    113a:	e1 0f       	add	r30, r17
    113c:	f1 1d       	adc	r31, r1
    113e:	60 81       	ld	r22, Z
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	0e 94 b6 05 	call	0xb6c	; 0xb6c <send_lcd>
    1146:	95 ed       	ldi	r25, 0xD5	; 213
    1148:	9a 95       	dec	r25
    114a:	f1 f7       	brne	.-4      	; 0x1148 <__stack+0x49>
    114c:	00 00       	nop
    114e:	11 11       	cpse	r17, r1
    1150:	f2 cf       	rjmp	.-28     	; 0x1136 <__stack+0x37>
}
    1152:	61 96       	adiw	r28, 0x11	; 17
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	8f 90       	pop	r8
    1176:	7f 90       	pop	r7
    1178:	6f 90       	pop	r6
    117a:	5f 90       	pop	r5
    117c:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    117e:	00 e0       	ldi	r16, 0x00	; 0
    1180:	ce 01       	movw	r24, r28
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	7c 01       	movw	r14, r24
    1186:	90 cf       	rjmp	.-224    	; 0x10a8 <lcd_int16+0xa0>

00001188 <lm73_temp_convert>:
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

//Yeah, this is for you to do! ;^)

}//lm73_temp_convert
    1188:	08 95       	ret

0000118a <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	0b b6       	in	r0, 0x3b	; 59
    1196:	0f 92       	push	r0
    1198:	2f 93       	push	r18
    119a:	3f 93       	push	r19
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    11a8:	e0 91 71 00 	lds	r30, 0x0071
    11ac:	8e 2f       	mov	r24, r30
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	fc 01       	movw	r30, r24
    11b2:	38 97       	sbiw	r30, 0x08	; 8
    11b4:	e1 35       	cpi	r30, 0x51	; 81
    11b6:	f1 05       	cpc	r31, r1
    11b8:	b0 f0       	brcs	.+44     	; 0x11e6 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    11ba:	80 91 71 00 	lds	r24, 0x0071
    11be:	80 93 a5 01 	sts	0x01A5, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    11c2:	84 e0       	ldi	r24, 0x04	; 4
    11c4:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    11c8:	ff 91       	pop	r31
    11ca:	ef 91       	pop	r30
    11cc:	bf 91       	pop	r27
    11ce:	af 91       	pop	r26
    11d0:	9f 91       	pop	r25
    11d2:	8f 91       	pop	r24
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0b be       	out	0x3b, r0	; 59
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    11e6:	ea 5b       	subi	r30, 0xBA	; 186
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    11ee:	80 91 64 01 	lds	r24, 0x0164
    11f2:	e0 91 a6 01 	lds	r30, 0x01A6
    11f6:	f0 91 a7 01 	lds	r31, 0x01A7
    11fa:	e8 0f       	add	r30, r24
    11fc:	f1 1d       	adc	r31, r1
    11fe:	80 91 73 00 	lds	r24, 0x0073
    1202:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    1204:	84 e9       	ldi	r24, 0x94	; 148
    1206:	80 93 74 00 	sts	0x0074, r24
      break;      
    120a:	de cf       	rjmp	.-68     	; 0x11c8 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    120c:	80 91 a8 01 	lds	r24, 0x01A8
    1210:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    1214:	10 92 64 01 	sts	0x0164, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    1218:	85 e8       	ldi	r24, 0x85	; 133
    121a:	80 93 74 00 	sts	0x0074, r24
      break;
    121e:	d4 cf       	rjmp	.-88     	; 0x11c8 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    1220:	80 91 64 01 	lds	r24, 0x0164
    1224:	90 91 a9 01 	lds	r25, 0x01A9
    1228:	89 17       	cp	r24, r25
    122a:	60 f7       	brcc	.-40     	; 0x1204 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    122c:	e0 91 a6 01 	lds	r30, 0x01A6
    1230:	f0 91 a7 01 	lds	r31, 0x01A7
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	98 0f       	add	r25, r24
    1238:	90 93 64 01 	sts	0x0164, r25
    123c:	e8 0f       	add	r30, r24
    123e:	f1 1d       	adc	r31, r1
    1240:	80 81       	ld	r24, Z
    1242:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
    1246:	85 e8       	ldi	r24, 0x85	; 133
    1248:	80 93 74 00 	sts	0x0074, r24
    124c:	bd cf       	rjmp	.-134    	; 0x11c8 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    124e:	85 ea       	ldi	r24, 0xA5	; 165
    1250:	80 93 74 00 	sts	0x0074, r24
      break;
    1254:	b9 cf       	rjmp	.-142    	; 0x11c8 <__vector_33+0x3e>
    1256:	20 91 64 01 	lds	r18, 0x0164
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    125a:	80 91 a9 01 	lds	r24, 0x01A9
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	28 17       	cp	r18, r24
    1266:	39 07       	cpc	r19, r25
    1268:	dc f4       	brge	.+54     	; 0x12a0 <__vector_33+0x116>
    126a:	85 ec       	ldi	r24, 0xC5	; 197
    126c:	80 93 74 00 	sts	0x0074, r24
    1270:	ab cf       	rjmp	.-170    	; 0x11c8 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    1272:	e0 91 a6 01 	lds	r30, 0x01A6
    1276:	f0 91 a7 01 	lds	r31, 0x01A7
    127a:	80 91 64 01 	lds	r24, 0x0164
    127e:	21 e0       	ldi	r18, 0x01	; 1
    1280:	28 0f       	add	r18, r24
    1282:	20 93 64 01 	sts	0x0164, r18
    1286:	e8 0f       	add	r30, r24
    1288:	f1 1d       	adc	r31, r1
    128a:	80 91 73 00 	lds	r24, 0x0073
    128e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1290:	80 91 a9 01 	lds	r24, 0x01A9
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	28 17       	cp	r18, r24
    129c:	39 07       	cpc	r19, r25
    129e:	2c f3       	brlt	.-54     	; 0x126a <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    12a0:	85 e8       	ldi	r24, 0x85	; 133
    12a2:	80 93 74 00 	sts	0x0074, r24
    12a6:	90 cf       	rjmp	.-224    	; 0x11c8 <__vector_33+0x3e>

000012a8 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    12a8:	80 91 74 00 	lds	r24, 0x0074
}
    12ac:	81 70       	andi	r24, 0x01	; 1
    12ae:	08 95       	ret

000012b0 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    12b0:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    12b4:	90 fd       	sbrc	r25, 0
    12b6:	fc cf       	rjmp	.-8      	; 0x12b0 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    12b8:	8e 7f       	andi	r24, 0xFE	; 254
    12ba:	80 93 a8 01 	sts	0x01A8, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    12be:	70 93 a7 01 	sts	0x01A7, r23
    12c2:	60 93 a6 01 	sts	0x01A6, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    12c6:	40 93 a9 01 	sts	0x01A9, r20
  TWCR = TWCR_START;                    //initiate START
    12ca:	85 ea       	ldi	r24, 0xA5	; 165
    12cc:	80 93 74 00 	sts	0x0074, r24
    12d0:	08 95       	ret

000012d2 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    12d2:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    12d6:	90 fd       	sbrc	r25, 0
    12d8:	fc cf       	rjmp	.-8      	; 0x12d2 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    12da:	81 60       	ori	r24, 0x01	; 1
    12dc:	80 93 a8 01 	sts	0x01A8, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    12e0:	70 93 a7 01 	sts	0x01A7, r23
    12e4:	60 93 a6 01 	sts	0x01A6, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    12e8:	40 93 a9 01 	sts	0x01A9, r20
  TWCR = TWCR_START;                   //initiate START
    12ec:	85 ea       	ldi	r24, 0xA5	; 165
    12ee:	80 93 74 00 	sts	0x0074, r24
    12f2:	08 95       	ret

000012f4 <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
    12fa:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
    12fe:	8c e0       	ldi	r24, 0x0C	; 12
    1300:	80 93 70 00 	sts	0x0070, r24
    1304:	08 95       	ret

00001306 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1306:	5d 9b       	sbis	0x0b, 5	; 11
    1308:	fe cf       	rjmp	.-4      	; 0x1306 <uart_putc>
    UDR0 = data;    // Send data byte
    130a:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    130c:	5d 9b       	sbis	0x0b, 5	; 11
    130e:	fe cf       	rjmp	.-4      	; 0x130c <uart_putc+0x6>
}
    1310:	08 95       	ret

00001312 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    1312:	fc 01       	movw	r30, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    1314:	90 81       	ld	r25, Z
    1316:	99 23       	and	r25, r25
    1318:	49 f0       	breq	.+18     	; 0x132c <uart_puts+0x1a>
    131a:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    131c:	5d 9b       	sbis	0x0b, 5	; 11
    131e:	fe cf       	rjmp	.-4      	; 0x131c <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    1320:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1322:	5d 9b       	sbis	0x0b, 5	; 11
    1324:	fe cf       	rjmp	.-4      	; 0x1322 <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    1326:	91 91       	ld	r25, Z+
    1328:	91 11       	cpse	r25, r1
    132a:	f8 cf       	rjmp	.-16     	; 0x131c <uart_puts+0xa>
    132c:	08 95       	ret

0000132e <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    132e:	9c 01       	movw	r18, r24
    1330:	fc 01       	movw	r30, r24
    1332:	44 91       	lpm	r20, Z
    1334:	44 23       	and	r20, r20
    1336:	69 f0       	breq	.+26     	; 0x1352 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	f9 01       	movw	r30, r18
    133c:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    133e:	5d 9b       	sbis	0x0b, 5	; 11
    1340:	fe cf       	rjmp	.-4      	; 0x133e <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    1342:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1344:	5d 9b       	sbis	0x0b, 5	; 11
    1346:	fe cf       	rjmp	.-4      	; 0x1344 <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    1348:	9c 01       	movw	r18, r24
    134a:	fc 01       	movw	r30, r24
    134c:	44 91       	lpm	r20, Z
    134e:	41 11       	cpse	r20, r1
    1350:	f3 cf       	rjmp	.-26     	; 0x1338 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    1352:	08 95       	ret

00001354 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
    1354:	8a b1       	in	r24, 0x0a	; 10
    1356:	88 69       	ori	r24, 0x98	; 152
    1358:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    135a:	e5 e9       	ldi	r30, 0x95	; 149
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	86 60       	ori	r24, 0x06	; 6
    1362:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    1364:	10 92 90 00 	sts	0x0090, r1
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    1368:	87 e6       	ldi	r24, 0x67	; 103
    136a:	89 b9       	out	0x09, r24	; 9
    136c:	08 95       	ret

0000136e <uart_getc>:
    136e:	80 e8       	ldi	r24, 0x80	; 128
    1370:	9e e3       	ldi	r25, 0x3E	; 62
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <uart_getc+0xa>
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	21 f0       	breq	.+8      	; 0x1380 <uart_getc+0x12>
    1378:	5f 9b       	sbis	0x0b, 7	; 11
    137a:	fc cf       	rjmp	.-8      	; 0x1374 <uart_getc+0x6>
    137c:	8c b1       	in	r24, 0x0c	; 12
    137e:	08 95       	ret
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	08 95       	ret

00001384 <main>:

//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(){
  DDRB   = 0xF7; //output mode for SS, MOSI, SCLK & Pins 4-7 (7Seg & Bar Graph)
    1384:	87 ef       	ldi	r24, 0xF7	; 247
    1386:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); // Enable SPI, master mode, clk low on idle, leading edge sample
    1388:	80 e5       	ldi	r24, 0x50	; 80
    138a:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (0<<SPI2X); //No double speed operation
    138c:	1e b8       	out	0x0e, r1	; 14
// Triggers a 1 sec TOV Interrupt.
//
// Timer counter 0 initializeed to overflow every 1 second using a 32768Hz
// External clock and a 128 prescaler. This way every overflow(256) is 1sec

  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
    138e:	80 b7       	in	r24, 0x30	; 48
    1390:	88 60       	ori	r24, 0x08	; 8
    1392:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<TOIE0);  //TimerOverflow Interrupt Enable
    1394:	87 b7       	in	r24, 0x37	; 55
    1396:	81 60       	ori	r24, 0x01	; 1
    1398:	87 bf       	out	0x37, r24	; 55
  TCCR0 =  (1<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode, 128 prescale, OC0 Disconnected
    139a:	85 e0       	ldi	r24, 0x05	; 5
    139c:	83 bf       	out	0x33, r24	; 51
//
// setup TCNT1 in pwm mode
// set OC1A (PB5) as pwm output
// pwm frequency:  (16,000,000)/(1 * (61440 + 1)) = 260h
	//fast pwm, OC1A/B/C Disconnected (Used for 7Seg), ICR1 holds TOP
	TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (1<<WGM11);
    139e:	8f b5       	in	r24, 0x2f	; 47
    13a0:	82 60       	ori	r24, 0x02	; 2
    13a2:	8f bd       	out	0x2f, r24	; 47
	//use ICR1 as source for TOP, use clk/1
	TCCR1B |= (1<<WGM13) | (1<< WGM12) | (1<<CS10);
    13a4:	8e b5       	in	r24, 0x2e	; 46
    13a6:	89 61       	ori	r24, 0x19	; 25
    13a8:	8e bd       	out	0x2e, r24	; 46
	//no forced compare
	TCCR1C = 0x00;
    13aa:	10 92 7a 00 	sts	0x007A, r1
	//20% duty cycle, LED is a bit dimmer
	OCR1A = 0xC000; //set   at 0xC000
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 ec       	ldi	r25, 0xC0	; 192
    13b2:	9b bd       	out	0x2b, r25	; 43
    13b4:	8a bd       	out	0x2a, r24	; 42
	ICR1  = 0xF000; //clear at 0xF000
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 ef       	ldi	r25, 0xF0	; 240
    13ba:	97 bd       	out	0x27, r25	; 39
    13bc:	86 bd       	out	0x26, r24	; 38

	//enable interrupts for output compare match 0
	TIMSK |= (1<<OCIE1A);  // Timer/Counter1, Output Compare A Match Interrupt Enable
    13be:	87 b7       	in	r24, 0x37	; 55
    13c0:	80 61       	ori	r24, 0x10	; 16
    13c2:	87 bf       	out	0x37, r24	; 55
//**********************************************************************
void disable_tcnt1(){
// Stop ingomkiquency - Alarm
//
	//use ICR1 as source for TOP, use clk/0 (No Clock)
	TCCR1B = (1<<WGM13) | (1<< WGM12) | (0<CS10);
    13c4:	88 e1       	ldi	r24, 0x18	; 24
    13c6:	8e bd       	out	0x2e, r24	; 46
	TIMSK &= ~(1<<OCIE1A); //Disable OCR1A Interrupt
    13c8:	87 b7       	in	r24, 0x37	; 55
    13ca:	8f 7e       	andi	r24, 0xEF	; 239
    13cc:	87 bf       	out	0x37, r24	; 55
//**********************************************************************
void init_tcnt2(){
// 7-Seg Brigtness PWM

  //enable interrupts for Timer/Counter2 overflow
  TIMSK |= (1<<TOIE2) | (0<<OCIE2);  //TimerOverflow Interrupt Enable
    13ce:	87 b7       	in	r24, 0x37	; 55
    13d0:	80 64       	ori	r24, 0x40	; 64
    13d2:	87 bf       	out	0x37, r24	; 55
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (0<<CS22) | (1<<CS21) | (1<<CS20);
    13d4:	8b e7       	ldi	r24, 0x7B	; 123
    13d6:	85 bd       	out	0x25, r24	; 37
	//Fast-PWM mode, Inverting PWM Mode, 64 prescale, OC2(PB7)(PWM) Connected
	//0-256 takes 1ms (16k CLKIO cycles)
  OCR2 =  0xF0;                   //compare at 128(50%)
    13d8:	80 ef       	ldi	r24, 0xF0	; 240
    13da:	83 bd       	out	0x23, r24	; 35
//                            timer/counter3_init
//**********************************************************************
void init_tcnt3(){
// Volume PWM
// setup TCNT3 in pwm mode
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0) | (0<<WGM31) | (1<<WGM30);
    13dc:	80 91 8b 00 	lds	r24, 0x008B
    13e0:	81 68       	ori	r24, 0x81	; 129
    13e2:	80 93 8b 00 	sts	0x008B, r24
	// Fast PWM, 8-Bit mode top 0x00FF
	// Clear OC3A on compare match, Fast PWM (non-inverting)
	//use ICR1 as source for TOP, use clk/1
	TCCR3B |= (0<<WGM33) | (1<< WGM32) | (1<<CS30);
    13e6:	80 91 8a 00 	lds	r24, 0x008A
    13ea:	89 60       	ori	r24, 0x09	; 9
    13ec:	80 93 8a 00 	sts	0x008A, r24
	// No prescaling
	//no forced compare
	TCCR3C = 0x00;
    13f0:	10 92 8c 00 	sts	0x008C, r1
	//20% duty cycle, LED is a bit dimmer
	OCR3A = 0x00CD; // Initally at 50% Duty Cycle
    13f4:	8d ec       	ldi	r24, 0xCD	; 205
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	90 93 87 00 	sts	0x0087, r25
    13fc:	80 93 86 00 	sts	0x0086, r24
	disable_tcnt1(); // stop the clock
	init_tcnt2(); // initalize TIMER/COUNTER2 - 7-Seg Brigtness PWM 8-bit
	init_tcnt3(); // initalize TIMER/COUNTER3 - Audio Volume PWM 16-bit
	
//CHANGE
	init_twi();   // initialize TWI(I2C) interface - Temp Sensor
    1400:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <init_twi>
	lm73_wr_buf[0] = 0x00; //Loads the buffer with the read only temperature pointer addr
    1404:	10 92 a1 01 	sts	0x01A1, r1
			       //The ADDR Pin is left floating for addr 0x90
	twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2); //start the TWI write process (twi_start_wr())
    1408:	42 e0       	ldi	r20, 0x02	; 2
    140a:	61 ea       	ldi	r22, 0xA1	; 161
    140c:	71 e0       	ldi	r23, 0x01	; 1
    140e:	80 e9       	ldi	r24, 0x90	; 144
    1410:	0e 94 58 09 	call	0x12b0	; 0x12b0 <twi_start_wr>
	
	//ATMega48 Functions
	//USART
	uart_init();
    1414:	0e 94 aa 09 	call	0x1354	; 0x1354 <uart_init>
//                            timer/counter0_init
//**********************************************************************
void init_DDRs(){
// Add HERE
	// Set the DDR for Ports
	DDRA = DDRA_OUTPUT; // 7-Seg Data out
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	8a bb       	out	0x1a, r24	; 26
	DDRE = (1<<PE3) | (1<<PE5) | (1<<PE6) | (1<<PE7);
    141c:	88 ee       	ldi	r24, 0xE8	; 232
    141e:	82 b9       	out	0x02, r24	; 2
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
    1420:	84 e0       	ldi	r24, 0x04	; 4
    1422:	81 bb       	out	0x11, r24	; 17
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
    1424:	83 e0       	ldi	r24, 0x03	; 3
    1426:	84 bb       	out	0x14, r24	; 20
	incdec_mode = 0x01;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	80 93 51 01 	sts	0x0151, r24
//                            spi_read_write_8bit
//**********************************************************************
uint8_t spi_rw8(uint8_t write8){
// Add HERE
	uint8_t data = 0x00;
	SPDR = write8;				// Write to the Serial Port Data Reg
    142e:	85 e5       	ldi	r24, 0x55	; 85
    1430:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){}
    1432:	77 9b       	sbis	0x0e, 7	; 14
    1434:	fe cf       	rjmp	.-4      	; 0x1432 <main+0xae>
		// Wait untill Status Reg interrupt flag raised
	data = SPDR;
    1436:	8f b1       	in	r24, 0x0f	; 15
	// Control for Encoders and Bargraph & Volume PWM
	DDRD = (1<<PD2); // Control for Encoders and Bargraph
	DDRC = (1<<PC0) | (1<<PC1); // Alarm PWM Tone
	incdec_mode = 0x01;
	// Read the starting encoder positions
	old_encoder = spi_rw8(0x55);
    1438:	80 93 4e 01 	sts	0x014E, r24
//                            init_adc
//**********************************************************************
void init_ADC(){
// ADC used to read brightness levels using a photoresistor
	//Initalize ADC and its ports
	DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input
    143c:	80 91 61 00 	lds	r24, 0x0061
    1440:	8f 77       	andi	r24, 0x7F	; 127
    1442:	80 93 61 00 	sts	0x0061, r24
	PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
    1446:	80 91 62 00 	lds	r24, 0x0062
    144a:	8f 77       	andi	r24, 0x7F	; 127
    144c:	80 93 62 00 	sts	0x0062, r24

	ADMUX = (1<<ADLAR) | (1<<REFS0) | (1<<MUX0) | (1<<MUX1) | (1<<MUX2);
    1450:	87 e6       	ldi	r24, 0x67	; 103
    1452:	87 b9       	out	0x07, r24	; 7
	//ADMUX = (1<<MUX0) | (1<<MUX1) | (1<<MUX2)
	//single-ended, input PORTF bit 7, right adjusted, 10 bits

	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
    1454:	87 e8       	ldi	r24, 0x87	; 135
    1456:	86 b9       	out	0x06, r24	; 6
//CHANGE
	
	
	init_DDRs(); // initalize DDRs for the display, encoders bargraph
	init_ADC();
	lcd_init(); // initialize the lcd screen
    1458:	0e 94 f0 06 	call	0xde0	; 0xde0 <lcd_init>

	sei(); // enable global interrupts
    145c:	78 94       	sei
	
//CHANGE
	clear_display(); //clean up the display
    145e:	0e 94 9b 06 	call	0xd36	; 0xd36 <clear_display>
		for(;j<10;j++){
		for(;i<5;i++){
                	PORTB = i<<4 | 0<<PB7; // Select a segment
			PORTA = segment_data[i]; // Send data to the segment
			_delay_us(10); // Hold
			PORTA = 0XFF; //Seg off to reduce flicker
    1462:	cf ef       	ldi	r28, 0xFF	; 255
//CHANGE

	while(1){                             //main while loop
	// Send the Digits to the Display
	  //break up the disp_value to 4, BCD digits in the array: call (segsum)
		segsum(clockmode);
    1464:	80 91 50 01 	lds	r24, 0x0150
    1468:	0e 94 48 01 	call	0x290	; 0x290 <segsum>
	  //bound a counter (0-4) to keep track of digit to display
		i = 0;
    146c:	10 92 8b 01 	sts	0x018B, r1
		j = 0; //Refresh the seg data less frequently
    1470:	10 92 65 01 	sts	0x0165, r1
	  //send 7 segment code to LED segments
		for(;j<10;j++){
    1474:	80 91 65 01 	lds	r24, 0x0165
    1478:	8a 30       	cpi	r24, 0x0A	; 10
    147a:	d8 f0       	brcs	.+54     	; 0x14b2 <main+0x12e>
    147c:	f3 cf       	rjmp	.-26     	; 0x1464 <main+0xe0>
		for(;i<5;i++){
                	PORTB = i<<4 | 0<<PB7; // Select a segment
    147e:	80 91 8b 01 	lds	r24, 0x018B
    1482:	82 95       	swap	r24
    1484:	80 7f       	andi	r24, 0xF0	; 240
    1486:	88 bb       	out	0x18, r24	; 24
			PORTA = segment_data[i]; // Send data to the segment
    1488:	e0 91 8b 01 	lds	r30, 0x018B
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	e4 57       	subi	r30, 0x74	; 116
    1490:	fe 4f       	sbci	r31, 0xFE	; 254
    1492:	80 81       	ld	r24, Z
    1494:	8b bb       	out	0x1b, r24	; 27
    1496:	85 e3       	ldi	r24, 0x35	; 53
    1498:	8a 95       	dec	r24
    149a:	f1 f7       	brne	.-4      	; 0x1498 <main+0x114>
    149c:	00 00       	nop
			_delay_us(10); // Hold
			PORTA = 0XFF; //Seg off to reduce flicker
    149e:	cb bb       	out	0x1b, r28	; 27
    14a0:	85 e0       	ldi	r24, 0x05	; 5
    14a2:	8a 95       	dec	r24
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <main+0x11e>
    14a6:	00 00       	nop
	  //bound a counter (0-4) to keep track of digit to display
		i = 0;
		j = 0; //Refresh the seg data less frequently
	  //send 7 segment code to LED segments
		for(;j<10;j++){
		for(;i<5;i++){
    14a8:	80 91 8b 01 	lds	r24, 0x018B
    14ac:	8f 5f       	subi	r24, 0xFF	; 255
    14ae:	80 93 8b 01 	sts	0x018B, r24
    14b2:	80 91 8b 01 	lds	r24, 0x018B
    14b6:	85 30       	cpi	r24, 0x05	; 5
    14b8:	10 f3       	brcs	.-60     	; 0x147e <main+0xfa>
		segsum(clockmode);
	  //bound a counter (0-4) to keep track of digit to display
		i = 0;
		j = 0; //Refresh the seg data less frequently
	  //send 7 segment code to LED segments
		for(;j<10;j++){
    14ba:	80 91 65 01 	lds	r24, 0x0165
    14be:	8f 5f       	subi	r24, 0xFF	; 255
    14c0:	80 93 65 01 	sts	0x0165, r24
    14c4:	80 91 65 01 	lds	r24, 0x0165
    14c8:	8a 30       	cpi	r24, 0x0A	; 10
    14ca:	98 f3       	brcs	.-26     	; 0x14b2 <main+0x12e>
    14cc:	cb cf       	rjmp	.-106    	; 0x1464 <main+0xe0>

000014ce <__divmodhi4>:
    14ce:	97 fb       	bst	r25, 7
    14d0:	07 2e       	mov	r0, r23
    14d2:	16 f4       	brtc	.+4      	; 0x14d8 <__divmodhi4+0xa>
    14d4:	00 94       	com	r0
    14d6:	07 d0       	rcall	.+14     	; 0x14e6 <__divmodhi4_neg1>
    14d8:	77 fd       	sbrc	r23, 7
    14da:	09 d0       	rcall	.+18     	; 0x14ee <__divmodhi4_neg2>
    14dc:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__udivmodhi4>
    14e0:	07 fc       	sbrc	r0, 7
    14e2:	05 d0       	rcall	.+10     	; 0x14ee <__divmodhi4_neg2>
    14e4:	3e f4       	brtc	.+14     	; 0x14f4 <__divmodhi4_exit>

000014e6 <__divmodhi4_neg1>:
    14e6:	90 95       	com	r25
    14e8:	81 95       	neg	r24
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	08 95       	ret

000014ee <__divmodhi4_neg2>:
    14ee:	70 95       	com	r23
    14f0:	61 95       	neg	r22
    14f2:	7f 4f       	sbci	r23, 0xFF	; 255

000014f4 <__divmodhi4_exit>:
    14f4:	08 95       	ret

000014f6 <__divmodsi4>:
    14f6:	05 2e       	mov	r0, r21
    14f8:	97 fb       	bst	r25, 7
    14fa:	1e f4       	brtc	.+6      	; 0x1502 <__divmodsi4+0xc>
    14fc:	00 94       	com	r0
    14fe:	0e 94 92 0a 	call	0x1524	; 0x1524 <__negsi2>
    1502:	57 fd       	sbrc	r21, 7
    1504:	07 d0       	rcall	.+14     	; 0x1514 <__divmodsi4_neg2>
    1506:	0e 94 b7 0a 	call	0x156e	; 0x156e <__udivmodsi4>
    150a:	07 fc       	sbrc	r0, 7
    150c:	03 d0       	rcall	.+6      	; 0x1514 <__divmodsi4_neg2>
    150e:	4e f4       	brtc	.+18     	; 0x1522 <__divmodsi4_exit>
    1510:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__negsi2>

00001514 <__divmodsi4_neg2>:
    1514:	50 95       	com	r21
    1516:	40 95       	com	r20
    1518:	30 95       	com	r19
    151a:	21 95       	neg	r18
    151c:	3f 4f       	sbci	r19, 0xFF	; 255
    151e:	4f 4f       	sbci	r20, 0xFF	; 255
    1520:	5f 4f       	sbci	r21, 0xFF	; 255

00001522 <__divmodsi4_exit>:
    1522:	08 95       	ret

00001524 <__negsi2>:
    1524:	90 95       	com	r25
    1526:	80 95       	com	r24
    1528:	70 95       	com	r23
    152a:	61 95       	neg	r22
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	8f 4f       	sbci	r24, 0xFF	; 255
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	08 95       	ret

00001534 <__tablejump2__>:
    1534:	ee 0f       	add	r30, r30
    1536:	ff 1f       	adc	r31, r31
    1538:	00 24       	eor	r0, r0
    153a:	00 1c       	adc	r0, r0
    153c:	0b be       	out	0x3b, r0	; 59
    153e:	07 90       	elpm	r0, Z+
    1540:	f6 91       	elpm	r31, Z
    1542:	e0 2d       	mov	r30, r0
    1544:	09 94       	ijmp

00001546 <__udivmodhi4>:
    1546:	aa 1b       	sub	r26, r26
    1548:	bb 1b       	sub	r27, r27
    154a:	51 e1       	ldi	r21, 0x11	; 17
    154c:	07 c0       	rjmp	.+14     	; 0x155c <__udivmodhi4_ep>

0000154e <__udivmodhi4_loop>:
    154e:	aa 1f       	adc	r26, r26
    1550:	bb 1f       	adc	r27, r27
    1552:	a6 17       	cp	r26, r22
    1554:	b7 07       	cpc	r27, r23
    1556:	10 f0       	brcs	.+4      	; 0x155c <__udivmodhi4_ep>
    1558:	a6 1b       	sub	r26, r22
    155a:	b7 0b       	sbc	r27, r23

0000155c <__udivmodhi4_ep>:
    155c:	88 1f       	adc	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	5a 95       	dec	r21
    1562:	a9 f7       	brne	.-22     	; 0x154e <__udivmodhi4_loop>
    1564:	80 95       	com	r24
    1566:	90 95       	com	r25
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	08 95       	ret

0000156e <__udivmodsi4>:
    156e:	a1 e2       	ldi	r26, 0x21	; 33
    1570:	1a 2e       	mov	r1, r26
    1572:	aa 1b       	sub	r26, r26
    1574:	bb 1b       	sub	r27, r27
    1576:	fd 01       	movw	r30, r26
    1578:	0d c0       	rjmp	.+26     	; 0x1594 <__udivmodsi4_ep>

0000157a <__udivmodsi4_loop>:
    157a:	aa 1f       	adc	r26, r26
    157c:	bb 1f       	adc	r27, r27
    157e:	ee 1f       	adc	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	a2 17       	cp	r26, r18
    1584:	b3 07       	cpc	r27, r19
    1586:	e4 07       	cpc	r30, r20
    1588:	f5 07       	cpc	r31, r21
    158a:	20 f0       	brcs	.+8      	; 0x1594 <__udivmodsi4_ep>
    158c:	a2 1b       	sub	r26, r18
    158e:	b3 0b       	sbc	r27, r19
    1590:	e4 0b       	sbc	r30, r20
    1592:	f5 0b       	sbc	r31, r21

00001594 <__udivmodsi4_ep>:
    1594:	66 1f       	adc	r22, r22
    1596:	77 1f       	adc	r23, r23
    1598:	88 1f       	adc	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	1a 94       	dec	r1
    159e:	69 f7       	brne	.-38     	; 0x157a <__udivmodsi4_loop>
    15a0:	60 95       	com	r22
    15a2:	70 95       	com	r23
    15a4:	80 95       	com	r24
    15a6:	90 95       	com	r25
    15a8:	9b 01       	movw	r18, r22
    15aa:	ac 01       	movw	r20, r24
    15ac:	bd 01       	movw	r22, r26
    15ae:	cf 01       	movw	r24, r30
    15b0:	08 95       	ret

000015b2 <__itoa_ncheck>:
    15b2:	bb 27       	eor	r27, r27
    15b4:	4a 30       	cpi	r20, 0x0A	; 10
    15b6:	31 f4       	brne	.+12     	; 0x15c4 <__itoa_ncheck+0x12>
    15b8:	99 23       	and	r25, r25
    15ba:	22 f4       	brpl	.+8      	; 0x15c4 <__itoa_ncheck+0x12>
    15bc:	bd e2       	ldi	r27, 0x2D	; 45
    15be:	90 95       	com	r25
    15c0:	81 95       	neg	r24
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__utoa_common>

000015c8 <__utoa_ncheck>:
    15c8:	bb 27       	eor	r27, r27

000015ca <__utoa_common>:
    15ca:	fb 01       	movw	r30, r22
    15cc:	55 27       	eor	r21, r21
    15ce:	aa 27       	eor	r26, r26
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	aa 1f       	adc	r26, r26
    15d6:	a4 17       	cp	r26, r20
    15d8:	10 f0       	brcs	.+4      	; 0x15de <__utoa_common+0x14>
    15da:	a4 1b       	sub	r26, r20
    15dc:	83 95       	inc	r24
    15de:	50 51       	subi	r21, 0x10	; 16
    15e0:	b9 f7       	brne	.-18     	; 0x15d0 <__utoa_common+0x6>
    15e2:	a0 5d       	subi	r26, 0xD0	; 208
    15e4:	aa 33       	cpi	r26, 0x3A	; 58
    15e6:	08 f0       	brcs	.+2      	; 0x15ea <__utoa_common+0x20>
    15e8:	a9 5d       	subi	r26, 0xD9	; 217
    15ea:	a1 93       	st	Z+, r26
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	79 f7       	brne	.-34     	; 0x15ce <__utoa_common+0x4>
    15f0:	b1 11       	cpse	r27, r1
    15f2:	b1 93       	st	Z+, r27
    15f4:	11 92       	st	Z+, r1
    15f6:	cb 01       	movw	r24, r22
    15f8:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <strrev>

000015fc <strrev>:
    15fc:	dc 01       	movw	r26, r24
    15fe:	fc 01       	movw	r30, r24
    1600:	67 2f       	mov	r22, r23
    1602:	71 91       	ld	r23, Z+
    1604:	77 23       	and	r23, r23
    1606:	e1 f7       	brne	.-8      	; 0x1600 <strrev+0x4>
    1608:	32 97       	sbiw	r30, 0x02	; 2
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <strrev+0x18>
    160c:	7c 91       	ld	r23, X
    160e:	6d 93       	st	X+, r22
    1610:	70 83       	st	Z, r23
    1612:	62 91       	ld	r22, -Z
    1614:	ae 17       	cp	r26, r30
    1616:	bf 07       	cpc	r27, r31
    1618:	c8 f3       	brcs	.-14     	; 0x160c <strrev+0x10>
    161a:	08 95       	ret

0000161c <_exit>:
    161c:	f8 94       	cli

0000161e <__stop_program>:
    161e:	ff cf       	rjmp	.-2      	; 0x161e <__stop_program>
