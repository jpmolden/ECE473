
bar_graph_noints_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000005d0  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c10  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <spi_init>:
#include <util/delay.h>
//***********************************************************************
//                            spi_init                               
//**********************************************************************
void spi_init(void){
  DDRB   = 0x07; //output mode for SS, MOSI, SCLK
  a4:	87 e0       	ldi	r24, 0x07	; 7
  a6:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); //master mode, clk low on idle, leading edge sample
  a8:	81 e1       	ldi	r24, 0x11	; 17
  aa:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (1<<SPI2X); //choose double speed operation
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	8e b9       	out	0x0e, r24	; 14
  b0:	08 95       	ret

000000b2 <main>:
//**********************************************************************
int main(){     

uint8_t display_count = 0x01; //holds count for display 
uint8_t i; //dummy counter
DDRA = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
#include <util/delay.h>
//***********************************************************************
//                            spi_init                               
//**********************************************************************
void spi_init(void){
  DDRB   = 0x07; //output mode for SS, MOSI, SCLK
  b6:	87 e0       	ldi	r24, 0x07	; 7
  b8:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA); //master mode, clk low on idle, leading edge sample
  ba:	81 e1       	ldi	r24, 0x11	; 17
  bc:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (1<<SPI2X); //choose double speed operation
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	8e b9       	out	0x0e, r24	; 14
uint8_t display_count = 0x01; //holds count for display 
uint8_t i; //dummy counter
DDRA = 0xFF;
spi_init();  //initalize SPI port
while(1){                             //main while loop
    PORTA = 0x0F;
  c2:	9f e0       	ldi	r25, 0x0F	; 15
  c4:	9b bb       	out	0x1b, r25	; 27
    SPDR = display_count;//send display_count to the display 
  c6:	8f b9       	out	0x0f, r24	; 15

    while (bit_is_clear(SPSR,SPIF)){} //wait till SPI data has been sent out
  c8:	77 9b       	sbis	0x0e, 7	; 14
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <main+0x16>

    PORTB |=  0x01;                   //send rising edge to regclk on HC595 
  cc:	c0 9a       	sbi	0x18, 0	; 24
    PORTB &= ~0x01;                   //send falling edge to regclk on HC595
  ce:	c0 98       	cbi	0x18, 0	; 24

    display_count = display_count << 1;//shift display_count for next time 
  d0:	88 0f       	add	r24, r24

    if(display_count==0x00){display_count=0x01;} //set display_count back to 1st positon
  d2:	09 f4       	brne	.+2      	; 0xd6 <main+0x24>
  d4:	81 e0       	ldi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	31 ee       	ldi	r19, 0xE1	; 225
  da:	44 e0       	ldi	r20, 0x04	; 4
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	30 40       	sbci	r19, 0x00	; 0
  e0:	40 40       	sbci	r20, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x2a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x34>
  e6:	00 00       	nop
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	31 ee       	ldi	r19, 0xE1	; 225
  ec:	44 e0       	ldi	r20, 0x04	; 4
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	30 40       	sbci	r19, 0x00	; 0
  f2:	40 40       	sbci	r20, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x3c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x46>
  f8:	00 00       	nop
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	31 ee       	ldi	r19, 0xE1	; 225
  fe:	44 e0       	ldi	r20, 0x04	; 4
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	40 40       	sbci	r20, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x4e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x58>
 10a:	00 00       	nop
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	31 ee       	ldi	r19, 0xE1	; 225
 110:	44 e0       	ldi	r20, 0x04	; 4
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
 116:	40 40       	sbci	r20, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x60>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x6a>
 11c:	00 00       	nop
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	31 ee       	ldi	r19, 0xE1	; 225
 122:	44 e0       	ldi	r20, 0x04	; 4
 124:	21 50       	subi	r18, 0x01	; 1
 126:	30 40       	sbci	r19, 0x00	; 0
 128:	40 40       	sbci	r20, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x72>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x7c>
 12e:	00 00       	nop
 130:	c9 cf       	rjmp	.-110    	; 0xc4 <main+0x12>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
